{"version":3,"sources":["js/three/three.js","index.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","THREE","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","EventDispatcher","type","listener","undefined","_listeners","listeners","indexOf","push","listenerArray","index","splice","event","target","array","slice","i","l","length","call","_lut","toString","_seed","DEG2RAD","Math","PI","RAD2DEG","generateUUID","d0","random","d1","d2","d3","uuid","toUpperCase","clamp","value","min","max","euclideanModulo","n","m","lerp","x","y","t","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","floor","MathUtils","Object","freeze","__proto__","mapLinear","a1","a2","b1","b2","inverseLerp","damp","lambda","dt","exp","pingpong","abs","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","s","degToRad","degrees","radToDeg","radians","setQuaternionFromProperEuler","q","a","b","c","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","set","console","warn","Vector2","scalar","Error","constructor","v","w","addVectors","subVectors","multiplyScalar","e","elements","minVal","maxVal","divideScalar","round","sqrt","angle","atan2","distanceToSquared","dx","dy","normalize","alpha","v1","v2","offset","attribute","getX","getY","center","prototype","isVector2","Matrix3","_canvas","arguments","error","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","me","xAxis","yAxis","zAxis","setFromMatrix3Column","multiplyMatrices","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","d","f","g","h","t11","t12","t13","det","detInv","tmp","matrix4","setFromMatrix4","invert","transpose","r","tx","ty","sx","sy","rotation","cx","cy","theta","matrix","fromArray","isMatrix3","ImageUtils","image","test","src","HTMLCanvasElement","canvas","document","createElementNS","width","height","context","getContext","ImageData","putImageData","drawImage","toDataURL","textureId","Texture","DEFAULT_IMAGE","mapping","DEFAULT_MAPPING","wrapS","wrapT","magFilter","minFilter","format","anisotropy","encoding","defineProperty","name","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","setUvTransform","copy","source","meta","isRootObject","textures","output","metadata","generator","wrap","images","url","Array","isArray","isDataTexture","serializeImage","dispatchEvent","uv","applyMatrix3","HTMLImageElement","ImageBitmap","getDataURL","data","isTexture","Vector4","z","acos","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","yy","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","options","depth","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","dispose","clone","isWebGLRenderTarget","WebGLMultipleRenderTargets","count","il","isWebGLMultipleRenderTargets","WebGLMultisampleRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","_onChangeCallback","quaternion","euler","update","isEuler","_order","c1","c3","s1","s3","axis","halfAngle","trace","vFrom","vTo","dot","Number","EPSILON","step","angleTo","slerp","conjugate","p","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","qb","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","qa","callback","qm","slerpQuaternions","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","isQuaternion","Vector3","multiplyVectors","applyQuaternion","_quaternion$4","setFromEuler","setFromAxisAngle","qx","qy","qz","qw","ix","iy","iz","iw","camera","applyMatrix4","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","matrixWorld","crossVectors","ax","ay","az","bx","by","bz","denominator","lengthSq","planeNormal","_vector$c","projectOnVector","sub","normal","dz","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindricalCoords","setFromMatrixColumn","sz","isVector3","Box3","Infinity","minX","minY","minZ","maxX","maxY","maxZ","points","makeEmpty","expandByPoint","size","halfSize","_vector$b","add","object","expandByObject","box","isEmpty","point","vector","addScalar","updateWorldMatrix","geometry","boundingBox","computeBoundingBox","_box$3","union","children","sphere","clampPoint","plane","constant","triangle","getCenter","_center","_extents","_v0$2","_v1$7","_v2$3","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","clampedPoint","getSize","_points","setFromPoints","equals","isBox3","_testAxis","v0","extents","j","p0","p1","p2","_box$2","_v1$6","_toFarthestPoint","_toPoint","Sphere","optionalCenter","maxRadiusSq","distanceTo","radiusSum","intersectsSphere","distanceToPoint","deltaLengthSq","expandByScalar","getMaxScaleOnAxis","missingRadiusHalf","_vector$a","_segCenter","_segDir","_diff","_edge1","_edge2","_normal$1","Ray","origin","direction","ray","at","directionDistance","distanceSqToPoint","optionalPointOnRay","optionalPointOnSegment","segExtent","s0","sqrDist","extDet","a01","b0","invDet","tca","radius2","thc","t0","t1","distanceToPlane","distToPoint","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectBox","backfaceCulling","DdN","sign","DdQxE2","DdE1xQ","cross","QdN","transformDirection","Matrix4","n14","n24","n34","n41","n42","n43","n44","scaleX","_v1$5","scaleY","scaleZ","af","bf","ce","cf","de","df","ac","ad","bc","bd","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","t14","scaleXSq","scaleYSq","scaleZSq","yx","zx","zy","position","scale","x2","y2","z2","wx","wy","wz","determinant","_m1$2","invSX","invSY","invSZ","setFromRotationMatrix","left","right","top","bottom","near","far","isMatrix4","_matrix$1","_quaternion$3","Euler","DefaultOrder","asin","makeRotationFromQuaternion","newOrder","setFromQuaternion","optionalResult","RotationOrders","Layers","mask","channel","layers","_object3DId","_v1$4","_q1","_m1$1","_target","_position$3","_scale$2","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","parent","DefaultUp","_onChange","onRotationChange","onQuaternionChange","defineProperties","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","updateMatrix","premultiply","decompose","multiply","rotateOnAxis","distance","translateOnAxis","setFromMatrixPosition","isCamera","isLight","lookAt","extractRotation","isObject3D","remove","id","getObjectByProperty","child","traverse","traverseVisible","traverseAncestors","force","updateMatrixWorld","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","element","toJSON","JSON","stringify","toArray","isInstancedMesh","instanceMatrix","instanceColor","isMesh","isLine","isPoints","parameters","shape","isSkinnedMesh","bindMode","bindMatrix","skeleton","material","uuids","animation","extractFromCache","cache","values","key","recursive","parse","_vector1","_vector2$1","_normalMatrix","Plane","setFromNormalAndCoplanarPoint","inverseNormalLength","negate","line","delta","start","startSign","endSign","end","intersectsPlane","optionalNormalMatrix","getNormalMatrix","referencePoint","coplanarPoint","isPlane","_v0$1","_v1$3","_v2$2","_v3$1","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","i0","i1","i2","getNormal","setFromCoplanarPoints","getBarycoord","uv1","uv2","uv3","getUV","containsPoint","isFrontFacing","intersectsTriangle","d4","vc","addScaledVector","d5","d6","vb","va","denom","targetLengthSq","dot00","dot01","dot02","dot11","dot12","invDenom","u","p3","materialId","Material","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","alphaToCoverage","premultipliedAlpha","toneMapped","onBeforeCompile","newValue","currentValue","isColor","flatShading","isRoot","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","map","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","combine","envMapIntensity","reflectivity","refractionRatio","gradientMap","transmission","transmissionMap","thickness","thicknessMap","attenuationDistance","attenuationColor","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","srcPlanes","dstPlanes","isMaterial","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","style","handleAlpha","string","parseFloat","exec","components","parseInt","setHSL","charAt","setColorName","toLowerCase","gammaFactor","safeInverse","copyGammaToLinear","copyLinearToGamma","copySRGBToLinear","copyLinearToSRGB","hue","saturation","lightness","getHSL","color1","color2","normalized","NAMES","MeshBasicMaterial","setValues","isMeshBasicMaterial","_vector$9","_vector2","BufferAttribute","itemSize","TypeError","usage","updateRange","index1","index2","colors","vectors","fromBufferAttribute","setXY","setXYZ","applyNormalMatrix","onUploadCallback","isBufferAttribute","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","isFloat16BufferAttribute","Float32BufferAttribute","Float32Array","Float64BufferAttribute","Float64Array","arrayMax","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1","_obj","_offset","_box$1","_boxMorphTargets","_vector$8","BufferGeometry","attributes","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","materialIndex","needsUpdate","tangent","computeBoundingSphere","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","translate","setAttribute","morphAttributesPosition","isGLBufferAttribute","setFromBufferAttribute","morphAttribute","isNaN","jl","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","group","handleTriangle","tmp2","n2","handleVertex","isFinite","positionAttribute","getAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","cb","ab","normalizeNormals","isBufferGeometry","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","addGroup","keys","hasMorphAttributes","attributeArray","setIndex","_inverseMatrix$2","_ray$2","_sphere$3","_vA$1","_vB$1","_vC$1","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA$1","_uvB$1","_uvC$1","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","morphTargetInfluences","morphTargetDictionary","assign","ml","String","raycaster","intersects","intersection","intersectsBox","morphPosition","groupMaterial","checkBufferGeometryIntersection","faceIndex","face","isGeometry","morphInfluences","influence","boneTransform","checkIntersection","intersect","intersectTriangle","BoxGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","property","mergeUniforms","uniforms","merged","UniformsUtils","merge","default_vertex","default_fragment","ShaderMaterial","defines","vertexShader","fragmentShader","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","uniform","isShaderMaterial","Camera","PerspectiveCamera","fov","aspect","zoom","focus","view","filmGauge","filmOffset","updateProjectionMatrix","focalLength","vExtentSlope","getFilmHeight","atan","fullWidth","fullHeight","enabled","offsetX","offsetY","skew","getFilmWidth","makePerspective","isPerspectiveCamera","CubeCamera","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderer","scene","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","render","CubeTexture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","shader","tEquirect","mesh","currentMinFilter","stencil","clear","_sphere$2","_vector$7","Frustum","p4","p5","planes","frustum","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","time","frame","requestAnimationFrame","stop","cancelAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","gl","capabilities","isWebGL2","buffers","WeakMap","get","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","bufferData","FLOAT","HALF_FLOAT","UNSIGNED_SHORT","SHORT","UNSIGNED_INT","INT","BYTE","UNSIGNED_BYTE","BYTES_PER_ELEMENT","updateBuffer","bufferSubData","subarray","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmission_fragment","transmission_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","state","objects","clearColor","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","setClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","deleteAttribute","onBeforeRender","copyPosition","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","getParameter","MAX_VERTEX_ATTRIBS","extension","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","reset","resetDefaultState","setup","updateBuffers","getBindingState","programMap","stateMap","createVertexArray","createVertexArrayOES","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","ELEMENT_ARRAY_BUFFER","setupVertexAttributes","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","ARRAY_BUFFER","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","info","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","has","logarithmicDepthBuffer","maxTextures","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","removeEventListener","cubemap","fromEquirectangularTexture","addEventListener","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","TRIANGLES","LINES","LINE_STRIP","LINE_LOOP","POINTS","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","sort","MAX_SAFE_INTEGER","morphInfluencesSum","hasAttribute","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","hasEventListener","physical","transmissionSamplerSize","transmissionSamplerMap","DataTexture2DArray","wrapR","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","copyArray","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueV1i","uniform1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV2ui","uniform2uiv","setValueV3ui","uniform3uiv","setValueV4ui","uniform4uiv","setValueT1","unit","safeSetTexture2D","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueT2DArray1","setTexture2DArray","setValueV1fArray","uniform1fv","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV1uiArray","uniform1uiv","setValueV2uiArray","setValueV3uiArray","setValueV4uiArray","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","match","matchEnd","idIsIndex","subscript","next","WebGLUniforms","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","trim","addLineNumbers","split","join","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","generateShadowMapTypeDefine","shadowMapType","envMapTypeDefine","generateEnvMapTypeDefine","envMapMode","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","generateExtensions","chunks","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","filter","customDefines","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexAlphas","vertexUvs","uvsVertexOnly","skinning","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","vertexGlsl","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","vertexErrors","fragmentErrors","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","destroy","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","environment","isMeshStandardMaterial","getMaxBones","bones","nVertexUniforms","nVertexMatrices","isFogExp2","directional","spot","rectArea","hemi","shadowMap","customProgramCacheKey","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","pop","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","transmissive","defaultProgram","getNextRenderItem","renderItem","finish","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","light","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","identity","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","_capabilities","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","_maxTextureSize","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","getDistanceMaterialVariant","getDepthMaterial","result","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","intersectsObject","k","kl","depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","colorBuffer","ColorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","DepthBuffer","currentDepthMask","currentDepthFunc","currentDepthClear","enable","DEPTH_TEST","disable","depthMask","setFunc","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","clearDepth","StencilBuffer","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","STENCIL_TEST","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","xrFramebuffer","currentBoundFramebuffers","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","MAX_COMBINED_TEXTURE_IMAGE_UNITS","lineWidthAvailable","glVersion","VERSION","currentTextureSlot","currentBoundTextures","scissorParam","SCISSOR_BOX","viewportParam","VIEWPORT","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_POSITIVE_X","setFlipSided","setCullFace","CULL_FACE","equationToGL","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","MIN","MAX","MIN_EXT","MAX_EXT","factorToGL","ZERO","ONE","SRC_COLOR","SRC_ALPHA","SRC_ALPHA_SATURATE","DST_COLOR","DST_ALPHA","ONE_MINUS_SRC_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_DST_ALPHA","BLEND","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","CW","CCW","cullFace","BACK","FRONT","FRONT_AND_BACK","setPolygonOffset","factor","POLYGON_OFFSET_FILL","activeTexture","webglSlot","TEXTURE0","bindFramebuffer","framebuffer","DRAW_FRAMEBUFFER","FRAMEBUFFER","bindXRFramebuffer","useProgram","setMaterial","frontFaceCW","SAMPLE_ALPHA_TO_COVERAGE","setLineWidth","lineWidth","SCISSOR_TEST","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","KEEP","READ_FRAMEBUFFER","WebGLTextures","_gl","utils","_videoTextures","useOffscreenCanvas","OffscreenCanvas","err","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","isPowerOfTwo$1","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","RED","R32F","R16F","R8","RGB","RGB32F","RGB16F","RGB8","RGBA32F","RGBA16F","RGBA8","filterFallback","LINEAR","deallocateTexture","textureProperties","__webglInit","deleteTexture","__webglTexture","isVideoTexture","onRenderTargetDispose","deallocateRenderTarget","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","attachmentProperties","textureUnits","setTexture2D","slot","updateVideoTexture","__version","complete","uploadTexture","setTextureCube","uploadCubeTexture","initTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","NONE","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","mipmapImage","wrappingToGL","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","filterToGL","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_3D","TEXTURE_2D_ARRAY","TEXTURE_WRAP_R","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT24","DEPTH24_STENCIL8","DEPTH_COMPONENT16","DEPTH_STENCIL","setupFrameBufferTexture","attachment","textureTarget","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","RENDERBUFFER","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","setupDepthRenderbuffer","isCube","setupDepthTexture","webglDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultipleRenderTargets","isRenderTarget3D","createFramebuffer","COLOR_ATTACHMENT0","glTextureType","updateRenderTargetMipmap","updateMultisampleRenderTarget","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","blitFramebuffer","WebGLUtils","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT_OES","ALPHA","LUMINANCE","LUMINANCE_ALPHA","RED_INTEGER","RG","RG_INTEGER","RGB_INTEGER","RGBA_INTEGER","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","isGroup","_moveEvent","WebXRController","_targetRay","_grip","_hand","joints","inputState","pinching","hasLinearVelocity","linearVelocity","hasAngularVelocity","angularVelocity","inputSource","referenceSpace","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","getPose","targetRaySpace","transform","inputjoint","jointPose","getJointPose","jointName","joint","jointRadius","indexTip","thumbTip","distanceToPinch","handedness","gripSpace","WebXRManager","framebufferScaleFactor","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","onSessionEnd","forEach","disconnect","isPresenting","onInputSourcesChange","inputSources","removed","added","cameraAutoUpdate","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","getContextAttributes","xrCompatible","makeXRCompatible","layerInit","antialias","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","cameraLPos","cameraRPos","updateCamera","depthNear","depthFar","setProjectionFromUnion","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","translateX","translateZ","near2","far2","left2","right2","top2","bottom2","getCamera","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","pixelRatio","transmissionRenderTarget","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","WebGLRenderer","display","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_this","_isContextLost","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_currentDrawBuffers","_clippingEnabled","_localClippingEnabled","_transmissionRenderTarget","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","contextName","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","message","initGLContext","preventDefault","infoAutoReset","shadowMapAutoUpdate","shadowMapNeedsUpdate","onMaterialDispose","deallocateMaterial","releaseMaterialProgramReferences","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","setSize","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","method","setTransparentSort","bits","onXRSessionStart","onXRSessionEnd","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","DYNAMIC_DRAW","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","getProgram","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","onAfterRender","lightsStateVersion","programCacheKey","updateCommonMaterialProperties","onBuild","needsLights","materialNeedsLights","progUniforms","uniformsList","needsProgramChange","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","computeBoneTexture","boneTextureSize","window","setFromProjectionMatrix","projectObject","isLOD","intersectsSprite","opaqueObjects","transmissiveObjects","transparentObjects","renderTransmissiveObjects","framebufferBound","drawBuffersWEBGL","layer","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","IMPLEMENTATION_COLOR_READ_FORMAT","halfFloatSupportedByExt","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","unpackRowLen","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","WebGL1Renderer","FogExp2","Fog","Scene","InterleavedBuffer","arrayBuffers","_uuid","ib","setUsage","isInterleavedBuffer","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_geometry","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA","_vB","_vC","_uvA","_uvB","_uvC","Sprite","float32Array","setFromMatrixScale","transformVertex","vertexPosition","mvPosition","_v1$2","_v2$1","LOD","_currentLevel","levels","addLevel","getObjectForDistance","raycast","_basePosition","_skinIndex","_skinWeight","_vector$5","_matrix","SkinnedMesh","bindMatrixInverse","calculateInverses","skinWeight","manhattanLength","setXYZW","skinIndex","weight","getComponent","boneIndex","boneInverses","Bone","isBone","DataTexture","_offsetMatrix","_identityMatrix","Skeleton","boneMatrices","inverse","bone","json","boneInverse","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","raycastTimes","instanceId","getMatrixAt","linecap","linejoin","_start$1","_end$1","_inverseMatrix$1","_ray$1","_sphere$1","Line","lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","distSq","distanceSqToSegment","_start","_end","LineSegments","LineLoop","_inverseMatrix","_ray","_sphere","_position$2","Points","testPoint","rayPointDistanceSq","intersectPoint","closestPointToPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","generateTorso","slope","indexRow","ConeGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","generateUVs","inclination","correctUVs","centroid","azi","correctSeam","computeVertexNormals","DodecahedronGeometry","_v0","_v1$1","_normal","_triangle","EdgesGeometry","thresholdAngle","precisionPoints","thresholdDot","indexAttr","getIndex","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","Earcut","holeIndices","dim","hasHoles","invSize","outerLen","outerNode","linkedList","prev","eliminateHoles","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","earcutLinked","clockwise","last","signedArea","sum","insertNode","removeNode","again","area","ear","pass","indexCurve","zOrder","prevZ","nextZ","sortLinked","tail","numMerges","pSize","qSize","inSize","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","findHoleBridge","hx","hy","mx","my","tanMin","sectorContainsSector","leftmost","px","py","intersectsPolygon","middleInside","inside","q1","q2","o1","o2","o3","o4","onSegment","num","Node","an","bp","ShapeUtils","contour","pts","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","reverse","isClockWise","hl","ahole","triangulateShape","concat","scalePt2","pt","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","holesMovements","oneHoleMovements","verticesMovements","bs","vert","binormals","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","toJSON$1","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","OctahedronGeometry","ParametricGeometry","func","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateBufferData","generateIndices","WireframeGeometry","edge","edges","o","ol","edge1","edge2","Geometries","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","Materials","AnimationUtils","arraySlice","from","to","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","DataView","getKeyframeOrder","times","compareTime","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","find","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","startIndex","endIndex","interpolant","evaluate","resultBuffer","numTimes","valueStart","multiplyQuaternionsFlat","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","settings","DefaultSettings_","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","copySampleValue_","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","getSettings_","ZeroSlopeEnding","WrapAroundEnding","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","LinearInterpolant","offset1","offset0","weight1","weight0","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","factoryMethod","InterpolateDiscrete","InterpolantFactoryMethodDiscrete","InterpolateLinear","InterpolantFactoryMethodLinear","InterpolateSmooth","InterpolantFactoryMethodSmooth","timeOffset","timeScale","startTime","endTime","nKeys","valid","prevTime","currTime","smoothInterpolation","getInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","trackType","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","slerpFlat","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","duration","validate","optimize","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","morphTargetSequence","noLoop","numMorphTargets","objectOrClipArray","clipArray","animationToMorphTargets","pattern","morphTarget","parts","animationMorphTargets","clips","CreateFromMorphTargetSequence","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","getTrackTypeForValueTypeName","typeName","Cache","files","file","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","loader","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","withCredentials","resourcePath","requestHeader","Promise","resolve","reject","load","loading","FileLoader","setTimeout","dataUriRegex","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","atob","response","responseType","charCodeAt","Blob","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","overrideMimeType","setRequestHeader","send","AnimationLoader","setPath","setWithCredentials","CompressedTextureLoader","setResponseType","loaded","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","onImageError","substr","CubeTextureLoader","urls","setCrossOrigin","DataTextureLoader","texData","TextureLoader","isJPEG","search","Curve","arcLengthDivisions","optionalTarget","getUtoTmapping","getPoint","divisions","lengths","getLengths","cacheArcLengths","current","arcLengths","targetArcLength","comparison","lengthBefore","t2","pt1","pt2","getTangent","mat","getTangentAt","MAX_VALUE","tz","makeRotationAxis","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","deltaAngle","twoPi","samePoints","isEllipseCurve","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","pz","CatmullRomCurve3","curveType","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","CurvePath","curves","autoClose","curve","startPoint","endPoint","getLength","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","getPoints","fromJSON","Path","currentPoint","moveTo","lineTo","aCPx","aCPy","aCP1x","aCP1y","aCP2x","aCP2y","npts","absarc","absellipse","firstPoint","lastPoint","Shape","holesPts","getPointsHoles","Light","HemisphereLight","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","isSpotLightShadow","SpotLight","power","_lightPositionWorld","_lookTarget","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","scaleW","scaleH","makeOrthographic","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","AmbientLight","RectAreaLight","SphericalHarmonics3","coeff","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","LoaderUtils","TextDecoder","decode","fromCharCode","escape","lastIndexOf","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","arrayBuffer","typedArray","bufferAttribute","drawcalls","offsets","ObjectLoader","extractUrlBase","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","geometryShapes","bufferGeometryLoader","details","setTextures","deserializeImage","loadImage","currentUrl","deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","bind","setResourcePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","fetchOptions","credentials","headers","then","res","blob","colorSpaceConversion","imageBitmap","catch","isImageBitmapLoader","ShapePath","subPaths","currentPath","quadraticCurveTo","bezierCurveTo","splineThru","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","betterShapeHoles","tmpPoints","tmpHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","toShapes","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","action","ha","familyName","FontLoader","substring","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","now","getElapsedTime","getDelta","newTime","performance","Date","_position$1","_quaternion$1","_scale$1","_orientation$1","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setPosition","setOrientation","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","audioNode","mediaElement","createMediaElementSource","mediaStream","createMediaStreamSource","play","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getOutput","getFilters","setFilters","_position","_quaternion","_scale","_orientation","PositionalAudio","panner","createPanner","panningModel","refDistance","rolloffFactor","distanceModel","maxDistance","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getByteFrequencyData","getFrequencyData","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accuIndex","currentWeight","mix","weightAdditive","originalValueOffset","getValue","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","firstValidIndex","nCachedObjects_","bindings","unbind","rootNode","node","findNode","nodeName","_getValue_unbound","_setValue_unbound","resolvedProperty","propertyIndex","targetObject","dest","targetArray","sourceArray","objectName","_getValue_unavailable","_setValue_unavailable","objectIndex","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","root","isAnimationObjectGroup","matches","results","lastDot","getBoneByName","searchNodeSubtree","subTreeNode","childNode","_getValue_direct","_getValue_array","_getValue_arrayElement","_getValue_toArray","_setValue_direct","_setValue_direct_setNeedsUpdate","_setValue_direct_setMatrixWorldNeedsUpdate","_setValue_array","_setValue_array_setNeedsUpdate","_setValue_array_setMatrixWorldNeedsUpdate","_setValue_arrayElement","_setValue_arrayElement_setNeedsUpdate","_setValue_arrayElement_setMatrixWorldNeedsUpdate","_setValue_fromArray","_setValue_fromArray_setNeedsUpdate","_setValue_fromArray_setMatrixWorldNeedsUpdate","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","lastObject","indicesByPath","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","_isActiveAction","_scheduleFading","fadeOutAction","warp","fadeOut","fadeIn","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","fadeInAction","crossFadeFrom","weightInterpolant","_takeBackControlInterpolant","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","_root","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","AdditiveAnimationBlendMode","accumulateAdditive","accumulate","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","create","clipUuid","actionsForClip","_actionsByClip","_bindAction","knownActions","_addInactiveAction","_lendBinding","saveOriginalState","_lendAction","restoreOriginalState","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","optionalRoot","clipObject","findByName","existingAction","newAction","nActions","_update","timeInSeconds","actionsToRemove","_removeInactiveAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","coords","unproject","intersectObject","ascSort","Spherical","other","setFromCartesianCoords","Cylindrical","_vector$4","Box2","isBox2","_startP","_startEnd","Line3","clampToLine","startEnd2","closestPointToPointParameter","ImmediateRenderObject","_vector$3","SpotLightHelper","cone","coneLength","coneWidth","_vector$2","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","isSkeletonHelper","PointLightHelper","sphereSize","_vector$1","_color1","_color2","HemisphereLightHelper","rotateY","GridHelper","PolarGridHelper","radials","circles","_v1","_v2","_v3","DirectionalLightHelper","lightPlane","targetLine","_vector","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box","_lineGeometry","_coneGeometry","BoxHelper","setFromObject","Box3Helper","PlaneHelper","positions2","_axis","ArrowHelper","headLength","headWidth","setDirection","setLength","AxesHelper","_floatView","_int32View","DataUtils","val","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","PMREMGenerator","_getBlurShader","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_getEncodings","_equirectShader","_cubemapShader","_compileMaterial","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","equirectangular","_fromTexture","_getCubemapShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","convertSRGBToLinear","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","STANDARD_DEVIATIONS","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","coordinates","fill","shaderMaterial","construct","fromPoints","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","setRotationFromQuaternion","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateX","rotateZ","rotateByAxis","makeFrustum","isIntersectionLine","intersectsLine","isIntersectionPlane","getArea","barycoordFromPoint","midpoint","getMidpoint","prototypenormal","getPlane","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","manhattanDistanceTo","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","getObjectByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","TrianglesDrawMode","initBones","setLens","setFocalLength","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","clearGroups","computeOffsets","removeAttribute","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","clearTarget","animate","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","initMaterial","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","setBuffer","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","detach","attach","revision","__THREE__","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloud","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","XHRLoader","ZeroStencilOp"],"mappings":"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,EAufgBo7B,CAAwBxrB,EAAI0R,IAG1CoB,GAGJ8Y,KAAAA,QAAU,WACbhb,EAAc0D,uBAAuB,MACrCtU,EAAG6rB,cAAcna,GACZA,KAAAA,aAAUxmD,GAGZkO,KAAAA,KAAOid,EAAWkyC,WAClB7zC,KAAAA,GAAKivC,KACL2C,KAAAA,SAAWA,EACXwF,KAAAA,UAAY,EACZpa,KAAAA,QAAUA,EACVpY,KAAAA,aAAe6wB,EACf5wB,KAAAA,eAAiB6wB,EACf,KAGA2B,SAAAA,GAAc1vB,EAAUmS,EAAU9U,EAAYuG,EAAc2Q,EAAenX,GAC5E4gB,IAAAA,EAAW,GACXna,EAAWD,EAAaC,SACxByV,EAAyB1V,EAAa0V,uBACtCoB,EAAsB9W,EAAa8W,oBACnCV,EAAoBpW,EAAaoW,kBACjCM,EAAiB1W,EAAa0W,eAChC75B,EAAYmjB,EAAanjB,UACvBkvC,EAAY,CAChBC,kBAAmB,QACnBC,qBAAsB,eACtBC,mBAAoB,SACpBn/B,kBAAmB,QACnBo/B,oBAAqB,UACrBC,kBAAmB,QACnBC,iBAAkB,OAClBC,qBAAsB,WACtBC,qBAAsB,WACtBC,mBAAoB,SACpBC,kBAAmB,QACnBC,mBAAoB,SACpBC,eAAgB,SAChBC,eAAgB,SAChBC,eAAgB,UAEZC,EAAiB,CACrB,YACA,WACA,yBACA,iBACA,aACA,kBACA,MACA,cACA,SACA,iBACA,SACA,aACA,iBACA,eACA,WACA,mBACA,QACA,cACA,sBACA,UACA,YACA,uBACA,wBACA,eACA,wBACA,qBACA,kBACA,cACA,eACA,eACA,cACA,WACA,UACA,eACA,eACA,iBACA,YACA,gBACA,MACA,SACA,UACA,cACA,kBACA,yBACA,WACA,WACA,mBACA,eACA,eACA,qBACA,eACA,iBACA,gBACA,gBACA,oBACA,qBACA,uBACA,sBACA,mBACA,gBACA,cACA,0BACA,YACA,cACA,YACA,oBACA,sBACA,eACA,YACA,QACA,eACA,kBACA,gBAmCOC,SAAAA,EAA0BpuC,GAC7B1lB,IAAAA,EAaGA,OAXH0lB,GAAOA,EAAItjB,UACbpC,EAAW0lB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","file":"src.6a1b5b06.js","sourceRoot":"..\\src","sourcesContent":["/**\r\n * @license\r\n * Copyright 2010-2021 Three.js Authors\r\n * SPDX-License-Identifier: MIT\r\n */\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined'\r\n    ? factory(exports)\r\n    : typeof define === 'function' && define.amd\r\n    ? define(['exports'], factory)\r\n    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),\r\n      factory((global.THREE = {})));\r\n})(this, function (exports) {\r\n  'use strict';\r\n\r\n  const REVISION = '129';\r\n  const MOUSE = {\r\n    LEFT: 0,\r\n    MIDDLE: 1,\r\n    RIGHT: 2,\r\n    ROTATE: 0,\r\n    DOLLY: 1,\r\n    PAN: 2,\r\n  };\r\n  const TOUCH = {\r\n    ROTATE: 0,\r\n    PAN: 1,\r\n    DOLLY_PAN: 2,\r\n    DOLLY_ROTATE: 3,\r\n  };\r\n  const CullFaceNone = 0;\r\n  const CullFaceBack = 1;\r\n  const CullFaceFront = 2;\r\n  const CullFaceFrontBack = 3;\r\n  const BasicShadowMap = 0;\r\n  const PCFShadowMap = 1;\r\n  const PCFSoftShadowMap = 2;\r\n  const VSMShadowMap = 3;\r\n  const FrontSide = 0;\r\n  const BackSide = 1;\r\n  const DoubleSide = 2;\r\n  const FlatShading = 1;\r\n  const SmoothShading = 2;\r\n  const NoBlending = 0;\r\n  const NormalBlending = 1;\r\n  const AdditiveBlending = 2;\r\n  const SubtractiveBlending = 3;\r\n  const MultiplyBlending = 4;\r\n  const CustomBlending = 5;\r\n  const AddEquation = 100;\r\n  const SubtractEquation = 101;\r\n  const ReverseSubtractEquation = 102;\r\n  const MinEquation = 103;\r\n  const MaxEquation = 104;\r\n  const ZeroFactor = 200;\r\n  const OneFactor = 201;\r\n  const SrcColorFactor = 202;\r\n  const OneMinusSrcColorFactor = 203;\r\n  const SrcAlphaFactor = 204;\r\n  const OneMinusSrcAlphaFactor = 205;\r\n  const DstAlphaFactor = 206;\r\n  const OneMinusDstAlphaFactor = 207;\r\n  const DstColorFactor = 208;\r\n  const OneMinusDstColorFactor = 209;\r\n  const SrcAlphaSaturateFactor = 210;\r\n  const NeverDepth = 0;\r\n  const AlwaysDepth = 1;\r\n  const LessDepth = 2;\r\n  const LessEqualDepth = 3;\r\n  const EqualDepth = 4;\r\n  const GreaterEqualDepth = 5;\r\n  const GreaterDepth = 6;\r\n  const NotEqualDepth = 7;\r\n  const MultiplyOperation = 0;\r\n  const MixOperation = 1;\r\n  const AddOperation = 2;\r\n  const NoToneMapping = 0;\r\n  const LinearToneMapping = 1;\r\n  const ReinhardToneMapping = 2;\r\n  const CineonToneMapping = 3;\r\n  const ACESFilmicToneMapping = 4;\r\n  const CustomToneMapping = 5;\r\n  const UVMapping = 300;\r\n  const CubeReflectionMapping = 301;\r\n  const CubeRefractionMapping = 302;\r\n  const EquirectangularReflectionMapping = 303;\r\n  const EquirectangularRefractionMapping = 304;\r\n  const CubeUVReflectionMapping = 306;\r\n  const CubeUVRefractionMapping = 307;\r\n  const RepeatWrapping = 1000;\r\n  const ClampToEdgeWrapping = 1001;\r\n  const MirroredRepeatWrapping = 1002;\r\n  const NearestFilter = 1003;\r\n  const NearestMipmapNearestFilter = 1004;\r\n  const NearestMipMapNearestFilter = 1004;\r\n  const NearestMipmapLinearFilter = 1005;\r\n  const NearestMipMapLinearFilter = 1005;\r\n  const LinearFilter = 1006;\r\n  const LinearMipmapNearestFilter = 1007;\r\n  const LinearMipMapNearestFilter = 1007;\r\n  const LinearMipmapLinearFilter = 1008;\r\n  const LinearMipMapLinearFilter = 1008;\r\n  const UnsignedByteType = 1009;\r\n  const ByteType = 1010;\r\n  const ShortType = 1011;\r\n  const UnsignedShortType = 1012;\r\n  const IntType = 1013;\r\n  const UnsignedIntType = 1014;\r\n  const FloatType = 1015;\r\n  const HalfFloatType = 1016;\r\n  const UnsignedShort4444Type = 1017;\r\n  const UnsignedShort5551Type = 1018;\r\n  const UnsignedShort565Type = 1019;\r\n  const UnsignedInt248Type = 1020;\r\n  const AlphaFormat = 1021;\r\n  const RGBFormat = 1022;\r\n  const RGBAFormat = 1023;\r\n  const LuminanceFormat = 1024;\r\n  const LuminanceAlphaFormat = 1025;\r\n  const RGBEFormat = RGBAFormat;\r\n  const DepthFormat = 1026;\r\n  const DepthStencilFormat = 1027;\r\n  const RedFormat = 1028;\r\n  const RedIntegerFormat = 1029;\r\n  const RGFormat = 1030;\r\n  const RGIntegerFormat = 1031;\r\n  const RGBIntegerFormat = 1032;\r\n  const RGBAIntegerFormat = 1033;\r\n  const RGB_S3TC_DXT1_Format = 33776;\r\n  const RGBA_S3TC_DXT1_Format = 33777;\r\n  const RGBA_S3TC_DXT3_Format = 33778;\r\n  const RGBA_S3TC_DXT5_Format = 33779;\r\n  const RGB_PVRTC_4BPPV1_Format = 35840;\r\n  const RGB_PVRTC_2BPPV1_Format = 35841;\r\n  const RGBA_PVRTC_4BPPV1_Format = 35842;\r\n  const RGBA_PVRTC_2BPPV1_Format = 35843;\r\n  const RGB_ETC1_Format = 36196;\r\n  const RGB_ETC2_Format = 37492;\r\n  const RGBA_ETC2_EAC_Format = 37496;\r\n  const RGBA_ASTC_4x4_Format = 37808;\r\n  const RGBA_ASTC_5x4_Format = 37809;\r\n  const RGBA_ASTC_5x5_Format = 37810;\r\n  const RGBA_ASTC_6x5_Format = 37811;\r\n  const RGBA_ASTC_6x6_Format = 37812;\r\n  const RGBA_ASTC_8x5_Format = 37813;\r\n  const RGBA_ASTC_8x6_Format = 37814;\r\n  const RGBA_ASTC_8x8_Format = 37815;\r\n  const RGBA_ASTC_10x5_Format = 37816;\r\n  const RGBA_ASTC_10x6_Format = 37817;\r\n  const RGBA_ASTC_10x8_Format = 37818;\r\n  const RGBA_ASTC_10x10_Format = 37819;\r\n  const RGBA_ASTC_12x10_Format = 37820;\r\n  const RGBA_ASTC_12x12_Format = 37821;\r\n  const RGBA_BPTC_Format = 36492;\r\n  const SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\r\n  const SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\r\n  const SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\r\n  const SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\r\n  const SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\r\n  const SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\r\n  const SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\r\n  const SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\r\n  const SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\r\n  const SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\r\n  const SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\r\n  const SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\r\n  const SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\r\n  const SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\r\n  const LoopOnce = 2200;\r\n  const LoopRepeat = 2201;\r\n  const LoopPingPong = 2202;\r\n  const InterpolateDiscrete = 2300;\r\n  const InterpolateLinear = 2301;\r\n  const InterpolateSmooth = 2302;\r\n  const ZeroCurvatureEnding = 2400;\r\n  const ZeroSlopeEnding = 2401;\r\n  const WrapAroundEnding = 2402;\r\n  const NormalAnimationBlendMode = 2500;\r\n  const AdditiveAnimationBlendMode = 2501;\r\n  const TrianglesDrawMode = 0;\r\n  const TriangleStripDrawMode = 1;\r\n  const TriangleFanDrawMode = 2;\r\n  const LinearEncoding = 3000;\r\n  const sRGBEncoding = 3001;\r\n  const GammaEncoding = 3007;\r\n  const RGBEEncoding = 3002;\r\n  const LogLuvEncoding = 3003;\r\n  const RGBM7Encoding = 3004;\r\n  const RGBM16Encoding = 3005;\r\n  const RGBDEncoding = 3006;\r\n  const BasicDepthPacking = 3200;\r\n  const RGBADepthPacking = 3201;\r\n  const TangentSpaceNormalMap = 0;\r\n  const ObjectSpaceNormalMap = 1;\r\n  const ZeroStencilOp = 0;\r\n  const KeepStencilOp = 7680;\r\n  const ReplaceStencilOp = 7681;\r\n  const IncrementStencilOp = 7682;\r\n  const DecrementStencilOp = 7683;\r\n  const IncrementWrapStencilOp = 34055;\r\n  const DecrementWrapStencilOp = 34056;\r\n  const InvertStencilOp = 5386;\r\n  const NeverStencilFunc = 512;\r\n  const LessStencilFunc = 513;\r\n  const EqualStencilFunc = 514;\r\n  const LessEqualStencilFunc = 515;\r\n  const GreaterStencilFunc = 516;\r\n  const NotEqualStencilFunc = 517;\r\n  const GreaterEqualStencilFunc = 518;\r\n  const AlwaysStencilFunc = 519;\r\n  const StaticDrawUsage = 35044;\r\n  const DynamicDrawUsage = 35048;\r\n  const StreamDrawUsage = 35040;\r\n  const StaticReadUsage = 35045;\r\n  const DynamicReadUsage = 35049;\r\n  const StreamReadUsage = 35041;\r\n  const StaticCopyUsage = 35046;\r\n  const DynamicCopyUsage = 35050;\r\n  const StreamCopyUsage = 35042;\r\n  const GLSL1 = '100';\r\n  const GLSL3 = '300 es';\r\n\r\n  /**\r\n   * https://github.com/mrdoob/eventdispatcher.js/\r\n   */\r\n  class EventDispatcher {\r\n    addEventListener(type, listener) {\r\n      if (this._listeners === undefined) this._listeners = {};\r\n      const listeners = this._listeners;\r\n\r\n      if (listeners[type] === undefined) {\r\n        listeners[type] = [];\r\n      }\r\n\r\n      if (listeners[type].indexOf(listener) === -1) {\r\n        listeners[type].push(listener);\r\n      }\r\n    }\r\n\r\n    hasEventListener(type, listener) {\r\n      if (this._listeners === undefined) return false;\r\n      const listeners = this._listeners;\r\n      return listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\r\n    }\r\n\r\n    removeEventListener(type, listener) {\r\n      if (this._listeners === undefined) return;\r\n      const listeners = this._listeners;\r\n      const listenerArray = listeners[type];\r\n\r\n      if (listenerArray !== undefined) {\r\n        const index = listenerArray.indexOf(listener);\r\n\r\n        if (index !== -1) {\r\n          listenerArray.splice(index, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    dispatchEvent(event) {\r\n      if (this._listeners === undefined) return;\r\n      const listeners = this._listeners;\r\n      const listenerArray = listeners[event.type];\r\n\r\n      if (listenerArray !== undefined) {\r\n        event.target = this; // Make a copy, in case listeners are removed while iterating.\r\n\r\n        const array = listenerArray.slice(0);\r\n\r\n        for (let i = 0, l = array.length; i < l; i++) {\r\n          array[i].call(this, event);\r\n        }\r\n\r\n        event.target = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  const _lut = [];\r\n\r\n  for (let i = 0; i < 256; i++) {\r\n    _lut[i] = (i < 16 ? '0' : '') + i.toString(16);\r\n  }\r\n\r\n  let _seed = 1234567;\r\n  const DEG2RAD = Math.PI / 180;\r\n  const RAD2DEG = 180 / Math.PI; // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n  function generateUUID() {\r\n    const d0 = (Math.random() * 0xffffffff) | 0;\r\n    const d1 = (Math.random() * 0xffffffff) | 0;\r\n    const d2 = (Math.random() * 0xffffffff) | 0;\r\n    const d3 = (Math.random() * 0xffffffff) | 0;\r\n    const uuid =\r\n      _lut[d0 & 0xff] +\r\n      _lut[(d0 >> 8) & 0xff] +\r\n      _lut[(d0 >> 16) & 0xff] +\r\n      _lut[(d0 >> 24) & 0xff] +\r\n      '-' +\r\n      _lut[d1 & 0xff] +\r\n      _lut[(d1 >> 8) & 0xff] +\r\n      '-' +\r\n      _lut[((d1 >> 16) & 0x0f) | 0x40] +\r\n      _lut[(d1 >> 24) & 0xff] +\r\n      '-' +\r\n      _lut[(d2 & 0x3f) | 0x80] +\r\n      _lut[(d2 >> 8) & 0xff] +\r\n      '-' +\r\n      _lut[(d2 >> 16) & 0xff] +\r\n      _lut[(d2 >> 24) & 0xff] +\r\n      _lut[d3 & 0xff] +\r\n      _lut[(d3 >> 8) & 0xff] +\r\n      _lut[(d3 >> 16) & 0xff] +\r\n      _lut[(d3 >> 24) & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\r\n    return uuid.toUpperCase();\r\n  }\r\n\r\n  function clamp(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n  } // compute euclidian modulo of m % n\r\n  // https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n  function euclideanModulo(n, m) {\r\n    return ((n % m) + m) % m;\r\n  } // Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n  function mapLinear(x, a1, a2, b1, b2) {\r\n    return b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\r\n  } // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\r\n\r\n  function inverseLerp(x, y, value) {\r\n    if (x !== y) {\r\n      return (value - x) / (y - x);\r\n    } else {\r\n      return 0;\r\n    }\r\n  } // https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n  function lerp(x, y, t) {\r\n    return (1 - t) * x + t * y;\r\n  } // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\n\r\n  function damp(x, y, lambda, dt) {\r\n    return lerp(x, y, 1 - Math.exp(-lambda * dt));\r\n  } // https://www.desmos.com/calculator/vcsjnyz7x4\r\n\r\n  function pingpong(x, length = 1) {\r\n    return length - Math.abs(euclideanModulo(x, length * 2) - length);\r\n  } // http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n  function smoothstep(x, min, max) {\r\n    if (x <= min) return 0;\r\n    if (x >= max) return 1;\r\n    x = (x - min) / (max - min);\r\n    return x * x * (3 - 2 * x);\r\n  }\r\n\r\n  function smootherstep(x, min, max) {\r\n    if (x <= min) return 0;\r\n    if (x >= max) return 1;\r\n    x = (x - min) / (max - min);\r\n    return x * x * x * (x * (x * 6 - 15) + 10);\r\n  } // Random integer from <low, high> interval\r\n\r\n  function randInt(low, high) {\r\n    return low + Math.floor(Math.random() * (high - low + 1));\r\n  } // Random float from <low, high> interval\r\n\r\n  function randFloat(low, high) {\r\n    return low + Math.random() * (high - low);\r\n  } // Random float from <-range/2, range/2> interval\r\n\r\n  function randFloatSpread(range) {\r\n    return range * (0.5 - Math.random());\r\n  } // Deterministic pseudo-random float in the interval [ 0, 1 ]\r\n\r\n  function seededRandom(s) {\r\n    if (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\r\n\r\n    _seed = (_seed * 16807) % 2147483647;\r\n    return (_seed - 1) / 2147483646;\r\n  }\r\n\r\n  function degToRad(degrees) {\r\n    return degrees * DEG2RAD;\r\n  }\r\n\r\n  function radToDeg(radians) {\r\n    return radians * RAD2DEG;\r\n  }\r\n\r\n  function isPowerOfTwo(value) {\r\n    return (value & (value - 1)) === 0 && value !== 0;\r\n  }\r\n\r\n  function ceilPowerOfTwo(value) {\r\n    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\r\n  }\r\n\r\n  function floorPowerOfTwo(value) {\r\n    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\r\n  }\r\n\r\n  function setQuaternionFromProperEuler(q, a, b, c, order) {\r\n    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\r\n    // rotations are applied to the axes in the order specified by 'order'\r\n    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\r\n    // angles are in radians\r\n    const cos = Math.cos;\r\n    const sin = Math.sin;\r\n    const c2 = cos(b / 2);\r\n    const s2 = sin(b / 2);\r\n    const c13 = cos((a + c) / 2);\r\n    const s13 = sin((a + c) / 2);\r\n    const c1_3 = cos((a - c) / 2);\r\n    const s1_3 = sin((a - c) / 2);\r\n    const c3_1 = cos((c - a) / 2);\r\n    const s3_1 = sin((c - a) / 2);\r\n\r\n    switch (order) {\r\n      case 'XYX':\r\n        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\r\n        break;\r\n\r\n      case 'YZY':\r\n        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\r\n        break;\r\n\r\n      case 'ZXZ':\r\n        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\r\n        break;\r\n\r\n      case 'XZX':\r\n        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\r\n        break;\r\n\r\n      case 'YXY':\r\n        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\r\n        break;\r\n\r\n      case 'ZYZ':\r\n        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\r\n        break;\r\n\r\n      default:\r\n        console.warn(\r\n          'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order,\r\n        );\r\n    }\r\n  }\r\n\r\n  var MathUtils = /*#__PURE__*/ Object.freeze({\r\n    __proto__: null,\r\n    DEG2RAD: DEG2RAD,\r\n    RAD2DEG: RAD2DEG,\r\n    generateUUID: generateUUID,\r\n    clamp: clamp,\r\n    euclideanModulo: euclideanModulo,\r\n    mapLinear: mapLinear,\r\n    inverseLerp: inverseLerp,\r\n    lerp: lerp,\r\n    damp: damp,\r\n    pingpong: pingpong,\r\n    smoothstep: smoothstep,\r\n    smootherstep: smootherstep,\r\n    randInt: randInt,\r\n    randFloat: randFloat,\r\n    randFloatSpread: randFloatSpread,\r\n    seededRandom: seededRandom,\r\n    degToRad: degToRad,\r\n    radToDeg: radToDeg,\r\n    isPowerOfTwo: isPowerOfTwo,\r\n    ceilPowerOfTwo: ceilPowerOfTwo,\r\n    floorPowerOfTwo: floorPowerOfTwo,\r\n    setQuaternionFromProperEuler: setQuaternionFromProperEuler,\r\n  });\r\n\r\n  class Vector2 {\r\n    constructor(x = 0, y = 0) {\r\n      this.x = x;\r\n      this.y = y;\r\n    }\r\n\r\n    get width() {\r\n      return this.x;\r\n    }\r\n\r\n    set width(value) {\r\n      this.x = value;\r\n    }\r\n\r\n    get height() {\r\n      return this.y;\r\n    }\r\n\r\n    set height(value) {\r\n      this.y = value;\r\n    }\r\n\r\n    set(x, y) {\r\n      this.x = x;\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    setScalar(scalar) {\r\n      this.x = scalar;\r\n      this.y = scalar;\r\n      return this;\r\n    }\r\n\r\n    setX(x) {\r\n      this.x = x;\r\n      return this;\r\n    }\r\n\r\n    setY(y) {\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    setComponent(index, value) {\r\n      switch (index) {\r\n        case 0:\r\n          this.x = value;\r\n          break;\r\n\r\n        case 1:\r\n          this.y = value;\r\n          break;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getComponent(index) {\r\n      switch (index) {\r\n        case 0:\r\n          return this.x;\r\n\r\n        case 1:\r\n          return this.y;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.x, this.y);\r\n    }\r\n\r\n    copy(v) {\r\n      this.x = v.x;\r\n      this.y = v.y;\r\n      return this;\r\n    }\r\n\r\n    add(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.',\r\n        );\r\n        return this.addVectors(v, w);\r\n      }\r\n\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n      return this;\r\n    }\r\n\r\n    addScalar(s) {\r\n      this.x += s;\r\n      this.y += s;\r\n      return this;\r\n    }\r\n\r\n    addVectors(a, b) {\r\n      this.x = a.x + b.x;\r\n      this.y = a.y + b.y;\r\n      return this;\r\n    }\r\n\r\n    addScaledVector(v, s) {\r\n      this.x += v.x * s;\r\n      this.y += v.y * s;\r\n      return this;\r\n    }\r\n\r\n    sub(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.',\r\n        );\r\n        return this.subVectors(v, w);\r\n      }\r\n\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n      return this;\r\n    }\r\n\r\n    subScalar(s) {\r\n      this.x -= s;\r\n      this.y -= s;\r\n      return this;\r\n    }\r\n\r\n    subVectors(a, b) {\r\n      this.x = a.x - b.x;\r\n      this.y = a.y - b.y;\r\n      return this;\r\n    }\r\n\r\n    multiply(v) {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(scalar) {\r\n      this.x *= scalar;\r\n      this.y *= scalar;\r\n      return this;\r\n    }\r\n\r\n    divide(v) {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n      return this;\r\n    }\r\n\r\n    divideScalar(scalar) {\r\n      return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    applyMatrix3(m) {\r\n      const x = this.x,\r\n        y = this.y;\r\n      const e = m.elements;\r\n      this.x = e[0] * x + e[3] * y + e[6];\r\n      this.y = e[1] * x + e[4] * y + e[7];\r\n      return this;\r\n    }\r\n\r\n    min(v) {\r\n      this.x = Math.min(this.x, v.x);\r\n      this.y = Math.min(this.y, v.y);\r\n      return this;\r\n    }\r\n\r\n    max(v) {\r\n      this.x = Math.max(this.x, v.x);\r\n      this.y = Math.max(this.y, v.y);\r\n      return this;\r\n    }\r\n\r\n    clamp(min, max) {\r\n      // assumes min < max, componentwise\r\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n      return this;\r\n    }\r\n\r\n    clampScalar(minVal, maxVal) {\r\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n      return this;\r\n    }\r\n\r\n    clampLength(min, max) {\r\n      const length = this.length();\r\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\r\n    }\r\n\r\n    floor() {\r\n      this.x = Math.floor(this.x);\r\n      this.y = Math.floor(this.y);\r\n      return this;\r\n    }\r\n\r\n    ceil() {\r\n      this.x = Math.ceil(this.x);\r\n      this.y = Math.ceil(this.y);\r\n      return this;\r\n    }\r\n\r\n    round() {\r\n      this.x = Math.round(this.x);\r\n      this.y = Math.round(this.y);\r\n      return this;\r\n    }\r\n\r\n    roundToZero() {\r\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\r\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\r\n      return this;\r\n    }\r\n\r\n    negate() {\r\n      this.x = -this.x;\r\n      this.y = -this.y;\r\n      return this;\r\n    }\r\n\r\n    dot(v) {\r\n      return this.x * v.x + this.y * v.y;\r\n    }\r\n\r\n    cross(v) {\r\n      return this.x * v.y - this.y * v.x;\r\n    }\r\n\r\n    lengthSq() {\r\n      return this.x * this.x + this.y * this.y;\r\n    }\r\n\r\n    length() {\r\n      return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    manhattanLength() {\r\n      return Math.abs(this.x) + Math.abs(this.y);\r\n    }\r\n\r\n    normalize() {\r\n      return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    angle() {\r\n      // computes the angle in radians with respect to the positive x-axis\r\n      const angle = Math.atan2(-this.y, -this.x) + Math.PI;\r\n      return angle;\r\n    }\r\n\r\n    distanceTo(v) {\r\n      return Math.sqrt(this.distanceToSquared(v));\r\n    }\r\n\r\n    distanceToSquared(v) {\r\n      const dx = this.x - v.x,\r\n        dy = this.y - v.y;\r\n      return dx * dx + dy * dy;\r\n    }\r\n\r\n    manhattanDistanceTo(v) {\r\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\r\n    }\r\n\r\n    setLength(length) {\r\n      return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    lerp(v, alpha) {\r\n      this.x += (v.x - this.x) * alpha;\r\n      this.y += (v.y - this.y) * alpha;\r\n      return this;\r\n    }\r\n\r\n    lerpVectors(v1, v2, alpha) {\r\n      this.x = v1.x + (v2.x - v1.x) * alpha;\r\n      this.y = v1.y + (v2.y - v1.y) * alpha;\r\n      return this;\r\n    }\r\n\r\n    equals(v) {\r\n      return v.x === this.x && v.y === this.y;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      this.x = array[offset];\r\n      this.y = array[offset + 1];\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this.x;\r\n      array[offset + 1] = this.y;\r\n      return array;\r\n    }\r\n\r\n    fromBufferAttribute(attribute, index, offset) {\r\n      if (offset !== undefined) {\r\n        console.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\r\n      }\r\n\r\n      this.x = attribute.getX(index);\r\n      this.y = attribute.getY(index);\r\n      return this;\r\n    }\r\n\r\n    rotateAround(center, angle) {\r\n      const c = Math.cos(angle),\r\n        s = Math.sin(angle);\r\n      const x = this.x - center.x;\r\n      const y = this.y - center.y;\r\n      this.x = x * c - y * s + center.x;\r\n      this.y = x * s + y * c + center.y;\r\n      return this;\r\n    }\r\n\r\n    random() {\r\n      this.x = Math.random();\r\n      this.y = Math.random();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  Vector2.prototype.isVector2 = true;\r\n\r\n  class Matrix3 {\r\n    constructor() {\r\n      this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n\r\n      if (arguments.length > 0) {\r\n        console.error(\r\n          'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.',\r\n        );\r\n      }\r\n    }\r\n\r\n    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\r\n      const te = this.elements;\r\n      te[0] = n11;\r\n      te[1] = n21;\r\n      te[2] = n31;\r\n      te[3] = n12;\r\n      te[4] = n22;\r\n      te[5] = n32;\r\n      te[6] = n13;\r\n      te[7] = n23;\r\n      te[8] = n33;\r\n      return this;\r\n    }\r\n\r\n    identity() {\r\n      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    copy(m) {\r\n      const te = this.elements;\r\n      const me = m.elements;\r\n      te[0] = me[0];\r\n      te[1] = me[1];\r\n      te[2] = me[2];\r\n      te[3] = me[3];\r\n      te[4] = me[4];\r\n      te[5] = me[5];\r\n      te[6] = me[6];\r\n      te[7] = me[7];\r\n      te[8] = me[8];\r\n      return this;\r\n    }\r\n\r\n    extractBasis(xAxis, yAxis, zAxis) {\r\n      xAxis.setFromMatrix3Column(this, 0);\r\n      yAxis.setFromMatrix3Column(this, 1);\r\n      zAxis.setFromMatrix3Column(this, 2);\r\n      return this;\r\n    }\r\n\r\n    setFromMatrix4(m) {\r\n      const me = m.elements;\r\n      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\r\n      return this;\r\n    }\r\n\r\n    multiply(m) {\r\n      return this.multiplyMatrices(this, m);\r\n    }\r\n\r\n    premultiply(m) {\r\n      return this.multiplyMatrices(m, this);\r\n    }\r\n\r\n    multiplyMatrices(a, b) {\r\n      const ae = a.elements;\r\n      const be = b.elements;\r\n      const te = this.elements;\r\n      const a11 = ae[0],\r\n        a12 = ae[3],\r\n        a13 = ae[6];\r\n      const a21 = ae[1],\r\n        a22 = ae[4],\r\n        a23 = ae[7];\r\n      const a31 = ae[2],\r\n        a32 = ae[5],\r\n        a33 = ae[8];\r\n      const b11 = be[0],\r\n        b12 = be[3],\r\n        b13 = be[6];\r\n      const b21 = be[1],\r\n        b22 = be[4],\r\n        b23 = be[7];\r\n      const b31 = be[2],\r\n        b32 = be[5],\r\n        b33 = be[8];\r\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31;\r\n      te[3] = a11 * b12 + a12 * b22 + a13 * b32;\r\n      te[6] = a11 * b13 + a12 * b23 + a13 * b33;\r\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31;\r\n      te[4] = a21 * b12 + a22 * b22 + a23 * b32;\r\n      te[7] = a21 * b13 + a22 * b23 + a23 * b33;\r\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31;\r\n      te[5] = a31 * b12 + a32 * b22 + a33 * b32;\r\n      te[8] = a31 * b13 + a32 * b23 + a33 * b33;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(s) {\r\n      const te = this.elements;\r\n      te[0] *= s;\r\n      te[3] *= s;\r\n      te[6] *= s;\r\n      te[1] *= s;\r\n      te[4] *= s;\r\n      te[7] *= s;\r\n      te[2] *= s;\r\n      te[5] *= s;\r\n      te[8] *= s;\r\n      return this;\r\n    }\r\n\r\n    determinant() {\r\n      const te = this.elements;\r\n      const a = te[0],\r\n        b = te[1],\r\n        c = te[2],\r\n        d = te[3],\r\n        e = te[4],\r\n        f = te[5],\r\n        g = te[6],\r\n        h = te[7],\r\n        i = te[8];\r\n      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n    }\r\n\r\n    invert() {\r\n      const te = this.elements,\r\n        n11 = te[0],\r\n        n21 = te[1],\r\n        n31 = te[2],\r\n        n12 = te[3],\r\n        n22 = te[4],\r\n        n32 = te[5],\r\n        n13 = te[6],\r\n        n23 = te[7],\r\n        n33 = te[8],\r\n        t11 = n33 * n22 - n32 * n23,\r\n        t12 = n32 * n13 - n33 * n12,\r\n        t13 = n23 * n12 - n22 * n13,\r\n        det = n11 * t11 + n21 * t12 + n31 * t13;\r\n      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n      const detInv = 1 / det;\r\n      te[0] = t11 * detInv;\r\n      te[1] = (n31 * n23 - n33 * n21) * detInv;\r\n      te[2] = (n32 * n21 - n31 * n22) * detInv;\r\n      te[3] = t12 * detInv;\r\n      te[4] = (n33 * n11 - n31 * n13) * detInv;\r\n      te[5] = (n31 * n12 - n32 * n11) * detInv;\r\n      te[6] = t13 * detInv;\r\n      te[7] = (n21 * n13 - n23 * n11) * detInv;\r\n      te[8] = (n22 * n11 - n21 * n12) * detInv;\r\n      return this;\r\n    }\r\n\r\n    transpose() {\r\n      let tmp;\r\n      const m = this.elements;\r\n      tmp = m[1];\r\n      m[1] = m[3];\r\n      m[3] = tmp;\r\n      tmp = m[2];\r\n      m[2] = m[6];\r\n      m[6] = tmp;\r\n      tmp = m[5];\r\n      m[5] = m[7];\r\n      m[7] = tmp;\r\n      return this;\r\n    }\r\n\r\n    getNormalMatrix(matrix4) {\r\n      return this.setFromMatrix4(matrix4).invert().transpose();\r\n    }\r\n\r\n    transposeIntoArray(r) {\r\n      const m = this.elements;\r\n      r[0] = m[0];\r\n      r[1] = m[3];\r\n      r[2] = m[6];\r\n      r[3] = m[1];\r\n      r[4] = m[4];\r\n      r[5] = m[7];\r\n      r[6] = m[2];\r\n      r[7] = m[5];\r\n      r[8] = m[8];\r\n      return this;\r\n    }\r\n\r\n    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\r\n      const c = Math.cos(rotation);\r\n      const s = Math.sin(rotation);\r\n      this.set(\r\n        sx * c,\r\n        sx * s,\r\n        -sx * (c * cx + s * cy) + cx + tx,\r\n        -sy * s,\r\n        sy * c,\r\n        -sy * (-s * cx + c * cy) + cy + ty,\r\n        0,\r\n        0,\r\n        1,\r\n      );\r\n      return this;\r\n    }\r\n\r\n    scale(sx, sy) {\r\n      const te = this.elements;\r\n      te[0] *= sx;\r\n      te[3] *= sx;\r\n      te[6] *= sx;\r\n      te[1] *= sy;\r\n      te[4] *= sy;\r\n      te[7] *= sy;\r\n      return this;\r\n    }\r\n\r\n    rotate(theta) {\r\n      const c = Math.cos(theta);\r\n      const s = Math.sin(theta);\r\n      const te = this.elements;\r\n      const a11 = te[0],\r\n        a12 = te[3],\r\n        a13 = te[6];\r\n      const a21 = te[1],\r\n        a22 = te[4],\r\n        a23 = te[7];\r\n      te[0] = c * a11 + s * a21;\r\n      te[3] = c * a12 + s * a22;\r\n      te[6] = c * a13 + s * a23;\r\n      te[1] = -s * a11 + c * a21;\r\n      te[4] = -s * a12 + c * a22;\r\n      te[7] = -s * a13 + c * a23;\r\n      return this;\r\n    }\r\n\r\n    translate(tx, ty) {\r\n      const te = this.elements;\r\n      te[0] += tx * te[2];\r\n      te[3] += tx * te[5];\r\n      te[6] += tx * te[8];\r\n      te[1] += ty * te[2];\r\n      te[4] += ty * te[5];\r\n      te[7] += ty * te[8];\r\n      return this;\r\n    }\r\n\r\n    equals(matrix) {\r\n      const te = this.elements;\r\n      const me = matrix.elements;\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        if (te[i] !== me[i]) return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.elements[i] = array[i + offset];\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      const te = this.elements;\r\n      array[offset] = te[0];\r\n      array[offset + 1] = te[1];\r\n      array[offset + 2] = te[2];\r\n      array[offset + 3] = te[3];\r\n      array[offset + 4] = te[4];\r\n      array[offset + 5] = te[5];\r\n      array[offset + 6] = te[6];\r\n      array[offset + 7] = te[7];\r\n      array[offset + 8] = te[8];\r\n      return array;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().fromArray(this.elements);\r\n    }\r\n  }\r\n\r\n  Matrix3.prototype.isMatrix3 = true;\r\n\r\n  let _canvas;\r\n\r\n  class ImageUtils {\r\n    static getDataURL(image) {\r\n      if (/^data:/i.test(image.src)) {\r\n        return image.src;\r\n      }\r\n\r\n      if (typeof HTMLCanvasElement == 'undefined') {\r\n        return image.src;\r\n      }\r\n\r\n      let canvas;\r\n\r\n      if (image instanceof HTMLCanvasElement) {\r\n        canvas = image;\r\n      } else {\r\n        if (_canvas === undefined)\r\n          _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\r\n        _canvas.width = image.width;\r\n        _canvas.height = image.height;\r\n\r\n        const context = _canvas.getContext('2d');\r\n\r\n        if (image instanceof ImageData) {\r\n          context.putImageData(image, 0, 0);\r\n        } else {\r\n          context.drawImage(image, 0, 0, image.width, image.height);\r\n        }\r\n\r\n        canvas = _canvas;\r\n      }\r\n\r\n      if (canvas.width > 2048 || canvas.height > 2048) {\r\n        console.warn(\r\n          'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons',\r\n          image,\r\n        );\r\n        return canvas.toDataURL('image/jpeg', 0.6);\r\n      } else {\r\n        return canvas.toDataURL('image/png');\r\n      }\r\n    }\r\n  }\r\n\r\n  let textureId = 0;\r\n\r\n  class Texture extends EventDispatcher {\r\n    constructor(\r\n      image = Texture.DEFAULT_IMAGE,\r\n      mapping = Texture.DEFAULT_MAPPING,\r\n      wrapS = ClampToEdgeWrapping,\r\n      wrapT = ClampToEdgeWrapping,\r\n      magFilter = LinearFilter,\r\n      minFilter = LinearMipmapLinearFilter,\r\n      format = RGBAFormat,\r\n      type = UnsignedByteType,\r\n      anisotropy = 1,\r\n      encoding = LinearEncoding,\r\n    ) {\r\n      super();\r\n      Object.defineProperty(this, 'id', {\r\n        value: textureId++,\r\n      });\r\n      this.uuid = generateUUID();\r\n      this.name = '';\r\n      this.image = image;\r\n      this.mipmaps = [];\r\n      this.mapping = mapping;\r\n      this.wrapS = wrapS;\r\n      this.wrapT = wrapT;\r\n      this.magFilter = magFilter;\r\n      this.minFilter = minFilter;\r\n      this.anisotropy = anisotropy;\r\n      this.format = format;\r\n      this.internalFormat = null;\r\n      this.type = type;\r\n      this.offset = new Vector2(0, 0);\r\n      this.repeat = new Vector2(1, 1);\r\n      this.center = new Vector2(0, 0);\r\n      this.rotation = 0;\r\n      this.matrixAutoUpdate = true;\r\n      this.matrix = new Matrix3();\r\n      this.generateMipmaps = true;\r\n      this.premultiplyAlpha = false;\r\n      this.flipY = true;\r\n      this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n      // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n      //\r\n      // Also changing the encoding after already used by a Material will not automatically make the Material\r\n      // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\r\n      this.encoding = encoding;\r\n      this.version = 0;\r\n      this.onUpdate = null;\r\n    }\r\n\r\n    updateMatrix() {\r\n      this.matrix.setUvTransform(\r\n        this.offset.x,\r\n        this.offset.y,\r\n        this.repeat.x,\r\n        this.repeat.y,\r\n        this.rotation,\r\n        this.center.x,\r\n        this.center.y,\r\n      );\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(source) {\r\n      this.name = source.name;\r\n      this.image = source.image;\r\n      this.mipmaps = source.mipmaps.slice(0);\r\n      this.mapping = source.mapping;\r\n      this.wrapS = source.wrapS;\r\n      this.wrapT = source.wrapT;\r\n      this.magFilter = source.magFilter;\r\n      this.minFilter = source.minFilter;\r\n      this.anisotropy = source.anisotropy;\r\n      this.format = source.format;\r\n      this.internalFormat = source.internalFormat;\r\n      this.type = source.type;\r\n      this.offset.copy(source.offset);\r\n      this.repeat.copy(source.repeat);\r\n      this.center.copy(source.center);\r\n      this.rotation = source.rotation;\r\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\r\n      this.matrix.copy(source.matrix);\r\n      this.generateMipmaps = source.generateMipmaps;\r\n      this.premultiplyAlpha = source.premultiplyAlpha;\r\n      this.flipY = source.flipY;\r\n      this.unpackAlignment = source.unpackAlignment;\r\n      this.encoding = source.encoding;\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const isRootObject = meta === undefined || typeof meta === 'string';\r\n\r\n      if (!isRootObject && meta.textures[this.uuid] !== undefined) {\r\n        return meta.textures[this.uuid];\r\n      }\r\n\r\n      const output = {\r\n        metadata: {\r\n          version: 4.5,\r\n          type: 'Texture',\r\n          generator: 'Texture.toJSON',\r\n        },\r\n        uuid: this.uuid,\r\n        name: this.name,\r\n        mapping: this.mapping,\r\n        repeat: [this.repeat.x, this.repeat.y],\r\n        offset: [this.offset.x, this.offset.y],\r\n        center: [this.center.x, this.center.y],\r\n        rotation: this.rotation,\r\n        wrap: [this.wrapS, this.wrapT],\r\n        format: this.format,\r\n        type: this.type,\r\n        encoding: this.encoding,\r\n        minFilter: this.minFilter,\r\n        magFilter: this.magFilter,\r\n        anisotropy: this.anisotropy,\r\n        flipY: this.flipY,\r\n        premultiplyAlpha: this.premultiplyAlpha,\r\n        unpackAlignment: this.unpackAlignment,\r\n      };\r\n\r\n      if (this.image !== undefined) {\r\n        // TODO: Move to THREE.Image\r\n        const image = this.image;\r\n\r\n        if (image.uuid === undefined) {\r\n          image.uuid = generateUUID(); // UGH\r\n        }\r\n\r\n        if (!isRootObject && meta.images[image.uuid] === undefined) {\r\n          let url;\r\n\r\n          if (Array.isArray(image)) {\r\n            // process array of images e.g. CubeTexture\r\n            url = [];\r\n\r\n            for (let i = 0, l = image.length; i < l; i++) {\r\n              // check cube texture with data textures\r\n              if (image[i].isDataTexture) {\r\n                url.push(serializeImage(image[i].image));\r\n              } else {\r\n                url.push(serializeImage(image[i]));\r\n              }\r\n            }\r\n          } else {\r\n            // process single image\r\n            url = serializeImage(image);\r\n          }\r\n\r\n          meta.images[image.uuid] = {\r\n            uuid: image.uuid,\r\n            url: url,\r\n          };\r\n        }\r\n\r\n        output.image = image.uuid;\r\n      }\r\n\r\n      if (!isRootObject) {\r\n        meta.textures[this.uuid] = output;\r\n      }\r\n\r\n      return output;\r\n    }\r\n\r\n    dispose() {\r\n      this.dispatchEvent({\r\n        type: 'dispose',\r\n      });\r\n    }\r\n\r\n    transformUv(uv) {\r\n      if (this.mapping !== UVMapping) return uv;\r\n      uv.applyMatrix3(this.matrix);\r\n\r\n      if (uv.x < 0 || uv.x > 1) {\r\n        switch (this.wrapS) {\r\n          case RepeatWrapping:\r\n            uv.x = uv.x - Math.floor(uv.x);\r\n            break;\r\n\r\n          case ClampToEdgeWrapping:\r\n            uv.x = uv.x < 0 ? 0 : 1;\r\n            break;\r\n\r\n          case MirroredRepeatWrapping:\r\n            if (Math.abs(Math.floor(uv.x) % 2) === 1) {\r\n              uv.x = Math.ceil(uv.x) - uv.x;\r\n            } else {\r\n              uv.x = uv.x - Math.floor(uv.x);\r\n            }\r\n\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (uv.y < 0 || uv.y > 1) {\r\n        switch (this.wrapT) {\r\n          case RepeatWrapping:\r\n            uv.y = uv.y - Math.floor(uv.y);\r\n            break;\r\n\r\n          case ClampToEdgeWrapping:\r\n            uv.y = uv.y < 0 ? 0 : 1;\r\n            break;\r\n\r\n          case MirroredRepeatWrapping:\r\n            if (Math.abs(Math.floor(uv.y) % 2) === 1) {\r\n              uv.y = Math.ceil(uv.y) - uv.y;\r\n            } else {\r\n              uv.y = uv.y - Math.floor(uv.y);\r\n            }\r\n\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (this.flipY) {\r\n        uv.y = 1 - uv.y;\r\n      }\r\n\r\n      return uv;\r\n    }\r\n\r\n    set needsUpdate(value) {\r\n      if (value === true) this.version++;\r\n    }\r\n  }\r\n\r\n  Texture.DEFAULT_IMAGE = undefined;\r\n  Texture.DEFAULT_MAPPING = UVMapping;\r\n  Texture.prototype.isTexture = true;\r\n\r\n  function serializeImage(image) {\r\n    if (\r\n      (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||\r\n      (typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||\r\n      (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)\r\n    ) {\r\n      // default images\r\n      return ImageUtils.getDataURL(image);\r\n    } else {\r\n      if (image.data) {\r\n        // images of DataTexture\r\n        return {\r\n          data: Array.prototype.slice.call(image.data),\r\n          width: image.width,\r\n          height: image.height,\r\n          type: image.data.constructor.name,\r\n        };\r\n      } else {\r\n        console.warn('THREE.Texture: Unable to serialize Texture.');\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  class Vector4 {\r\n    constructor(x = 0, y = 0, z = 0, w = 1) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n      this.w = w;\r\n    }\r\n\r\n    get width() {\r\n      return this.z;\r\n    }\r\n\r\n    set width(value) {\r\n      this.z = value;\r\n    }\r\n\r\n    get height() {\r\n      return this.w;\r\n    }\r\n\r\n    set height(value) {\r\n      this.w = value;\r\n    }\r\n\r\n    set(x, y, z, w) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n      this.w = w;\r\n      return this;\r\n    }\r\n\r\n    setScalar(scalar) {\r\n      this.x = scalar;\r\n      this.y = scalar;\r\n      this.z = scalar;\r\n      this.w = scalar;\r\n      return this;\r\n    }\r\n\r\n    setX(x) {\r\n      this.x = x;\r\n      return this;\r\n    }\r\n\r\n    setY(y) {\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    setZ(z) {\r\n      this.z = z;\r\n      return this;\r\n    }\r\n\r\n    setW(w) {\r\n      this.w = w;\r\n      return this;\r\n    }\r\n\r\n    setComponent(index, value) {\r\n      switch (index) {\r\n        case 0:\r\n          this.x = value;\r\n          break;\r\n\r\n        case 1:\r\n          this.y = value;\r\n          break;\r\n\r\n        case 2:\r\n          this.z = value;\r\n          break;\r\n\r\n        case 3:\r\n          this.w = value;\r\n          break;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getComponent(index) {\r\n      switch (index) {\r\n        case 0:\r\n          return this.x;\r\n\r\n        case 1:\r\n          return this.y;\r\n\r\n        case 2:\r\n          return this.z;\r\n\r\n        case 3:\r\n          return this.w;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.x, this.y, this.z, this.w);\r\n    }\r\n\r\n    copy(v) {\r\n      this.x = v.x;\r\n      this.y = v.y;\r\n      this.z = v.z;\r\n      this.w = v.w !== undefined ? v.w : 1;\r\n      return this;\r\n    }\r\n\r\n    add(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.',\r\n        );\r\n        return this.addVectors(v, w);\r\n      }\r\n\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n      this.z += v.z;\r\n      this.w += v.w;\r\n      return this;\r\n    }\r\n\r\n    addScalar(s) {\r\n      this.x += s;\r\n      this.y += s;\r\n      this.z += s;\r\n      this.w += s;\r\n      return this;\r\n    }\r\n\r\n    addVectors(a, b) {\r\n      this.x = a.x + b.x;\r\n      this.y = a.y + b.y;\r\n      this.z = a.z + b.z;\r\n      this.w = a.w + b.w;\r\n      return this;\r\n    }\r\n\r\n    addScaledVector(v, s) {\r\n      this.x += v.x * s;\r\n      this.y += v.y * s;\r\n      this.z += v.z * s;\r\n      this.w += v.w * s;\r\n      return this;\r\n    }\r\n\r\n    sub(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.',\r\n        );\r\n        return this.subVectors(v, w);\r\n      }\r\n\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n      this.z -= v.z;\r\n      this.w -= v.w;\r\n      return this;\r\n    }\r\n\r\n    subScalar(s) {\r\n      this.x -= s;\r\n      this.y -= s;\r\n      this.z -= s;\r\n      this.w -= s;\r\n      return this;\r\n    }\r\n\r\n    subVectors(a, b) {\r\n      this.x = a.x - b.x;\r\n      this.y = a.y - b.y;\r\n      this.z = a.z - b.z;\r\n      this.w = a.w - b.w;\r\n      return this;\r\n    }\r\n\r\n    multiply(v) {\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n      this.z *= v.z;\r\n      this.w *= v.w;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(scalar) {\r\n      this.x *= scalar;\r\n      this.y *= scalar;\r\n      this.z *= scalar;\r\n      this.w *= scalar;\r\n      return this;\r\n    }\r\n\r\n    applyMatrix4(m) {\r\n      const x = this.x,\r\n        y = this.y,\r\n        z = this.z,\r\n        w = this.w;\r\n      const e = m.elements;\r\n      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\r\n      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\r\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\r\n      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\r\n      return this;\r\n    }\r\n\r\n    divideScalar(scalar) {\r\n      return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    setAxisAngleFromQuaternion(q) {\r\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n      // q is assumed to be normalized\r\n      this.w = 2 * Math.acos(q.w);\r\n      const s = Math.sqrt(1 - q.w * q.w);\r\n\r\n      if (s < 0.0001) {\r\n        this.x = 1;\r\n        this.y = 0;\r\n        this.z = 0;\r\n      } else {\r\n        this.x = q.x / s;\r\n        this.y = q.y / s;\r\n        this.z = q.z / s;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setAxisAngleFromRotationMatrix(m) {\r\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n      let angle, x, y, z; // variables for result\r\n\r\n      const epsilon = 0.01,\r\n        // margin to allow for rounding errors\r\n        epsilon2 = 0.1,\r\n        // margin to distinguish between 0 and 180 degrees\r\n        te = m.elements,\r\n        m11 = te[0],\r\n        m12 = te[4],\r\n        m13 = te[8],\r\n        m21 = te[1],\r\n        m22 = te[5],\r\n        m23 = te[9],\r\n        m31 = te[2],\r\n        m32 = te[6],\r\n        m33 = te[10];\r\n\r\n      if (\r\n        Math.abs(m12 - m21) < epsilon &&\r\n        Math.abs(m13 - m31) < epsilon &&\r\n        Math.abs(m23 - m32) < epsilon\r\n      ) {\r\n        // singularity found\r\n        // first check for identity matrix which must have +1 for all terms\r\n        // in leading diagonal and zero in other terms\r\n        if (\r\n          Math.abs(m12 + m21) < epsilon2 &&\r\n          Math.abs(m13 + m31) < epsilon2 &&\r\n          Math.abs(m23 + m32) < epsilon2 &&\r\n          Math.abs(m11 + m22 + m33 - 3) < epsilon2\r\n        ) {\r\n          // this singularity is identity matrix so angle = 0\r\n          this.set(1, 0, 0, 0);\r\n          return this; // zero angle, arbitrary axis\r\n        } // otherwise this singularity is angle = 180\r\n\r\n        angle = Math.PI;\r\n        const xx = (m11 + 1) / 2;\r\n        const yy = (m22 + 1) / 2;\r\n        const zz = (m33 + 1) / 2;\r\n        const xy = (m12 + m21) / 4;\r\n        const xz = (m13 + m31) / 4;\r\n        const yz = (m23 + m32) / 4;\r\n\r\n        if (xx > yy && xx > zz) {\r\n          // m11 is the largest diagonal term\r\n          if (xx < epsilon) {\r\n            x = 0;\r\n            y = 0.707106781;\r\n            z = 0.707106781;\r\n          } else {\r\n            x = Math.sqrt(xx);\r\n            y = xy / x;\r\n            z = xz / x;\r\n          }\r\n        } else if (yy > zz) {\r\n          // m22 is the largest diagonal term\r\n          if (yy < epsilon) {\r\n            x = 0.707106781;\r\n            y = 0;\r\n            z = 0.707106781;\r\n          } else {\r\n            y = Math.sqrt(yy);\r\n            x = xy / y;\r\n            z = yz / y;\r\n          }\r\n        } else {\r\n          // m33 is the largest diagonal term so base result on this\r\n          if (zz < epsilon) {\r\n            x = 0.707106781;\r\n            y = 0.707106781;\r\n            z = 0;\r\n          } else {\r\n            z = Math.sqrt(zz);\r\n            x = xz / z;\r\n            y = yz / z;\r\n          }\r\n        }\r\n\r\n        this.set(x, y, z, angle);\r\n        return this; // return 180 deg rotation\r\n      } // as we have reached here there are no singularities so we can handle normally\r\n\r\n      let s = Math.sqrt(\r\n        (m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12),\r\n      ); // used to normalize\r\n\r\n      if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n      // caught by singularity test above, but I've left it in just in case\r\n\r\n      this.x = (m32 - m23) / s;\r\n      this.y = (m13 - m31) / s;\r\n      this.z = (m21 - m12) / s;\r\n      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\r\n      return this;\r\n    }\r\n\r\n    min(v) {\r\n      this.x = Math.min(this.x, v.x);\r\n      this.y = Math.min(this.y, v.y);\r\n      this.z = Math.min(this.z, v.z);\r\n      this.w = Math.min(this.w, v.w);\r\n      return this;\r\n    }\r\n\r\n    max(v) {\r\n      this.x = Math.max(this.x, v.x);\r\n      this.y = Math.max(this.y, v.y);\r\n      this.z = Math.max(this.z, v.z);\r\n      this.w = Math.max(this.w, v.w);\r\n      return this;\r\n    }\r\n\r\n    clamp(min, max) {\r\n      // assumes min < max, componentwise\r\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\r\n      this.w = Math.max(min.w, Math.min(max.w, this.w));\r\n      return this;\r\n    }\r\n\r\n    clampScalar(minVal, maxVal) {\r\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n      this.z = Math.max(minVal, Math.min(maxVal, this.z));\r\n      this.w = Math.max(minVal, Math.min(maxVal, this.w));\r\n      return this;\r\n    }\r\n\r\n    clampLength(min, max) {\r\n      const length = this.length();\r\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\r\n    }\r\n\r\n    floor() {\r\n      this.x = Math.floor(this.x);\r\n      this.y = Math.floor(this.y);\r\n      this.z = Math.floor(this.z);\r\n      this.w = Math.floor(this.w);\r\n      return this;\r\n    }\r\n\r\n    ceil() {\r\n      this.x = Math.ceil(this.x);\r\n      this.y = Math.ceil(this.y);\r\n      this.z = Math.ceil(this.z);\r\n      this.w = Math.ceil(this.w);\r\n      return this;\r\n    }\r\n\r\n    round() {\r\n      this.x = Math.round(this.x);\r\n      this.y = Math.round(this.y);\r\n      this.z = Math.round(this.z);\r\n      this.w = Math.round(this.w);\r\n      return this;\r\n    }\r\n\r\n    roundToZero() {\r\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\r\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\r\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\r\n      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\r\n      return this;\r\n    }\r\n\r\n    negate() {\r\n      this.x = -this.x;\r\n      this.y = -this.y;\r\n      this.z = -this.z;\r\n      this.w = -this.w;\r\n      return this;\r\n    }\r\n\r\n    dot(v) {\r\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    }\r\n\r\n    lengthSq() {\r\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n    }\r\n\r\n    length() {\r\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n    }\r\n\r\n    manhattanLength() {\r\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\r\n    }\r\n\r\n    normalize() {\r\n      return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    setLength(length) {\r\n      return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    lerp(v, alpha) {\r\n      this.x += (v.x - this.x) * alpha;\r\n      this.y += (v.y - this.y) * alpha;\r\n      this.z += (v.z - this.z) * alpha;\r\n      this.w += (v.w - this.w) * alpha;\r\n      return this;\r\n    }\r\n\r\n    lerpVectors(v1, v2, alpha) {\r\n      this.x = v1.x + (v2.x - v1.x) * alpha;\r\n      this.y = v1.y + (v2.y - v1.y) * alpha;\r\n      this.z = v1.z + (v2.z - v1.z) * alpha;\r\n      this.w = v1.w + (v2.w - v1.w) * alpha;\r\n      return this;\r\n    }\r\n\r\n    equals(v) {\r\n      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      this.x = array[offset];\r\n      this.y = array[offset + 1];\r\n      this.z = array[offset + 2];\r\n      this.w = array[offset + 3];\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this.x;\r\n      array[offset + 1] = this.y;\r\n      array[offset + 2] = this.z;\r\n      array[offset + 3] = this.w;\r\n      return array;\r\n    }\r\n\r\n    fromBufferAttribute(attribute, index, offset) {\r\n      if (offset !== undefined) {\r\n        console.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\r\n      }\r\n\r\n      this.x = attribute.getX(index);\r\n      this.y = attribute.getY(index);\r\n      this.z = attribute.getZ(index);\r\n      this.w = attribute.getW(index);\r\n      return this;\r\n    }\r\n\r\n    random() {\r\n      this.x = Math.random();\r\n      this.y = Math.random();\r\n      this.z = Math.random();\r\n      this.w = Math.random();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  Vector4.prototype.isVector4 = true;\r\n\r\n  /*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\r\n  class WebGLRenderTarget extends EventDispatcher {\r\n    constructor(width, height, options) {\r\n      super();\r\n      this.width = width;\r\n      this.height = height;\r\n      this.depth = 1;\r\n      this.scissor = new Vector4(0, 0, width, height);\r\n      this.scissorTest = false;\r\n      this.viewport = new Vector4(0, 0, width, height);\r\n      options = options || {};\r\n      this.texture = new Texture(\r\n        undefined,\r\n        options.mapping,\r\n        options.wrapS,\r\n        options.wrapT,\r\n        options.magFilter,\r\n        options.minFilter,\r\n        options.format,\r\n        options.type,\r\n        options.anisotropy,\r\n        options.encoding,\r\n      );\r\n      this.texture.image = {};\r\n      this.texture.image.width = width;\r\n      this.texture.image.height = height;\r\n      this.texture.image.depth = 1;\r\n      this.texture.generateMipmaps =\r\n        options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n      this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n      this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n      this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\r\n      this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\r\n    }\r\n\r\n    setTexture(texture) {\r\n      texture.image = {\r\n        width: this.width,\r\n        height: this.height,\r\n        depth: this.depth,\r\n      };\r\n      this.texture = texture;\r\n    }\r\n\r\n    setSize(width, height, depth = 1) {\r\n      if (this.width !== width || this.height !== height || this.depth !== depth) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n        this.texture.image.width = width;\r\n        this.texture.image.height = height;\r\n        this.texture.image.depth = depth;\r\n        this.dispose();\r\n      }\r\n\r\n      this.viewport.set(0, 0, width, height);\r\n      this.scissor.set(0, 0, width, height);\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(source) {\r\n      this.width = source.width;\r\n      this.height = source.height;\r\n      this.depth = source.depth;\r\n      this.viewport.copy(source.viewport);\r\n      this.texture = source.texture.clone();\r\n      this.texture.image = { ...this.texture.image }; // See #20328.\r\n\r\n      this.depthBuffer = source.depthBuffer;\r\n      this.stencilBuffer = source.stencilBuffer;\r\n      this.depthTexture = source.depthTexture;\r\n      return this;\r\n    }\r\n\r\n    dispose() {\r\n      this.dispatchEvent({\r\n        type: 'dispose',\r\n      });\r\n    }\r\n  }\r\n\r\n  WebGLRenderTarget.prototype.isWebGLRenderTarget = true;\r\n\r\n  class WebGLMultipleRenderTargets extends WebGLRenderTarget {\r\n    constructor(width, height, count) {\r\n      super(width, height);\r\n      const texture = this.texture;\r\n      this.texture = [];\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        this.texture[i] = texture.clone();\r\n      }\r\n    }\r\n\r\n    setSize(width, height, depth = 1) {\r\n      if (this.width !== width || this.height !== height || this.depth !== depth) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.depth = depth;\r\n\r\n        for (let i = 0, il = this.texture.length; i < il; i++) {\r\n          this.texture[i].image.width = width;\r\n          this.texture[i].image.height = height;\r\n          this.texture[i].image.depth = depth;\r\n        }\r\n\r\n        this.dispose();\r\n      }\r\n\r\n      this.viewport.set(0, 0, width, height);\r\n      this.scissor.set(0, 0, width, height);\r\n      return this;\r\n    }\r\n\r\n    copy(source) {\r\n      this.dispose();\r\n      this.width = source.width;\r\n      this.height = source.height;\r\n      this.depth = source.depth;\r\n      this.viewport.set(0, 0, this.width, this.height);\r\n      this.scissor.set(0, 0, this.width, this.height);\r\n      this.depthBuffer = source.depthBuffer;\r\n      this.stencilBuffer = source.stencilBuffer;\r\n      this.depthTexture = source.depthTexture;\r\n      this.texture.length = 0;\r\n\r\n      for (let i = 0, il = source.texture.length; i < il; i++) {\r\n        this.texture[i] = source.texture[i].clone();\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\r\n\r\n  class WebGLMultisampleRenderTarget extends WebGLRenderTarget {\r\n    constructor(width, height, options) {\r\n      super(width, height, options);\r\n      this.samples = 4;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy.call(this, source);\r\n      this.samples = source.samples;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  WebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\r\n\r\n  class Quaternion {\r\n    constructor(x = 0, y = 0, z = 0, w = 1) {\r\n      this._x = x;\r\n      this._y = y;\r\n      this._z = z;\r\n      this._w = w;\r\n    }\r\n\r\n    static slerp(qa, qb, qm, t) {\r\n      console.warn(\r\n        'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.',\r\n      );\r\n      return qm.slerpQuaternions(qa, qb, t);\r\n    }\r\n\r\n    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\r\n      // fuzz-free, array-based Quaternion SLERP operation\r\n      let x0 = src0[srcOffset0 + 0],\r\n        y0 = src0[srcOffset0 + 1],\r\n        z0 = src0[srcOffset0 + 2],\r\n        w0 = src0[srcOffset0 + 3];\r\n      const x1 = src1[srcOffset1 + 0],\r\n        y1 = src1[srcOffset1 + 1],\r\n        z1 = src1[srcOffset1 + 2],\r\n        w1 = src1[srcOffset1 + 3];\r\n\r\n      if (t === 0) {\r\n        dst[dstOffset + 0] = x0;\r\n        dst[dstOffset + 1] = y0;\r\n        dst[dstOffset + 2] = z0;\r\n        dst[dstOffset + 3] = w0;\r\n        return;\r\n      }\r\n\r\n      if (t === 1) {\r\n        dst[dstOffset + 0] = x1;\r\n        dst[dstOffset + 1] = y1;\r\n        dst[dstOffset + 2] = z1;\r\n        dst[dstOffset + 3] = w1;\r\n        return;\r\n      }\r\n\r\n      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\r\n        let s = 1 - t;\r\n        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n          dir = cos >= 0 ? 1 : -1,\r\n          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\r\n\r\n        if (sqrSin > Number.EPSILON) {\r\n          const sin = Math.sqrt(sqrSin),\r\n            len = Math.atan2(sin, cos * dir);\r\n          s = Math.sin(s * len) / sin;\r\n          t = Math.sin(t * len) / sin;\r\n        }\r\n\r\n        const tDir = t * dir;\r\n        x0 = x0 * s + x1 * tDir;\r\n        y0 = y0 * s + y1 * tDir;\r\n        z0 = z0 * s + z1 * tDir;\r\n        w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\r\n\r\n        if (s === 1 - t) {\r\n          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\r\n          x0 *= f;\r\n          y0 *= f;\r\n          z0 *= f;\r\n          w0 *= f;\r\n        }\r\n      }\r\n\r\n      dst[dstOffset] = x0;\r\n      dst[dstOffset + 1] = y0;\r\n      dst[dstOffset + 2] = z0;\r\n      dst[dstOffset + 3] = w0;\r\n    }\r\n\r\n    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\r\n      const x0 = src0[srcOffset0];\r\n      const y0 = src0[srcOffset0 + 1];\r\n      const z0 = src0[srcOffset0 + 2];\r\n      const w0 = src0[srcOffset0 + 3];\r\n      const x1 = src1[srcOffset1];\r\n      const y1 = src1[srcOffset1 + 1];\r\n      const z1 = src1[srcOffset1 + 2];\r\n      const w1 = src1[srcOffset1 + 3];\r\n      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n      return dst;\r\n    }\r\n\r\n    get x() {\r\n      return this._x;\r\n    }\r\n\r\n    set x(value) {\r\n      this._x = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get y() {\r\n      return this._y;\r\n    }\r\n\r\n    set y(value) {\r\n      this._y = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get z() {\r\n      return this._z;\r\n    }\r\n\r\n    set z(value) {\r\n      this._z = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get w() {\r\n      return this._w;\r\n    }\r\n\r\n    set w(value) {\r\n      this._w = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    set(x, y, z, w) {\r\n      this._x = x;\r\n      this._y = y;\r\n      this._z = z;\r\n      this._w = w;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this._x, this._y, this._z, this._w);\r\n    }\r\n\r\n    copy(quaternion) {\r\n      this._x = quaternion.x;\r\n      this._y = quaternion.y;\r\n      this._z = quaternion.z;\r\n      this._w = quaternion.w;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromEuler(euler, update) {\r\n      if (!(euler && euler.isEuler)) {\r\n        throw new Error(\r\n          'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.',\r\n        );\r\n      }\r\n\r\n      const x = euler._x,\r\n        y = euler._y,\r\n        z = euler._z,\r\n        order = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\r\n      // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n      //\tcontent/SpinCalc.m\r\n\r\n      const cos = Math.cos;\r\n      const sin = Math.sin;\r\n      const c1 = cos(x / 2);\r\n      const c2 = cos(y / 2);\r\n      const c3 = cos(z / 2);\r\n      const s1 = sin(x / 2);\r\n      const s2 = sin(y / 2);\r\n      const s3 = sin(z / 2);\r\n\r\n      switch (order) {\r\n        case 'XYZ':\r\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n          break;\r\n\r\n        case 'YXZ':\r\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n          break;\r\n\r\n        case 'ZXY':\r\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n          break;\r\n\r\n        case 'ZYX':\r\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n          break;\r\n\r\n        case 'YZX':\r\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n          break;\r\n\r\n        case 'XZY':\r\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n          this._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n          break;\r\n\r\n        default:\r\n          console.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\r\n      }\r\n\r\n      if (update !== false) this._onChangeCallback();\r\n      return this;\r\n    }\r\n\r\n    setFromAxisAngle(axis, angle) {\r\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n      // assumes axis is normalized\r\n      const halfAngle = angle / 2,\r\n        s = Math.sin(halfAngle);\r\n      this._x = axis.x * s;\r\n      this._y = axis.y * s;\r\n      this._z = axis.z * s;\r\n      this._w = Math.cos(halfAngle);\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromRotationMatrix(m) {\r\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n      const te = m.elements,\r\n        m11 = te[0],\r\n        m12 = te[4],\r\n        m13 = te[8],\r\n        m21 = te[1],\r\n        m22 = te[5],\r\n        m23 = te[9],\r\n        m31 = te[2],\r\n        m32 = te[6],\r\n        m33 = te[10],\r\n        trace = m11 + m22 + m33;\r\n\r\n      if (trace > 0) {\r\n        const s = 0.5 / Math.sqrt(trace + 1.0);\r\n        this._w = 0.25 / s;\r\n        this._x = (m32 - m23) * s;\r\n        this._y = (m13 - m31) * s;\r\n        this._z = (m21 - m12) * s;\r\n      } else if (m11 > m22 && m11 > m33) {\r\n        const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n        this._w = (m32 - m23) / s;\r\n        this._x = 0.25 * s;\r\n        this._y = (m12 + m21) / s;\r\n        this._z = (m13 + m31) / s;\r\n      } else if (m22 > m33) {\r\n        const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n        this._w = (m13 - m31) / s;\r\n        this._x = (m12 + m21) / s;\r\n        this._y = 0.25 * s;\r\n        this._z = (m23 + m32) / s;\r\n      } else {\r\n        const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n        this._w = (m21 - m12) / s;\r\n        this._x = (m13 + m31) / s;\r\n        this._y = (m23 + m32) / s;\r\n        this._z = 0.25 * s;\r\n      }\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromUnitVectors(vFrom, vTo) {\r\n      // assumes direction vectors vFrom and vTo are normalized\r\n      let r = vFrom.dot(vTo) + 1;\r\n\r\n      if (r < Number.EPSILON) {\r\n        // vFrom and vTo point in opposite directions\r\n        r = 0;\r\n\r\n        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\r\n          this._x = -vFrom.y;\r\n          this._y = vFrom.x;\r\n          this._z = 0;\r\n          this._w = r;\r\n        } else {\r\n          this._x = 0;\r\n          this._y = -vFrom.z;\r\n          this._z = vFrom.y;\r\n          this._w = r;\r\n        }\r\n      } else {\r\n        // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n        this._w = r;\r\n      }\r\n\r\n      return this.normalize();\r\n    }\r\n\r\n    angleTo(q) {\r\n      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\r\n    }\r\n\r\n    rotateTowards(q, step) {\r\n      const angle = this.angleTo(q);\r\n      if (angle === 0) return this;\r\n      const t = Math.min(1, step / angle);\r\n      this.slerp(q, t);\r\n      return this;\r\n    }\r\n\r\n    identity() {\r\n      return this.set(0, 0, 0, 1);\r\n    }\r\n\r\n    invert() {\r\n      // quaternion is assumed to have unit length\r\n      return this.conjugate();\r\n    }\r\n\r\n    conjugate() {\r\n      this._x *= -1;\r\n      this._y *= -1;\r\n      this._z *= -1;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    dot(v) {\r\n      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n    }\r\n\r\n    lengthSq() {\r\n      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n    }\r\n\r\n    length() {\r\n      return Math.sqrt(\r\n        this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w,\r\n      );\r\n    }\r\n\r\n    normalize() {\r\n      let l = this.length();\r\n\r\n      if (l === 0) {\r\n        this._x = 0;\r\n        this._y = 0;\r\n        this._z = 0;\r\n        this._w = 1;\r\n      } else {\r\n        l = 1 / l;\r\n        this._x = this._x * l;\r\n        this._y = this._y * l;\r\n        this._z = this._z * l;\r\n        this._w = this._w * l;\r\n      }\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    multiply(q, p) {\r\n      if (p !== undefined) {\r\n        console.warn(\r\n          'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.',\r\n        );\r\n        return this.multiplyQuaternions(q, p);\r\n      }\r\n\r\n      return this.multiplyQuaternions(this, q);\r\n    }\r\n\r\n    premultiply(q) {\r\n      return this.multiplyQuaternions(q, this);\r\n    }\r\n\r\n    multiplyQuaternions(a, b) {\r\n      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n      const qax = a._x,\r\n        qay = a._y,\r\n        qaz = a._z,\r\n        qaw = a._w;\r\n      const qbx = b._x,\r\n        qby = b._y,\r\n        qbz = b._z,\r\n        qbw = b._w;\r\n      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    slerp(qb, t) {\r\n      if (t === 0) return this;\r\n      if (t === 1) return this.copy(qb);\r\n      const x = this._x,\r\n        y = this._y,\r\n        z = this._z,\r\n        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n      if (cosHalfTheta < 0) {\r\n        this._w = -qb._w;\r\n        this._x = -qb._x;\r\n        this._y = -qb._y;\r\n        this._z = -qb._z;\r\n        cosHalfTheta = -cosHalfTheta;\r\n      } else {\r\n        this.copy(qb);\r\n      }\r\n\r\n      if (cosHalfTheta >= 1.0) {\r\n        this._w = w;\r\n        this._x = x;\r\n        this._y = y;\r\n        this._z = z;\r\n        return this;\r\n      }\r\n\r\n      const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n      if (sqrSinHalfTheta <= Number.EPSILON) {\r\n        const s = 1 - t;\r\n        this._w = s * w + t * this._w;\r\n        this._x = s * x + t * this._x;\r\n        this._y = s * y + t * this._y;\r\n        this._z = s * z + t * this._z;\r\n        this.normalize();\r\n\r\n        this._onChangeCallback();\r\n\r\n        return this;\r\n      }\r\n\r\n      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\r\n      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\r\n      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\r\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\r\n      this._w = w * ratioA + this._w * ratioB;\r\n      this._x = x * ratioA + this._x * ratioB;\r\n      this._y = y * ratioA + this._y * ratioB;\r\n      this._z = z * ratioA + this._z * ratioB;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    slerpQuaternions(qa, qb, t) {\r\n      this.copy(qa).slerp(qb, t);\r\n    }\r\n\r\n    equals(quaternion) {\r\n      return (\r\n        quaternion._x === this._x &&\r\n        quaternion._y === this._y &&\r\n        quaternion._z === this._z &&\r\n        quaternion._w === this._w\r\n      );\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      this._x = array[offset];\r\n      this._y = array[offset + 1];\r\n      this._z = array[offset + 2];\r\n      this._w = array[offset + 3];\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this._x;\r\n      array[offset + 1] = this._y;\r\n      array[offset + 2] = this._z;\r\n      array[offset + 3] = this._w;\r\n      return array;\r\n    }\r\n\r\n    fromBufferAttribute(attribute, index) {\r\n      this._x = attribute.getX(index);\r\n      this._y = attribute.getY(index);\r\n      this._z = attribute.getZ(index);\r\n      this._w = attribute.getW(index);\r\n      return this;\r\n    }\r\n\r\n    _onChange(callback) {\r\n      this._onChangeCallback = callback;\r\n      return this;\r\n    }\r\n\r\n    _onChangeCallback() {}\r\n  }\r\n\r\n  Quaternion.prototype.isQuaternion = true;\r\n\r\n  class Vector3 {\r\n    constructor(x = 0, y = 0, z = 0) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n    }\r\n\r\n    set(x, y, z) {\r\n      if (z === undefined) z = this.z; // sprite.scale.set(x,y)\r\n\r\n      this.x = x;\r\n      this.y = y;\r\n      this.z = z;\r\n      return this;\r\n    }\r\n\r\n    setScalar(scalar) {\r\n      this.x = scalar;\r\n      this.y = scalar;\r\n      this.z = scalar;\r\n      return this;\r\n    }\r\n\r\n    setX(x) {\r\n      this.x = x;\r\n      return this;\r\n    }\r\n\r\n    setY(y) {\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    setZ(z) {\r\n      this.z = z;\r\n      return this;\r\n    }\r\n\r\n    setComponent(index, value) {\r\n      switch (index) {\r\n        case 0:\r\n          this.x = value;\r\n          break;\r\n\r\n        case 1:\r\n          this.y = value;\r\n          break;\r\n\r\n        case 2:\r\n          this.z = value;\r\n          break;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getComponent(index) {\r\n      switch (index) {\r\n        case 0:\r\n          return this.x;\r\n\r\n        case 1:\r\n          return this.y;\r\n\r\n        case 2:\r\n          return this.z;\r\n\r\n        default:\r\n          throw new Error('index is out of range: ' + index);\r\n      }\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.x, this.y, this.z);\r\n    }\r\n\r\n    copy(v) {\r\n      this.x = v.x;\r\n      this.y = v.y;\r\n      this.z = v.z;\r\n      return this;\r\n    }\r\n\r\n    add(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.',\r\n        );\r\n        return this.addVectors(v, w);\r\n      }\r\n\r\n      this.x += v.x;\r\n      this.y += v.y;\r\n      this.z += v.z;\r\n      return this;\r\n    }\r\n\r\n    addScalar(s) {\r\n      this.x += s;\r\n      this.y += s;\r\n      this.z += s;\r\n      return this;\r\n    }\r\n\r\n    addVectors(a, b) {\r\n      this.x = a.x + b.x;\r\n      this.y = a.y + b.y;\r\n      this.z = a.z + b.z;\r\n      return this;\r\n    }\r\n\r\n    addScaledVector(v, s) {\r\n      this.x += v.x * s;\r\n      this.y += v.y * s;\r\n      this.z += v.z * s;\r\n      return this;\r\n    }\r\n\r\n    sub(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.',\r\n        );\r\n        return this.subVectors(v, w);\r\n      }\r\n\r\n      this.x -= v.x;\r\n      this.y -= v.y;\r\n      this.z -= v.z;\r\n      return this;\r\n    }\r\n\r\n    subScalar(s) {\r\n      this.x -= s;\r\n      this.y -= s;\r\n      this.z -= s;\r\n      return this;\r\n    }\r\n\r\n    subVectors(a, b) {\r\n      this.x = a.x - b.x;\r\n      this.y = a.y - b.y;\r\n      this.z = a.z - b.z;\r\n      return this;\r\n    }\r\n\r\n    multiply(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.',\r\n        );\r\n        return this.multiplyVectors(v, w);\r\n      }\r\n\r\n      this.x *= v.x;\r\n      this.y *= v.y;\r\n      this.z *= v.z;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(scalar) {\r\n      this.x *= scalar;\r\n      this.y *= scalar;\r\n      this.z *= scalar;\r\n      return this;\r\n    }\r\n\r\n    multiplyVectors(a, b) {\r\n      this.x = a.x * b.x;\r\n      this.y = a.y * b.y;\r\n      this.z = a.z * b.z;\r\n      return this;\r\n    }\r\n\r\n    applyEuler(euler) {\r\n      if (!(euler && euler.isEuler)) {\r\n        console.error(\r\n          'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.',\r\n        );\r\n      }\r\n\r\n      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));\r\n    }\r\n\r\n    applyAxisAngle(axis, angle) {\r\n      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\r\n    }\r\n\r\n    applyMatrix3(m) {\r\n      const x = this.x,\r\n        y = this.y,\r\n        z = this.z;\r\n      const e = m.elements;\r\n      this.x = e[0] * x + e[3] * y + e[6] * z;\r\n      this.y = e[1] * x + e[4] * y + e[7] * z;\r\n      this.z = e[2] * x + e[5] * y + e[8] * z;\r\n      return this;\r\n    }\r\n\r\n    applyNormalMatrix(m) {\r\n      return this.applyMatrix3(m).normalize();\r\n    }\r\n\r\n    applyMatrix4(m) {\r\n      const x = this.x,\r\n        y = this.y,\r\n        z = this.z;\r\n      const e = m.elements;\r\n      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\r\n      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\r\n      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\r\n      return this;\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n      const x = this.x,\r\n        y = this.y,\r\n        z = this.z;\r\n      const qx = q.x,\r\n        qy = q.y,\r\n        qz = q.z,\r\n        qw = q.w; // calculate quat * vector\r\n\r\n      const ix = qw * x + qy * z - qz * y;\r\n      const iy = qw * y + qz * x - qx * z;\r\n      const iz = qw * z + qx * y - qy * x;\r\n      const iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\r\n\r\n      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n      return this;\r\n    }\r\n\r\n    project(camera) {\r\n      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\r\n    }\r\n\r\n    unproject(camera) {\r\n      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\r\n    }\r\n\r\n    transformDirection(m) {\r\n      // input: THREE.Matrix4 affine matrix\r\n      // vector interpreted as a direction\r\n      const x = this.x,\r\n        y = this.y,\r\n        z = this.z;\r\n      const e = m.elements;\r\n      this.x = e[0] * x + e[4] * y + e[8] * z;\r\n      this.y = e[1] * x + e[5] * y + e[9] * z;\r\n      this.z = e[2] * x + e[6] * y + e[10] * z;\r\n      return this.normalize();\r\n    }\r\n\r\n    divide(v) {\r\n      this.x /= v.x;\r\n      this.y /= v.y;\r\n      this.z /= v.z;\r\n      return this;\r\n    }\r\n\r\n    divideScalar(scalar) {\r\n      return this.multiplyScalar(1 / scalar);\r\n    }\r\n\r\n    min(v) {\r\n      this.x = Math.min(this.x, v.x);\r\n      this.y = Math.min(this.y, v.y);\r\n      this.z = Math.min(this.z, v.z);\r\n      return this;\r\n    }\r\n\r\n    max(v) {\r\n      this.x = Math.max(this.x, v.x);\r\n      this.y = Math.max(this.y, v.y);\r\n      this.z = Math.max(this.z, v.z);\r\n      return this;\r\n    }\r\n\r\n    clamp(min, max) {\r\n      // assumes min < max, componentwise\r\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\r\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\r\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\r\n      return this;\r\n    }\r\n\r\n    clampScalar(minVal, maxVal) {\r\n      this.x = Math.max(minVal, Math.min(maxVal, this.x));\r\n      this.y = Math.max(minVal, Math.min(maxVal, this.y));\r\n      this.z = Math.max(minVal, Math.min(maxVal, this.z));\r\n      return this;\r\n    }\r\n\r\n    clampLength(min, max) {\r\n      const length = this.length();\r\n      return this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\r\n    }\r\n\r\n    floor() {\r\n      this.x = Math.floor(this.x);\r\n      this.y = Math.floor(this.y);\r\n      this.z = Math.floor(this.z);\r\n      return this;\r\n    }\r\n\r\n    ceil() {\r\n      this.x = Math.ceil(this.x);\r\n      this.y = Math.ceil(this.y);\r\n      this.z = Math.ceil(this.z);\r\n      return this;\r\n    }\r\n\r\n    round() {\r\n      this.x = Math.round(this.x);\r\n      this.y = Math.round(this.y);\r\n      this.z = Math.round(this.z);\r\n      return this;\r\n    }\r\n\r\n    roundToZero() {\r\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\r\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\r\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\r\n      return this;\r\n    }\r\n\r\n    negate() {\r\n      this.x = -this.x;\r\n      this.y = -this.y;\r\n      this.z = -this.z;\r\n      return this;\r\n    }\r\n\r\n    dot(v) {\r\n      return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    } // TODO lengthSquared?\r\n\r\n    lengthSq() {\r\n      return this.x * this.x + this.y * this.y + this.z * this.z;\r\n    }\r\n\r\n    length() {\r\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n    }\r\n\r\n    manhattanLength() {\r\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n\r\n    normalize() {\r\n      return this.divideScalar(this.length() || 1);\r\n    }\r\n\r\n    setLength(length) {\r\n      return this.normalize().multiplyScalar(length);\r\n    }\r\n\r\n    lerp(v, alpha) {\r\n      this.x += (v.x - this.x) * alpha;\r\n      this.y += (v.y - this.y) * alpha;\r\n      this.z += (v.z - this.z) * alpha;\r\n      return this;\r\n    }\r\n\r\n    lerpVectors(v1, v2, alpha) {\r\n      this.x = v1.x + (v2.x - v1.x) * alpha;\r\n      this.y = v1.y + (v2.y - v1.y) * alpha;\r\n      this.z = v1.z + (v2.z - v1.z) * alpha;\r\n      return this;\r\n    }\r\n\r\n    cross(v, w) {\r\n      if (w !== undefined) {\r\n        console.warn(\r\n          'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.',\r\n        );\r\n        return this.crossVectors(v, w);\r\n      }\r\n\r\n      return this.crossVectors(this, v);\r\n    }\r\n\r\n    crossVectors(a, b) {\r\n      const ax = a.x,\r\n        ay = a.y,\r\n        az = a.z;\r\n      const bx = b.x,\r\n        by = b.y,\r\n        bz = b.z;\r\n      this.x = ay * bz - az * by;\r\n      this.y = az * bx - ax * bz;\r\n      this.z = ax * by - ay * bx;\r\n      return this;\r\n    }\r\n\r\n    projectOnVector(v) {\r\n      const denominator = v.lengthSq();\r\n      if (denominator === 0) return this.set(0, 0, 0);\r\n      const scalar = v.dot(this) / denominator;\r\n      return this.copy(v).multiplyScalar(scalar);\r\n    }\r\n\r\n    projectOnPlane(planeNormal) {\r\n      _vector$c.copy(this).projectOnVector(planeNormal);\r\n\r\n      return this.sub(_vector$c);\r\n    }\r\n\r\n    reflect(normal) {\r\n      // reflect incident vector off plane orthogonal to normal\r\n      // normal is assumed to have unit length\r\n      return this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\r\n    }\r\n\r\n    angleTo(v) {\r\n      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\r\n      if (denominator === 0) return Math.PI / 2;\r\n      const theta = this.dot(v) / denominator; // clamp, to handle numerical problems\r\n\r\n      return Math.acos(clamp(theta, -1, 1));\r\n    }\r\n\r\n    distanceTo(v) {\r\n      return Math.sqrt(this.distanceToSquared(v));\r\n    }\r\n\r\n    distanceToSquared(v) {\r\n      const dx = this.x - v.x,\r\n        dy = this.y - v.y,\r\n        dz = this.z - v.z;\r\n      return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    manhattanDistanceTo(v) {\r\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\r\n    }\r\n\r\n    setFromSpherical(s) {\r\n      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);\r\n    }\r\n\r\n    setFromSphericalCoords(radius, phi, theta) {\r\n      const sinPhiRadius = Math.sin(phi) * radius;\r\n      this.x = sinPhiRadius * Math.sin(theta);\r\n      this.y = Math.cos(phi) * radius;\r\n      this.z = sinPhiRadius * Math.cos(theta);\r\n      return this;\r\n    }\r\n\r\n    setFromCylindrical(c) {\r\n      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);\r\n    }\r\n\r\n    setFromCylindricalCoords(radius, theta, y) {\r\n      this.x = radius * Math.sin(theta);\r\n      this.y = y;\r\n      this.z = radius * Math.cos(theta);\r\n      return this;\r\n    }\r\n\r\n    setFromMatrixPosition(m) {\r\n      const e = m.elements;\r\n      this.x = e[12];\r\n      this.y = e[13];\r\n      this.z = e[14];\r\n      return this;\r\n    }\r\n\r\n    setFromMatrixScale(m) {\r\n      const sx = this.setFromMatrixColumn(m, 0).length();\r\n      const sy = this.setFromMatrixColumn(m, 1).length();\r\n      const sz = this.setFromMatrixColumn(m, 2).length();\r\n      this.x = sx;\r\n      this.y = sy;\r\n      this.z = sz;\r\n      return this;\r\n    }\r\n\r\n    setFromMatrixColumn(m, index) {\r\n      return this.fromArray(m.elements, index * 4);\r\n    }\r\n\r\n    setFromMatrix3Column(m, index) {\r\n      return this.fromArray(m.elements, index * 3);\r\n    }\r\n\r\n    equals(v) {\r\n      return v.x === this.x && v.y === this.y && v.z === this.z;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      this.x = array[offset];\r\n      this.y = array[offset + 1];\r\n      this.z = array[offset + 2];\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this.x;\r\n      array[offset + 1] = this.y;\r\n      array[offset + 2] = this.z;\r\n      return array;\r\n    }\r\n\r\n    fromBufferAttribute(attribute, index, offset) {\r\n      if (offset !== undefined) {\r\n        console.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\r\n      }\r\n\r\n      this.x = attribute.getX(index);\r\n      this.y = attribute.getY(index);\r\n      this.z = attribute.getZ(index);\r\n      return this;\r\n    }\r\n\r\n    random() {\r\n      this.x = Math.random();\r\n      this.y = Math.random();\r\n      this.z = Math.random();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  Vector3.prototype.isVector3 = true;\r\n\r\n  const _vector$c = /*@__PURE__*/ new Vector3();\r\n\r\n  const _quaternion$4 = /*@__PURE__*/ new Quaternion();\r\n\r\n  class Box3 {\r\n    constructor(\r\n      min = new Vector3(+Infinity, +Infinity, +Infinity),\r\n      max = new Vector3(-Infinity, -Infinity, -Infinity),\r\n    ) {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n\r\n    set(min, max) {\r\n      this.min.copy(min);\r\n      this.max.copy(max);\r\n      return this;\r\n    }\r\n\r\n    setFromArray(array) {\r\n      let minX = +Infinity;\r\n      let minY = +Infinity;\r\n      let minZ = +Infinity;\r\n      let maxX = -Infinity;\r\n      let maxY = -Infinity;\r\n      let maxZ = -Infinity;\r\n\r\n      for (let i = 0, l = array.length; i < l; i += 3) {\r\n        const x = array[i];\r\n        const y = array[i + 1];\r\n        const z = array[i + 2];\r\n        if (x < minX) minX = x;\r\n        if (y < minY) minY = y;\r\n        if (z < minZ) minZ = z;\r\n        if (x > maxX) maxX = x;\r\n        if (y > maxY) maxY = y;\r\n        if (z > maxZ) maxZ = z;\r\n      }\r\n\r\n      this.min.set(minX, minY, minZ);\r\n      this.max.set(maxX, maxY, maxZ);\r\n      return this;\r\n    }\r\n\r\n    setFromBufferAttribute(attribute) {\r\n      let minX = +Infinity;\r\n      let minY = +Infinity;\r\n      let minZ = +Infinity;\r\n      let maxX = -Infinity;\r\n      let maxY = -Infinity;\r\n      let maxZ = -Infinity;\r\n\r\n      for (let i = 0, l = attribute.count; i < l; i++) {\r\n        const x = attribute.getX(i);\r\n        const y = attribute.getY(i);\r\n        const z = attribute.getZ(i);\r\n        if (x < minX) minX = x;\r\n        if (y < minY) minY = y;\r\n        if (z < minZ) minZ = z;\r\n        if (x > maxX) maxX = x;\r\n        if (y > maxY) maxY = y;\r\n        if (z > maxZ) maxZ = z;\r\n      }\r\n\r\n      this.min.set(minX, minY, minZ);\r\n      this.max.set(maxX, maxY, maxZ);\r\n      return this;\r\n    }\r\n\r\n    setFromPoints(points) {\r\n      this.makeEmpty();\r\n\r\n      for (let i = 0, il = points.length; i < il; i++) {\r\n        this.expandByPoint(points[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromCenterAndSize(center, size) {\r\n      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);\r\n\r\n      this.min.copy(center).sub(halfSize);\r\n      this.max.copy(center).add(halfSize);\r\n      return this;\r\n    }\r\n\r\n    setFromObject(object) {\r\n      this.makeEmpty();\r\n      return this.expandByObject(object);\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(box) {\r\n      this.min.copy(box.min);\r\n      this.max.copy(box.max);\r\n      return this;\r\n    }\r\n\r\n    makeEmpty() {\r\n      this.min.x = this.min.y = this.min.z = +Infinity;\r\n      this.max.x = this.max.y = this.max.z = -Infinity;\r\n      return this;\r\n    }\r\n\r\n    isEmpty() {\r\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\r\n    }\r\n\r\n    getCenter(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box3: .getCenter() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return this.isEmpty()\r\n        ? target.set(0, 0, 0)\r\n        : target.addVectors(this.min, this.max).multiplyScalar(0.5);\r\n    }\r\n\r\n    getSize(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box3: .getSize() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\r\n    }\r\n\r\n    expandByPoint(point) {\r\n      this.min.min(point);\r\n      this.max.max(point);\r\n      return this;\r\n    }\r\n\r\n    expandByVector(vector) {\r\n      this.min.sub(vector);\r\n      this.max.add(vector);\r\n      return this;\r\n    }\r\n\r\n    expandByScalar(scalar) {\r\n      this.min.addScalar(-scalar);\r\n      this.max.addScalar(scalar);\r\n      return this;\r\n    }\r\n\r\n    expandByObject(object) {\r\n      // Computes the world-axis-aligned bounding box of an object (including its children),\r\n      // accounting for both the object's, and children's, world transforms\r\n      object.updateWorldMatrix(false, false);\r\n      const geometry = object.geometry;\r\n\r\n      if (geometry !== undefined) {\r\n        if (geometry.boundingBox === null) {\r\n          geometry.computeBoundingBox();\r\n        }\r\n\r\n        _box$3.copy(geometry.boundingBox);\r\n\r\n        _box$3.applyMatrix4(object.matrixWorld);\r\n\r\n        this.union(_box$3);\r\n      }\r\n\r\n      const children = object.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        this.expandByObject(children[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    containsPoint(point) {\r\n      return point.x < this.min.x ||\r\n        point.x > this.max.x ||\r\n        point.y < this.min.y ||\r\n        point.y > this.max.y ||\r\n        point.z < this.min.z ||\r\n        point.z > this.max.z\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    containsBox(box) {\r\n      return (\r\n        this.min.x <= box.min.x &&\r\n        box.max.x <= this.max.x &&\r\n        this.min.y <= box.min.y &&\r\n        box.max.y <= this.max.y &&\r\n        this.min.z <= box.min.z &&\r\n        box.max.z <= this.max.z\r\n      );\r\n    }\r\n\r\n    getParameter(point, target) {\r\n      // This can potentially have a divide by zero if the box\r\n      // has a size dimension of 0.\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box3: .getParameter() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.set(\r\n        (point.x - this.min.x) / (this.max.x - this.min.x),\r\n        (point.y - this.min.y) / (this.max.y - this.min.y),\r\n        (point.z - this.min.z) / (this.max.z - this.min.z),\r\n      );\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      // using 6 splitting planes to rule out intersections.\r\n      return box.max.x < this.min.x ||\r\n        box.min.x > this.max.x ||\r\n        box.max.y < this.min.y ||\r\n        box.min.y > this.max.y ||\r\n        box.max.z < this.min.z ||\r\n        box.min.z > this.max.z\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    intersectsSphere(sphere) {\r\n      // Find the point on the AABB closest to the sphere center.\r\n      this.clampPoint(sphere.center, _vector$b); // If that point is inside the sphere, the AABB and sphere intersect.\r\n\r\n      return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\r\n    }\r\n\r\n    intersectsPlane(plane) {\r\n      // We compute the minimum and maximum dot product values. If those values\r\n      // are on the same side (back or front) of the plane, then there is no intersection.\r\n      let min, max;\r\n\r\n      if (plane.normal.x > 0) {\r\n        min = plane.normal.x * this.min.x;\r\n        max = plane.normal.x * this.max.x;\r\n      } else {\r\n        min = plane.normal.x * this.max.x;\r\n        max = plane.normal.x * this.min.x;\r\n      }\r\n\r\n      if (plane.normal.y > 0) {\r\n        min += plane.normal.y * this.min.y;\r\n        max += plane.normal.y * this.max.y;\r\n      } else {\r\n        min += plane.normal.y * this.max.y;\r\n        max += plane.normal.y * this.min.y;\r\n      }\r\n\r\n      if (plane.normal.z > 0) {\r\n        min += plane.normal.z * this.min.z;\r\n        max += plane.normal.z * this.max.z;\r\n      } else {\r\n        min += plane.normal.z * this.max.z;\r\n        max += plane.normal.z * this.min.z;\r\n      }\r\n\r\n      return min <= -plane.constant && max >= -plane.constant;\r\n    }\r\n\r\n    intersectsTriangle(triangle) {\r\n      if (this.isEmpty()) {\r\n        return false;\r\n      } // compute box center and extents\r\n\r\n      this.getCenter(_center);\r\n\r\n      _extents.subVectors(this.max, _center); // translate triangle to aabb origin\r\n\r\n      _v0$2.subVectors(triangle.a, _center);\r\n\r\n      _v1$7.subVectors(triangle.b, _center);\r\n\r\n      _v2$3.subVectors(triangle.c, _center); // compute edge vectors for triangle\r\n\r\n      _f0.subVectors(_v1$7, _v0$2);\r\n\r\n      _f1.subVectors(_v2$3, _v1$7);\r\n\r\n      _f2.subVectors(_v0$2, _v2$3); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\r\n      let axes = [\r\n        0,\r\n        -_f0.z,\r\n        _f0.y,\r\n        0,\r\n        -_f1.z,\r\n        _f1.y,\r\n        0,\r\n        -_f2.z,\r\n        _f2.y,\r\n        _f0.z,\r\n        0,\r\n        -_f0.x,\r\n        _f1.z,\r\n        0,\r\n        -_f1.x,\r\n        _f2.z,\r\n        0,\r\n        -_f2.x,\r\n        -_f0.y,\r\n        _f0.x,\r\n        0,\r\n        -_f1.y,\r\n        _f1.x,\r\n        0,\r\n        -_f2.y,\r\n        _f2.x,\r\n        0,\r\n      ];\r\n\r\n      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\r\n        return false;\r\n      } // test 3 face normals from the aabb\r\n\r\n      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\r\n\r\n      if (!satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents)) {\r\n        return false;\r\n      } // finally testing the face normal of the triangle\r\n      // use already existing triangle edge vectors here\r\n\r\n      _triangleNormal.crossVectors(_f0, _f1);\r\n\r\n      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\r\n      return satForAxes(axes, _v0$2, _v1$7, _v2$3, _extents);\r\n    }\r\n\r\n    clampPoint(point, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box3: .clampPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.copy(point).clamp(this.min, this.max);\r\n    }\r\n\r\n    distanceToPoint(point) {\r\n      const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);\r\n\r\n      return clampedPoint.sub(point).length();\r\n    }\r\n\r\n    getBoundingSphere(target) {\r\n      if (target === undefined) {\r\n        console.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\r\n      }\r\n\r\n      this.getCenter(target.center);\r\n      target.radius = this.getSize(_vector$b).length() * 0.5;\r\n      return target;\r\n    }\r\n\r\n    intersect(box) {\r\n      this.min.max(box.min);\r\n      this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\r\n      if (this.isEmpty()) this.makeEmpty();\r\n      return this;\r\n    }\r\n\r\n    union(box) {\r\n      this.min.min(box.min);\r\n      this.max.max(box.max);\r\n      return this;\r\n    }\r\n\r\n    applyMatrix4(matrix) {\r\n      // transform of empty box is an empty box.\r\n      if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\r\n      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\r\n\r\n      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\r\n\r\n      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\r\n\r\n      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\r\n\r\n      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\r\n\r\n      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\r\n\r\n      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\r\n\r\n      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\r\n\r\n      this.setFromPoints(_points);\r\n      return this;\r\n    }\r\n\r\n    translate(offset) {\r\n      this.min.add(offset);\r\n      this.max.add(offset);\r\n      return this;\r\n    }\r\n\r\n    equals(box) {\r\n      return box.min.equals(this.min) && box.max.equals(this.max);\r\n    }\r\n  }\r\n\r\n  Box3.prototype.isBox3 = true;\r\n  const _points = [\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n    /*@__PURE__*/ new Vector3(),\r\n  ];\r\n\r\n  const _vector$b = /*@__PURE__*/ new Vector3();\r\n\r\n  const _box$3 = /*@__PURE__*/ new Box3(); // triangle centered vertices\r\n\r\n  const _v0$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v1$7 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v2$3 = /*@__PURE__*/ new Vector3(); // triangle edge vectors\r\n\r\n  const _f0 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _f1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _f2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _center = /*@__PURE__*/ new Vector3();\r\n\r\n  const _extents = /*@__PURE__*/ new Vector3();\r\n\r\n  const _triangleNormal = /*@__PURE__*/ new Vector3();\r\n\r\n  const _testAxis = /*@__PURE__*/ new Vector3();\r\n\r\n  function satForAxes(axes, v0, v1, v2, extents) {\r\n    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {\r\n      _testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\r\n\r\n      const r =\r\n        extents.x * Math.abs(_testAxis.x) +\r\n        extents.y * Math.abs(_testAxis.y) +\r\n        extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\r\n\r\n      const p0 = v0.dot(_testAxis);\r\n      const p1 = v1.dot(_testAxis);\r\n      const p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\r\n      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\r\n        // points of the projected triangle are outside the projected half-length of the aabb\r\n        // the axis is seperating and we can exit\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  const _box$2 = /*@__PURE__*/ new Box3();\r\n\r\n  const _v1$6 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _toFarthestPoint = /*@__PURE__*/ new Vector3();\r\n\r\n  const _toPoint = /*@__PURE__*/ new Vector3();\r\n\r\n  class Sphere {\r\n    constructor(center = new Vector3(), radius = -1) {\r\n      this.center = center;\r\n      this.radius = radius;\r\n    }\r\n\r\n    set(center, radius) {\r\n      this.center.copy(center);\r\n      this.radius = radius;\r\n      return this;\r\n    }\r\n\r\n    setFromPoints(points, optionalCenter) {\r\n      const center = this.center;\r\n\r\n      if (optionalCenter !== undefined) {\r\n        center.copy(optionalCenter);\r\n      } else {\r\n        _box$2.setFromPoints(points).getCenter(center);\r\n      }\r\n\r\n      let maxRadiusSq = 0;\r\n\r\n      for (let i = 0, il = points.length; i < il; i++) {\r\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\r\n      }\r\n\r\n      this.radius = Math.sqrt(maxRadiusSq);\r\n      return this;\r\n    }\r\n\r\n    copy(sphere) {\r\n      this.center.copy(sphere.center);\r\n      this.radius = sphere.radius;\r\n      return this;\r\n    }\r\n\r\n    isEmpty() {\r\n      return this.radius < 0;\r\n    }\r\n\r\n    makeEmpty() {\r\n      this.center.set(0, 0, 0);\r\n      this.radius = -1;\r\n      return this;\r\n    }\r\n\r\n    containsPoint(point) {\r\n      return point.distanceToSquared(this.center) <= this.radius * this.radius;\r\n    }\r\n\r\n    distanceToPoint(point) {\r\n      return point.distanceTo(this.center) - this.radius;\r\n    }\r\n\r\n    intersectsSphere(sphere) {\r\n      const radiusSum = this.radius + sphere.radius;\r\n      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      return box.intersectsSphere(this);\r\n    }\r\n\r\n    intersectsPlane(plane) {\r\n      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\r\n    }\r\n\r\n    clampPoint(point, target) {\r\n      const deltaLengthSq = this.center.distanceToSquared(point);\r\n\r\n      if (target === undefined) {\r\n        console.warn('THREE.Sphere: .clampPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      target.copy(point);\r\n\r\n      if (deltaLengthSq > this.radius * this.radius) {\r\n        target.sub(this.center).normalize();\r\n        target.multiplyScalar(this.radius).add(this.center);\r\n      }\r\n\r\n      return target;\r\n    }\r\n\r\n    getBoundingBox(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Sphere: .getBoundingBox() target is now required');\r\n        target = new Box3();\r\n      }\r\n\r\n      if (this.isEmpty()) {\r\n        // Empty sphere produces empty bounding box\r\n        target.makeEmpty();\r\n        return target;\r\n      }\r\n\r\n      target.set(this.center, this.center);\r\n      target.expandByScalar(this.radius);\r\n      return target;\r\n    }\r\n\r\n    applyMatrix4(matrix) {\r\n      this.center.applyMatrix4(matrix);\r\n      this.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n      return this;\r\n    }\r\n\r\n    translate(offset) {\r\n      this.center.add(offset);\r\n      return this;\r\n    }\r\n\r\n    expandByPoint(point) {\r\n      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\r\n      _toPoint.subVectors(point, this.center);\r\n\r\n      const lengthSq = _toPoint.lengthSq();\r\n\r\n      if (lengthSq > this.radius * this.radius) {\r\n        const length = Math.sqrt(lengthSq);\r\n        const missingRadiusHalf = (length - this.radius) * 0.5; // Nudge this sphere towards the target point. Add half the missing distance to radius,\r\n        // and the other half to position. This gives a tighter enclosure, instead of if\r\n        // the whole missing distance were just added to radius.\r\n\r\n        this.center.add(_toPoint.multiplyScalar(missingRadiusHalf / length));\r\n        this.radius += missingRadiusHalf;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    union(sphere) {\r\n      // from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\r\n      // To enclose another sphere into this sphere, we only need to enclose two points:\r\n      // 1) Enclose the farthest point on the other sphere into this sphere.\r\n      // 2) Enclose the opposite point of the farthest point into this sphere.\r\n      _toFarthestPoint\r\n        .subVectors(sphere.center, this.center)\r\n        .normalize()\r\n        .multiplyScalar(sphere.radius);\r\n\r\n      this.expandByPoint(_v1$6.copy(sphere.center).add(_toFarthestPoint));\r\n      this.expandByPoint(_v1$6.copy(sphere.center).sub(_toFarthestPoint));\r\n      return this;\r\n    }\r\n\r\n    equals(sphere) {\r\n      return sphere.center.equals(this.center) && sphere.radius === this.radius;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  const _vector$a = /*@__PURE__*/ new Vector3();\r\n\r\n  const _segCenter = /*@__PURE__*/ new Vector3();\r\n\r\n  const _segDir = /*@__PURE__*/ new Vector3();\r\n\r\n  const _diff = /*@__PURE__*/ new Vector3();\r\n\r\n  const _edge1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _edge2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _normal$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  class Ray {\r\n    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {\r\n      this.origin = origin;\r\n      this.direction = direction;\r\n    }\r\n\r\n    set(origin, direction) {\r\n      this.origin.copy(origin);\r\n      this.direction.copy(direction);\r\n      return this;\r\n    }\r\n\r\n    copy(ray) {\r\n      this.origin.copy(ray.origin);\r\n      this.direction.copy(ray.direction);\r\n      return this;\r\n    }\r\n\r\n    at(t, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Ray: .at() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.copy(this.direction).multiplyScalar(t).add(this.origin);\r\n    }\r\n\r\n    lookAt(v) {\r\n      this.direction.copy(v).sub(this.origin).normalize();\r\n      return this;\r\n    }\r\n\r\n    recast(t) {\r\n      this.origin.copy(this.at(t, _vector$a));\r\n      return this;\r\n    }\r\n\r\n    closestPointToPoint(point, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Ray: .closestPointToPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      target.subVectors(point, this.origin);\r\n      const directionDistance = target.dot(this.direction);\r\n\r\n      if (directionDistance < 0) {\r\n        return target.copy(this.origin);\r\n      }\r\n\r\n      return target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n    }\r\n\r\n    distanceToPoint(point) {\r\n      return Math.sqrt(this.distanceSqToPoint(point));\r\n    }\r\n\r\n    distanceSqToPoint(point) {\r\n      const directionDistance = _vector$a.subVectors(point, this.origin).dot(this.direction); // point behind the ray\r\n\r\n      if (directionDistance < 0) {\r\n        return this.origin.distanceToSquared(point);\r\n      }\r\n\r\n      _vector$a.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\r\n\r\n      return _vector$a.distanceToSquared(point);\r\n    }\r\n\r\n    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\r\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n      // It returns the min distance between the ray and the segment\r\n      // defined by v0 and v1\r\n      // It can also set two optional targets :\r\n      // - The closest point on the ray\r\n      // - The closest point on the segment\r\n      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);\r\n\r\n      _segDir.copy(v1).sub(v0).normalize();\r\n\r\n      _diff.copy(this.origin).sub(_segCenter);\r\n\r\n      const segExtent = v0.distanceTo(v1) * 0.5;\r\n      const a01 = -this.direction.dot(_segDir);\r\n\r\n      const b0 = _diff.dot(this.direction);\r\n\r\n      const b1 = -_diff.dot(_segDir);\r\n\r\n      const c = _diff.lengthSq();\r\n\r\n      const det = Math.abs(1 - a01 * a01);\r\n      let s0, s1, sqrDist, extDet;\r\n\r\n      if (det > 0) {\r\n        // The ray and segment are not parallel.\r\n        s0 = a01 * b1 - b0;\r\n        s1 = a01 * b0 - b1;\r\n        extDet = segExtent * det;\r\n\r\n        if (s0 >= 0) {\r\n          if (s1 >= -extDet) {\r\n            if (s1 <= extDet) {\r\n              // region 0\r\n              // Minimum at interior points of ray and segment.\r\n              const invDet = 1 / det;\r\n              s0 *= invDet;\r\n              s1 *= invDet;\r\n              sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\r\n            } else {\r\n              // region 1\r\n              s1 = segExtent;\r\n              s0 = Math.max(0, -(a01 * s1 + b0));\r\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\r\n            }\r\n          } else {\r\n            // region 5\r\n            s1 = -segExtent;\r\n            s0 = Math.max(0, -(a01 * s1 + b0));\r\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\r\n          }\r\n        } else {\r\n          if (s1 <= -extDet) {\r\n            // region 4\r\n            s0 = Math.max(0, -(-a01 * segExtent + b0));\r\n            s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\r\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\r\n          } else if (s1 <= extDet) {\r\n            // region 3\r\n            s0 = 0;\r\n            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\r\n            sqrDist = s1 * (s1 + 2 * b1) + c;\r\n          } else {\r\n            // region 2\r\n            s0 = Math.max(0, -(a01 * segExtent + b0));\r\n            s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\r\n            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\r\n          }\r\n        }\r\n      } else {\r\n        // Ray and segment are parallel.\r\n        s1 = a01 > 0 ? -segExtent : segExtent;\r\n        s0 = Math.max(0, -(a01 * s1 + b0));\r\n        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\r\n      }\r\n\r\n      if (optionalPointOnRay) {\r\n        optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\r\n      }\r\n\r\n      if (optionalPointOnSegment) {\r\n        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\r\n      }\r\n\r\n      return sqrDist;\r\n    }\r\n\r\n    intersectSphere(sphere, target) {\r\n      _vector$a.subVectors(sphere.center, this.origin);\r\n\r\n      const tca = _vector$a.dot(this.direction);\r\n\r\n      const d2 = _vector$a.dot(_vector$a) - tca * tca;\r\n      const radius2 = sphere.radius * sphere.radius;\r\n      if (d2 > radius2) return null;\r\n      const thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\r\n\r\n      const t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\r\n\r\n      const t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\r\n\r\n      if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\r\n      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n      // in order to always return an intersect point that is in front of the ray.\r\n\r\n      if (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\r\n      return this.at(t0, target);\r\n    }\r\n\r\n    intersectsSphere(sphere) {\r\n      return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\r\n    }\r\n\r\n    distanceToPlane(plane) {\r\n      const denominator = plane.normal.dot(this.direction);\r\n\r\n      if (denominator === 0) {\r\n        // line is coplanar, return origin\r\n        if (plane.distanceToPoint(this.origin) === 0) {\r\n          return 0;\r\n        } // Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n        return null;\r\n      }\r\n\r\n      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\r\n\r\n      return t >= 0 ? t : null;\r\n    }\r\n\r\n    intersectPlane(plane, target) {\r\n      const t = this.distanceToPlane(plane);\r\n\r\n      if (t === null) {\r\n        return null;\r\n      }\r\n\r\n      return this.at(t, target);\r\n    }\r\n\r\n    intersectsPlane(plane) {\r\n      // check if the ray lies on the plane first\r\n      const distToPoint = plane.distanceToPoint(this.origin);\r\n\r\n      if (distToPoint === 0) {\r\n        return true;\r\n      }\r\n\r\n      const denominator = plane.normal.dot(this.direction);\r\n\r\n      if (denominator * distToPoint < 0) {\r\n        return true;\r\n      } // ray origin is behind the plane (and is pointing behind it)\r\n\r\n      return false;\r\n    }\r\n\r\n    intersectBox(box, target) {\r\n      let tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n      const invdirx = 1 / this.direction.x,\r\n        invdiry = 1 / this.direction.y,\r\n        invdirz = 1 / this.direction.z;\r\n      const origin = this.origin;\r\n\r\n      if (invdirx >= 0) {\r\n        tmin = (box.min.x - origin.x) * invdirx;\r\n        tmax = (box.max.x - origin.x) * invdirx;\r\n      } else {\r\n        tmin = (box.max.x - origin.x) * invdirx;\r\n        tmax = (box.min.x - origin.x) * invdirx;\r\n      }\r\n\r\n      if (invdiry >= 0) {\r\n        tymin = (box.min.y - origin.y) * invdiry;\r\n        tymax = (box.max.y - origin.y) * invdiry;\r\n      } else {\r\n        tymin = (box.max.y - origin.y) * invdiry;\r\n        tymax = (box.min.y - origin.y) * invdiry;\r\n      }\r\n\r\n      if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\r\n      // (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n      if (tymin > tmin || tmin !== tmin) tmin = tymin;\r\n      if (tymax < tmax || tmax !== tmax) tmax = tymax;\r\n\r\n      if (invdirz >= 0) {\r\n        tzmin = (box.min.z - origin.z) * invdirz;\r\n        tzmax = (box.max.z - origin.z) * invdirz;\r\n      } else {\r\n        tzmin = (box.max.z - origin.z) * invdirz;\r\n        tzmax = (box.min.z - origin.z) * invdirz;\r\n      }\r\n\r\n      if (tmin > tzmax || tzmin > tmax) return null;\r\n      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\r\n      if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\r\n\r\n      if (tmax < 0) return null;\r\n      return this.at(tmin >= 0 ? tmin : tmax, target);\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      return this.intersectBox(box, _vector$a) !== null;\r\n    }\r\n\r\n    intersectTriangle(a, b, c, backfaceCulling, target) {\r\n      // Compute the offset origin, edges, and normal.\r\n      // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n      _edge1.subVectors(b, a);\r\n\r\n      _edge2.subVectors(c, a);\r\n\r\n      _normal$1.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n      //\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n      //\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n      //\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\r\n      let DdN = this.direction.dot(_normal$1);\r\n      let sign;\r\n\r\n      if (DdN > 0) {\r\n        if (backfaceCulling) return null;\r\n        sign = 1;\r\n      } else if (DdN < 0) {\r\n        sign = -1;\r\n        DdN = -DdN;\r\n      } else {\r\n        return null;\r\n      }\r\n\r\n      _diff.subVectors(this.origin, a);\r\n\r\n      const DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\r\n\r\n      if (DdQxE2 < 0) {\r\n        return null;\r\n      }\r\n\r\n      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\r\n\r\n      if (DdE1xQ < 0) {\r\n        return null;\r\n      } // b1+b2 > 1, no intersection\r\n\r\n      if (DdQxE2 + DdE1xQ > DdN) {\r\n        return null;\r\n      } // Line intersects triangle, check if ray does.\r\n\r\n      const QdN = -sign * _diff.dot(_normal$1); // t < 0, no intersection\r\n\r\n      if (QdN < 0) {\r\n        return null;\r\n      } // Ray intersects triangle.\r\n\r\n      return this.at(QdN / DdN, target);\r\n    }\r\n\r\n    applyMatrix4(matrix4) {\r\n      this.origin.applyMatrix4(matrix4);\r\n      this.direction.transformDirection(matrix4);\r\n      return this;\r\n    }\r\n\r\n    equals(ray) {\r\n      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  class Matrix4 {\r\n    constructor() {\r\n      this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n\r\n      if (arguments.length > 0) {\r\n        console.error(\r\n          'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.',\r\n        );\r\n      }\r\n    }\r\n\r\n    set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\r\n      const te = this.elements;\r\n      te[0] = n11;\r\n      te[4] = n12;\r\n      te[8] = n13;\r\n      te[12] = n14;\r\n      te[1] = n21;\r\n      te[5] = n22;\r\n      te[9] = n23;\r\n      te[13] = n24;\r\n      te[2] = n31;\r\n      te[6] = n32;\r\n      te[10] = n33;\r\n      te[14] = n34;\r\n      te[3] = n41;\r\n      te[7] = n42;\r\n      te[11] = n43;\r\n      te[15] = n44;\r\n      return this;\r\n    }\r\n\r\n    identity() {\r\n      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new Matrix4().fromArray(this.elements);\r\n    }\r\n\r\n    copy(m) {\r\n      const te = this.elements;\r\n      const me = m.elements;\r\n      te[0] = me[0];\r\n      te[1] = me[1];\r\n      te[2] = me[2];\r\n      te[3] = me[3];\r\n      te[4] = me[4];\r\n      te[5] = me[5];\r\n      te[6] = me[6];\r\n      te[7] = me[7];\r\n      te[8] = me[8];\r\n      te[9] = me[9];\r\n      te[10] = me[10];\r\n      te[11] = me[11];\r\n      te[12] = me[12];\r\n      te[13] = me[13];\r\n      te[14] = me[14];\r\n      te[15] = me[15];\r\n      return this;\r\n    }\r\n\r\n    copyPosition(m) {\r\n      const te = this.elements,\r\n        me = m.elements;\r\n      te[12] = me[12];\r\n      te[13] = me[13];\r\n      te[14] = me[14];\r\n      return this;\r\n    }\r\n\r\n    setFromMatrix3(m) {\r\n      const me = m.elements;\r\n      this.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    extractBasis(xAxis, yAxis, zAxis) {\r\n      xAxis.setFromMatrixColumn(this, 0);\r\n      yAxis.setFromMatrixColumn(this, 1);\r\n      zAxis.setFromMatrixColumn(this, 2);\r\n      return this;\r\n    }\r\n\r\n    makeBasis(xAxis, yAxis, zAxis) {\r\n      this.set(\r\n        xAxis.x,\r\n        yAxis.x,\r\n        zAxis.x,\r\n        0,\r\n        xAxis.y,\r\n        yAxis.y,\r\n        zAxis.y,\r\n        0,\r\n        xAxis.z,\r\n        yAxis.z,\r\n        zAxis.z,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1,\r\n      );\r\n      return this;\r\n    }\r\n\r\n    extractRotation(m) {\r\n      // this method does not support reflection matrices\r\n      const te = this.elements;\r\n      const me = m.elements;\r\n\r\n      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();\r\n\r\n      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();\r\n\r\n      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();\r\n\r\n      te[0] = me[0] * scaleX;\r\n      te[1] = me[1] * scaleX;\r\n      te[2] = me[2] * scaleX;\r\n      te[3] = 0;\r\n      te[4] = me[4] * scaleY;\r\n      te[5] = me[5] * scaleY;\r\n      te[6] = me[6] * scaleY;\r\n      te[7] = 0;\r\n      te[8] = me[8] * scaleZ;\r\n      te[9] = me[9] * scaleZ;\r\n      te[10] = me[10] * scaleZ;\r\n      te[11] = 0;\r\n      te[12] = 0;\r\n      te[13] = 0;\r\n      te[14] = 0;\r\n      te[15] = 1;\r\n      return this;\r\n    }\r\n\r\n    makeRotationFromEuler(euler) {\r\n      if (!(euler && euler.isEuler)) {\r\n        console.error(\r\n          'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.',\r\n        );\r\n      }\r\n\r\n      const te = this.elements;\r\n      const x = euler.x,\r\n        y = euler.y,\r\n        z = euler.z;\r\n      const a = Math.cos(x),\r\n        b = Math.sin(x);\r\n      const c = Math.cos(y),\r\n        d = Math.sin(y);\r\n      const e = Math.cos(z),\r\n        f = Math.sin(z);\r\n\r\n      if (euler.order === 'XYZ') {\r\n        const ae = a * e,\r\n          af = a * f,\r\n          be = b * e,\r\n          bf = b * f;\r\n        te[0] = c * e;\r\n        te[4] = -c * f;\r\n        te[8] = d;\r\n        te[1] = af + be * d;\r\n        te[5] = ae - bf * d;\r\n        te[9] = -b * c;\r\n        te[2] = bf - ae * d;\r\n        te[6] = be + af * d;\r\n        te[10] = a * c;\r\n      } else if (euler.order === 'YXZ') {\r\n        const ce = c * e,\r\n          cf = c * f,\r\n          de = d * e,\r\n          df = d * f;\r\n        te[0] = ce + df * b;\r\n        te[4] = de * b - cf;\r\n        te[8] = a * d;\r\n        te[1] = a * f;\r\n        te[5] = a * e;\r\n        te[9] = -b;\r\n        te[2] = cf * b - de;\r\n        te[6] = df + ce * b;\r\n        te[10] = a * c;\r\n      } else if (euler.order === 'ZXY') {\r\n        const ce = c * e,\r\n          cf = c * f,\r\n          de = d * e,\r\n          df = d * f;\r\n        te[0] = ce - df * b;\r\n        te[4] = -a * f;\r\n        te[8] = de + cf * b;\r\n        te[1] = cf + de * b;\r\n        te[5] = a * e;\r\n        te[9] = df - ce * b;\r\n        te[2] = -a * d;\r\n        te[6] = b;\r\n        te[10] = a * c;\r\n      } else if (euler.order === 'ZYX') {\r\n        const ae = a * e,\r\n          af = a * f,\r\n          be = b * e,\r\n          bf = b * f;\r\n        te[0] = c * e;\r\n        te[4] = be * d - af;\r\n        te[8] = ae * d + bf;\r\n        te[1] = c * f;\r\n        te[5] = bf * d + ae;\r\n        te[9] = af * d - be;\r\n        te[2] = -d;\r\n        te[6] = b * c;\r\n        te[10] = a * c;\r\n      } else if (euler.order === 'YZX') {\r\n        const ac = a * c,\r\n          ad = a * d,\r\n          bc = b * c,\r\n          bd = b * d;\r\n        te[0] = c * e;\r\n        te[4] = bd - ac * f;\r\n        te[8] = bc * f + ad;\r\n        te[1] = f;\r\n        te[5] = a * e;\r\n        te[9] = -b * e;\r\n        te[2] = -d * e;\r\n        te[6] = ad * f + bc;\r\n        te[10] = ac - bd * f;\r\n      } else if (euler.order === 'XZY') {\r\n        const ac = a * c,\r\n          ad = a * d,\r\n          bc = b * c,\r\n          bd = b * d;\r\n        te[0] = c * e;\r\n        te[4] = -f;\r\n        te[8] = d * e;\r\n        te[1] = ac * f + bd;\r\n        te[5] = a * e;\r\n        te[9] = ad * f - bc;\r\n        te[2] = bc * f - ad;\r\n        te[6] = b * e;\r\n        te[10] = bd * f + ac;\r\n      } // bottom row\r\n\r\n      te[3] = 0;\r\n      te[7] = 0;\r\n      te[11] = 0; // last column\r\n\r\n      te[12] = 0;\r\n      te[13] = 0;\r\n      te[14] = 0;\r\n      te[15] = 1;\r\n      return this;\r\n    }\r\n\r\n    makeRotationFromQuaternion(q) {\r\n      return this.compose(_zero, q, _one);\r\n    }\r\n\r\n    lookAt(eye, target, up) {\r\n      const te = this.elements;\r\n\r\n      _z.subVectors(eye, target);\r\n\r\n      if (_z.lengthSq() === 0) {\r\n        // eye and target are in the same position\r\n        _z.z = 1;\r\n      }\r\n\r\n      _z.normalize();\r\n\r\n      _x.crossVectors(up, _z);\r\n\r\n      if (_x.lengthSq() === 0) {\r\n        // up and z are parallel\r\n        if (Math.abs(up.z) === 1) {\r\n          _z.x += 0.0001;\r\n        } else {\r\n          _z.z += 0.0001;\r\n        }\r\n\r\n        _z.normalize();\r\n\r\n        _x.crossVectors(up, _z);\r\n      }\r\n\r\n      _x.normalize();\r\n\r\n      _y.crossVectors(_z, _x);\r\n\r\n      te[0] = _x.x;\r\n      te[4] = _y.x;\r\n      te[8] = _z.x;\r\n      te[1] = _x.y;\r\n      te[5] = _y.y;\r\n      te[9] = _z.y;\r\n      te[2] = _x.z;\r\n      te[6] = _y.z;\r\n      te[10] = _z.z;\r\n      return this;\r\n    }\r\n\r\n    multiply(m, n) {\r\n      if (n !== undefined) {\r\n        console.warn(\r\n          'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.',\r\n        );\r\n        return this.multiplyMatrices(m, n);\r\n      }\r\n\r\n      return this.multiplyMatrices(this, m);\r\n    }\r\n\r\n    premultiply(m) {\r\n      return this.multiplyMatrices(m, this);\r\n    }\r\n\r\n    multiplyMatrices(a, b) {\r\n      const ae = a.elements;\r\n      const be = b.elements;\r\n      const te = this.elements;\r\n      const a11 = ae[0],\r\n        a12 = ae[4],\r\n        a13 = ae[8],\r\n        a14 = ae[12];\r\n      const a21 = ae[1],\r\n        a22 = ae[5],\r\n        a23 = ae[9],\r\n        a24 = ae[13];\r\n      const a31 = ae[2],\r\n        a32 = ae[6],\r\n        a33 = ae[10],\r\n        a34 = ae[14];\r\n      const a41 = ae[3],\r\n        a42 = ae[7],\r\n        a43 = ae[11],\r\n        a44 = ae[15];\r\n      const b11 = be[0],\r\n        b12 = be[4],\r\n        b13 = be[8],\r\n        b14 = be[12];\r\n      const b21 = be[1],\r\n        b22 = be[5],\r\n        b23 = be[9],\r\n        b24 = be[13];\r\n      const b31 = be[2],\r\n        b32 = be[6],\r\n        b33 = be[10],\r\n        b34 = be[14];\r\n      const b41 = be[3],\r\n        b42 = be[7],\r\n        b43 = be[11],\r\n        b44 = be[15];\r\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(s) {\r\n      const te = this.elements;\r\n      te[0] *= s;\r\n      te[4] *= s;\r\n      te[8] *= s;\r\n      te[12] *= s;\r\n      te[1] *= s;\r\n      te[5] *= s;\r\n      te[9] *= s;\r\n      te[13] *= s;\r\n      te[2] *= s;\r\n      te[6] *= s;\r\n      te[10] *= s;\r\n      te[14] *= s;\r\n      te[3] *= s;\r\n      te[7] *= s;\r\n      te[11] *= s;\r\n      te[15] *= s;\r\n      return this;\r\n    }\r\n\r\n    determinant() {\r\n      const te = this.elements;\r\n      const n11 = te[0],\r\n        n12 = te[4],\r\n        n13 = te[8],\r\n        n14 = te[12];\r\n      const n21 = te[1],\r\n        n22 = te[5],\r\n        n23 = te[9],\r\n        n24 = te[13];\r\n      const n31 = te[2],\r\n        n32 = te[6],\r\n        n33 = te[10],\r\n        n34 = te[14];\r\n      const n41 = te[3],\r\n        n42 = te[7],\r\n        n43 = te[11],\r\n        n44 = te[15]; //TODO: make this more efficient\r\n      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n      return (\r\n        n41 *\r\n          (+n14 * n23 * n32 -\r\n            n13 * n24 * n32 -\r\n            n14 * n22 * n33 +\r\n            n12 * n24 * n33 +\r\n            n13 * n22 * n34 -\r\n            n12 * n23 * n34) +\r\n        n42 *\r\n          (+n11 * n23 * n34 -\r\n            n11 * n24 * n33 +\r\n            n14 * n21 * n33 -\r\n            n13 * n21 * n34 +\r\n            n13 * n24 * n31 -\r\n            n14 * n23 * n31) +\r\n        n43 *\r\n          (+n11 * n24 * n32 -\r\n            n11 * n22 * n34 -\r\n            n14 * n21 * n32 +\r\n            n12 * n21 * n34 +\r\n            n14 * n22 * n31 -\r\n            n12 * n24 * n31) +\r\n        n44 *\r\n          (-n13 * n22 * n31 -\r\n            n11 * n23 * n32 +\r\n            n11 * n22 * n33 +\r\n            n13 * n21 * n32 -\r\n            n12 * n21 * n33 +\r\n            n12 * n23 * n31)\r\n      );\r\n    }\r\n\r\n    transpose() {\r\n      const te = this.elements;\r\n      let tmp;\r\n      tmp = te[1];\r\n      te[1] = te[4];\r\n      te[4] = tmp;\r\n      tmp = te[2];\r\n      te[2] = te[8];\r\n      te[8] = tmp;\r\n      tmp = te[6];\r\n      te[6] = te[9];\r\n      te[9] = tmp;\r\n      tmp = te[3];\r\n      te[3] = te[12];\r\n      te[12] = tmp;\r\n      tmp = te[7];\r\n      te[7] = te[13];\r\n      te[13] = tmp;\r\n      tmp = te[11];\r\n      te[11] = te[14];\r\n      te[14] = tmp;\r\n      return this;\r\n    }\r\n\r\n    setPosition(x, y, z) {\r\n      const te = this.elements;\r\n\r\n      if (x.isVector3) {\r\n        te[12] = x.x;\r\n        te[13] = x.y;\r\n        te[14] = x.z;\r\n      } else {\r\n        te[12] = x;\r\n        te[13] = y;\r\n        te[14] = z;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    invert() {\r\n      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n      const te = this.elements,\r\n        n11 = te[0],\r\n        n21 = te[1],\r\n        n31 = te[2],\r\n        n41 = te[3],\r\n        n12 = te[4],\r\n        n22 = te[5],\r\n        n32 = te[6],\r\n        n42 = te[7],\r\n        n13 = te[8],\r\n        n23 = te[9],\r\n        n33 = te[10],\r\n        n43 = te[11],\r\n        n14 = te[12],\r\n        n24 = te[13],\r\n        n34 = te[14],\r\n        n44 = te[15],\r\n        t11 =\r\n          n23 * n34 * n42 -\r\n          n24 * n33 * n42 +\r\n          n24 * n32 * n43 -\r\n          n22 * n34 * n43 -\r\n          n23 * n32 * n44 +\r\n          n22 * n33 * n44,\r\n        t12 =\r\n          n14 * n33 * n42 -\r\n          n13 * n34 * n42 -\r\n          n14 * n32 * n43 +\r\n          n12 * n34 * n43 +\r\n          n13 * n32 * n44 -\r\n          n12 * n33 * n44,\r\n        t13 =\r\n          n13 * n24 * n42 -\r\n          n14 * n23 * n42 +\r\n          n14 * n22 * n43 -\r\n          n12 * n24 * n43 -\r\n          n13 * n22 * n44 +\r\n          n12 * n23 * n44,\r\n        t14 =\r\n          n14 * n23 * n32 -\r\n          n13 * n24 * n32 -\r\n          n14 * n22 * n33 +\r\n          n12 * n24 * n33 +\r\n          n13 * n22 * n34 -\r\n          n12 * n23 * n34;\r\n      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n      const detInv = 1 / det;\r\n      te[0] = t11 * detInv;\r\n      te[1] =\r\n        (n24 * n33 * n41 -\r\n          n23 * n34 * n41 -\r\n          n24 * n31 * n43 +\r\n          n21 * n34 * n43 +\r\n          n23 * n31 * n44 -\r\n          n21 * n33 * n44) *\r\n        detInv;\r\n      te[2] =\r\n        (n22 * n34 * n41 -\r\n          n24 * n32 * n41 +\r\n          n24 * n31 * n42 -\r\n          n21 * n34 * n42 -\r\n          n22 * n31 * n44 +\r\n          n21 * n32 * n44) *\r\n        detInv;\r\n      te[3] =\r\n        (n23 * n32 * n41 -\r\n          n22 * n33 * n41 -\r\n          n23 * n31 * n42 +\r\n          n21 * n33 * n42 +\r\n          n22 * n31 * n43 -\r\n          n21 * n32 * n43) *\r\n        detInv;\r\n      te[4] = t12 * detInv;\r\n      te[5] =\r\n        (n13 * n34 * n41 -\r\n          n14 * n33 * n41 +\r\n          n14 * n31 * n43 -\r\n          n11 * n34 * n43 -\r\n          n13 * n31 * n44 +\r\n          n11 * n33 * n44) *\r\n        detInv;\r\n      te[6] =\r\n        (n14 * n32 * n41 -\r\n          n12 * n34 * n41 -\r\n          n14 * n31 * n42 +\r\n          n11 * n34 * n42 +\r\n          n12 * n31 * n44 -\r\n          n11 * n32 * n44) *\r\n        detInv;\r\n      te[7] =\r\n        (n12 * n33 * n41 -\r\n          n13 * n32 * n41 +\r\n          n13 * n31 * n42 -\r\n          n11 * n33 * n42 -\r\n          n12 * n31 * n43 +\r\n          n11 * n32 * n43) *\r\n        detInv;\r\n      te[8] = t13 * detInv;\r\n      te[9] =\r\n        (n14 * n23 * n41 -\r\n          n13 * n24 * n41 -\r\n          n14 * n21 * n43 +\r\n          n11 * n24 * n43 +\r\n          n13 * n21 * n44 -\r\n          n11 * n23 * n44) *\r\n        detInv;\r\n      te[10] =\r\n        (n12 * n24 * n41 -\r\n          n14 * n22 * n41 +\r\n          n14 * n21 * n42 -\r\n          n11 * n24 * n42 -\r\n          n12 * n21 * n44 +\r\n          n11 * n22 * n44) *\r\n        detInv;\r\n      te[11] =\r\n        (n13 * n22 * n41 -\r\n          n12 * n23 * n41 -\r\n          n13 * n21 * n42 +\r\n          n11 * n23 * n42 +\r\n          n12 * n21 * n43 -\r\n          n11 * n22 * n43) *\r\n        detInv;\r\n      te[12] = t14 * detInv;\r\n      te[13] =\r\n        (n13 * n24 * n31 -\r\n          n14 * n23 * n31 +\r\n          n14 * n21 * n33 -\r\n          n11 * n24 * n33 -\r\n          n13 * n21 * n34 +\r\n          n11 * n23 * n34) *\r\n        detInv;\r\n      te[14] =\r\n        (n14 * n22 * n31 -\r\n          n12 * n24 * n31 -\r\n          n14 * n21 * n32 +\r\n          n11 * n24 * n32 +\r\n          n12 * n21 * n34 -\r\n          n11 * n22 * n34) *\r\n        detInv;\r\n      te[15] =\r\n        (n12 * n23 * n31 -\r\n          n13 * n22 * n31 +\r\n          n13 * n21 * n32 -\r\n          n11 * n23 * n32 -\r\n          n12 * n21 * n33 +\r\n          n11 * n22 * n33) *\r\n        detInv;\r\n      return this;\r\n    }\r\n\r\n    scale(v) {\r\n      const te = this.elements;\r\n      const x = v.x,\r\n        y = v.y,\r\n        z = v.z;\r\n      te[0] *= x;\r\n      te[4] *= y;\r\n      te[8] *= z;\r\n      te[1] *= x;\r\n      te[5] *= y;\r\n      te[9] *= z;\r\n      te[2] *= x;\r\n      te[6] *= y;\r\n      te[10] *= z;\r\n      te[3] *= x;\r\n      te[7] *= y;\r\n      te[11] *= z;\r\n      return this;\r\n    }\r\n\r\n    getMaxScaleOnAxis() {\r\n      const te = this.elements;\r\n      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\r\n      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\r\n      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\r\n    }\r\n\r\n    makeTranslation(x, y, z) {\r\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    makeRotationX(theta) {\r\n      const c = Math.cos(theta),\r\n        s = Math.sin(theta);\r\n      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    makeRotationY(theta) {\r\n      const c = Math.cos(theta),\r\n        s = Math.sin(theta);\r\n      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    makeRotationZ(theta) {\r\n      const c = Math.cos(theta),\r\n        s = Math.sin(theta);\r\n      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    makeRotationAxis(axis, angle) {\r\n      // Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n      const c = Math.cos(angle);\r\n      const s = Math.sin(angle);\r\n      const t = 1 - c;\r\n      const x = axis.x,\r\n        y = axis.y,\r\n        z = axis.z;\r\n      const tx = t * x,\r\n        ty = t * y;\r\n      this.set(\r\n        tx * x + c,\r\n        tx * y - s * z,\r\n        tx * z + s * y,\r\n        0,\r\n        tx * y + s * z,\r\n        ty * y + c,\r\n        ty * z - s * x,\r\n        0,\r\n        tx * z - s * y,\r\n        ty * z + s * x,\r\n        t * z * z + c,\r\n        0,\r\n        0,\r\n        0,\r\n        0,\r\n        1,\r\n      );\r\n      return this;\r\n    }\r\n\r\n    makeScale(x, y, z) {\r\n      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    makeShear(xy, xz, yx, yz, zx, zy) {\r\n      this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);\r\n      return this;\r\n    }\r\n\r\n    compose(position, quaternion, scale) {\r\n      const te = this.elements;\r\n      const x = quaternion._x,\r\n        y = quaternion._y,\r\n        z = quaternion._z,\r\n        w = quaternion._w;\r\n      const x2 = x + x,\r\n        y2 = y + y,\r\n        z2 = z + z;\r\n      const xx = x * x2,\r\n        xy = x * y2,\r\n        xz = x * z2;\r\n      const yy = y * y2,\r\n        yz = y * z2,\r\n        zz = z * z2;\r\n      const wx = w * x2,\r\n        wy = w * y2,\r\n        wz = w * z2;\r\n      const sx = scale.x,\r\n        sy = scale.y,\r\n        sz = scale.z;\r\n      te[0] = (1 - (yy + zz)) * sx;\r\n      te[1] = (xy + wz) * sx;\r\n      te[2] = (xz - wy) * sx;\r\n      te[3] = 0;\r\n      te[4] = (xy - wz) * sy;\r\n      te[5] = (1 - (xx + zz)) * sy;\r\n      te[6] = (yz + wx) * sy;\r\n      te[7] = 0;\r\n      te[8] = (xz + wy) * sz;\r\n      te[9] = (yz - wx) * sz;\r\n      te[10] = (1 - (xx + yy)) * sz;\r\n      te[11] = 0;\r\n      te[12] = position.x;\r\n      te[13] = position.y;\r\n      te[14] = position.z;\r\n      te[15] = 1;\r\n      return this;\r\n    }\r\n\r\n    decompose(position, quaternion, scale) {\r\n      const te = this.elements;\r\n\r\n      let sx = _v1$5.set(te[0], te[1], te[2]).length();\r\n\r\n      const sy = _v1$5.set(te[4], te[5], te[6]).length();\r\n\r\n      const sz = _v1$5.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\r\n\r\n      const det = this.determinant();\r\n      if (det < 0) sx = -sx;\r\n      position.x = te[12];\r\n      position.y = te[13];\r\n      position.z = te[14]; // scale the rotation part\r\n\r\n      _m1$2.copy(this);\r\n\r\n      const invSX = 1 / sx;\r\n      const invSY = 1 / sy;\r\n      const invSZ = 1 / sz;\r\n      _m1$2.elements[0] *= invSX;\r\n      _m1$2.elements[1] *= invSX;\r\n      _m1$2.elements[2] *= invSX;\r\n      _m1$2.elements[4] *= invSY;\r\n      _m1$2.elements[5] *= invSY;\r\n      _m1$2.elements[6] *= invSY;\r\n      _m1$2.elements[8] *= invSZ;\r\n      _m1$2.elements[9] *= invSZ;\r\n      _m1$2.elements[10] *= invSZ;\r\n      quaternion.setFromRotationMatrix(_m1$2);\r\n      scale.x = sx;\r\n      scale.y = sy;\r\n      scale.z = sz;\r\n      return this;\r\n    }\r\n\r\n    makePerspective(left, right, top, bottom, near, far) {\r\n      if (far === undefined) {\r\n        console.warn(\r\n          'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.',\r\n        );\r\n      }\r\n\r\n      const te = this.elements;\r\n      const x = (2 * near) / (right - left);\r\n      const y = (2 * near) / (top - bottom);\r\n      const a = (right + left) / (right - left);\r\n      const b = (top + bottom) / (top - bottom);\r\n      const c = -(far + near) / (far - near);\r\n      const d = (-2 * far * near) / (far - near);\r\n      te[0] = x;\r\n      te[4] = 0;\r\n      te[8] = a;\r\n      te[12] = 0;\r\n      te[1] = 0;\r\n      te[5] = y;\r\n      te[9] = b;\r\n      te[13] = 0;\r\n      te[2] = 0;\r\n      te[6] = 0;\r\n      te[10] = c;\r\n      te[14] = d;\r\n      te[3] = 0;\r\n      te[7] = 0;\r\n      te[11] = -1;\r\n      te[15] = 0;\r\n      return this;\r\n    }\r\n\r\n    makeOrthographic(left, right, top, bottom, near, far) {\r\n      const te = this.elements;\r\n      const w = 1.0 / (right - left);\r\n      const h = 1.0 / (top - bottom);\r\n      const p = 1.0 / (far - near);\r\n      const x = (right + left) * w;\r\n      const y = (top + bottom) * h;\r\n      const z = (far + near) * p;\r\n      te[0] = 2 * w;\r\n      te[4] = 0;\r\n      te[8] = 0;\r\n      te[12] = -x;\r\n      te[1] = 0;\r\n      te[5] = 2 * h;\r\n      te[9] = 0;\r\n      te[13] = -y;\r\n      te[2] = 0;\r\n      te[6] = 0;\r\n      te[10] = -2 * p;\r\n      te[14] = -z;\r\n      te[3] = 0;\r\n      te[7] = 0;\r\n      te[11] = 0;\r\n      te[15] = 1;\r\n      return this;\r\n    }\r\n\r\n    equals(matrix) {\r\n      const te = this.elements;\r\n      const me = matrix.elements;\r\n\r\n      for (let i = 0; i < 16; i++) {\r\n        if (te[i] !== me[i]) return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      for (let i = 0; i < 16; i++) {\r\n        this.elements[i] = array[i + offset];\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      const te = this.elements;\r\n      array[offset] = te[0];\r\n      array[offset + 1] = te[1];\r\n      array[offset + 2] = te[2];\r\n      array[offset + 3] = te[3];\r\n      array[offset + 4] = te[4];\r\n      array[offset + 5] = te[5];\r\n      array[offset + 6] = te[6];\r\n      array[offset + 7] = te[7];\r\n      array[offset + 8] = te[8];\r\n      array[offset + 9] = te[9];\r\n      array[offset + 10] = te[10];\r\n      array[offset + 11] = te[11];\r\n      array[offset + 12] = te[12];\r\n      array[offset + 13] = te[13];\r\n      array[offset + 14] = te[14];\r\n      array[offset + 15] = te[15];\r\n      return array;\r\n    }\r\n  }\r\n\r\n  Matrix4.prototype.isMatrix4 = true;\r\n\r\n  const _v1$5 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _m1$2 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _zero = /*@__PURE__*/ new Vector3(0, 0, 0);\r\n\r\n  const _one = /*@__PURE__*/ new Vector3(1, 1, 1);\r\n\r\n  const _x = /*@__PURE__*/ new Vector3();\r\n\r\n  const _y = /*@__PURE__*/ new Vector3();\r\n\r\n  const _z = /*@__PURE__*/ new Vector3();\r\n\r\n  const _matrix$1 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _quaternion$3 = /*@__PURE__*/ new Quaternion();\r\n\r\n  class Euler {\r\n    constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\r\n      this._x = x;\r\n      this._y = y;\r\n      this._z = z;\r\n      this._order = order;\r\n    }\r\n\r\n    get x() {\r\n      return this._x;\r\n    }\r\n\r\n    set x(value) {\r\n      this._x = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get y() {\r\n      return this._y;\r\n    }\r\n\r\n    set y(value) {\r\n      this._y = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get z() {\r\n      return this._z;\r\n    }\r\n\r\n    set z(value) {\r\n      this._z = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    get order() {\r\n      return this._order;\r\n    }\r\n\r\n    set order(value) {\r\n      this._order = value;\r\n\r\n      this._onChangeCallback();\r\n    }\r\n\r\n    set(x, y, z, order) {\r\n      this._x = x;\r\n      this._y = y;\r\n      this._z = z;\r\n      this._order = order || this._order;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this._x, this._y, this._z, this._order);\r\n    }\r\n\r\n    copy(euler) {\r\n      this._x = euler._x;\r\n      this._y = euler._y;\r\n      this._z = euler._z;\r\n      this._order = euler._order;\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromRotationMatrix(m, order, update) {\r\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n      const te = m.elements;\r\n      const m11 = te[0],\r\n        m12 = te[4],\r\n        m13 = te[8];\r\n      const m21 = te[1],\r\n        m22 = te[5],\r\n        m23 = te[9];\r\n      const m31 = te[2],\r\n        m32 = te[6],\r\n        m33 = te[10];\r\n      order = order || this._order;\r\n\r\n      switch (order) {\r\n        case 'XYZ':\r\n          this._y = Math.asin(clamp(m13, -1, 1));\r\n\r\n          if (Math.abs(m13) < 0.9999999) {\r\n            this._x = Math.atan2(-m23, m33);\r\n            this._z = Math.atan2(-m12, m11);\r\n          } else {\r\n            this._x = Math.atan2(m32, m22);\r\n            this._z = 0;\r\n          }\r\n\r\n          break;\r\n\r\n        case 'YXZ':\r\n          this._x = Math.asin(-clamp(m23, -1, 1));\r\n\r\n          if (Math.abs(m23) < 0.9999999) {\r\n            this._y = Math.atan2(m13, m33);\r\n            this._z = Math.atan2(m21, m22);\r\n          } else {\r\n            this._y = Math.atan2(-m31, m11);\r\n            this._z = 0;\r\n          }\r\n\r\n          break;\r\n\r\n        case 'ZXY':\r\n          this._x = Math.asin(clamp(m32, -1, 1));\r\n\r\n          if (Math.abs(m32) < 0.9999999) {\r\n            this._y = Math.atan2(-m31, m33);\r\n            this._z = Math.atan2(-m12, m22);\r\n          } else {\r\n            this._y = 0;\r\n            this._z = Math.atan2(m21, m11);\r\n          }\r\n\r\n          break;\r\n\r\n        case 'ZYX':\r\n          this._y = Math.asin(-clamp(m31, -1, 1));\r\n\r\n          if (Math.abs(m31) < 0.9999999) {\r\n            this._x = Math.atan2(m32, m33);\r\n            this._z = Math.atan2(m21, m11);\r\n          } else {\r\n            this._x = 0;\r\n            this._z = Math.atan2(-m12, m22);\r\n          }\r\n\r\n          break;\r\n\r\n        case 'YZX':\r\n          this._z = Math.asin(clamp(m21, -1, 1));\r\n\r\n          if (Math.abs(m21) < 0.9999999) {\r\n            this._x = Math.atan2(-m23, m22);\r\n            this._y = Math.atan2(-m31, m11);\r\n          } else {\r\n            this._x = 0;\r\n            this._y = Math.atan2(m13, m33);\r\n          }\r\n\r\n          break;\r\n\r\n        case 'XZY':\r\n          this._z = Math.asin(-clamp(m12, -1, 1));\r\n\r\n          if (Math.abs(m12) < 0.9999999) {\r\n            this._x = Math.atan2(m32, m22);\r\n            this._y = Math.atan2(m13, m11);\r\n          } else {\r\n            this._x = Math.atan2(-m23, m33);\r\n            this._y = 0;\r\n          }\r\n\r\n          break;\r\n\r\n        default:\r\n          console.warn(\r\n            'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order,\r\n          );\r\n      }\r\n\r\n      this._order = order;\r\n      if (update !== false) this._onChangeCallback();\r\n      return this;\r\n    }\r\n\r\n    setFromQuaternion(q, order, update) {\r\n      _matrix$1.makeRotationFromQuaternion(q);\r\n\r\n      return this.setFromRotationMatrix(_matrix$1, order, update);\r\n    }\r\n\r\n    setFromVector3(v, order) {\r\n      return this.set(v.x, v.y, v.z, order || this._order);\r\n    }\r\n\r\n    reorder(newOrder) {\r\n      // WARNING: this discards revolution information -bhouston\r\n      _quaternion$3.setFromEuler(this);\r\n\r\n      return this.setFromQuaternion(_quaternion$3, newOrder);\r\n    }\r\n\r\n    equals(euler) {\r\n      return (\r\n        euler._x === this._x &&\r\n        euler._y === this._y &&\r\n        euler._z === this._z &&\r\n        euler._order === this._order\r\n      );\r\n    }\r\n\r\n    fromArray(array) {\r\n      this._x = array[0];\r\n      this._y = array[1];\r\n      this._z = array[2];\r\n      if (array[3] !== undefined) this._order = array[3];\r\n\r\n      this._onChangeCallback();\r\n\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this._x;\r\n      array[offset + 1] = this._y;\r\n      array[offset + 2] = this._z;\r\n      array[offset + 3] = this._order;\r\n      return array;\r\n    }\r\n\r\n    toVector3(optionalResult) {\r\n      if (optionalResult) {\r\n        return optionalResult.set(this._x, this._y, this._z);\r\n      } else {\r\n        return new Vector3(this._x, this._y, this._z);\r\n      }\r\n    }\r\n\r\n    _onChange(callback) {\r\n      this._onChangeCallback = callback;\r\n      return this;\r\n    }\r\n\r\n    _onChangeCallback() {}\r\n  }\r\n\r\n  Euler.prototype.isEuler = true;\r\n  Euler.DefaultOrder = 'XYZ';\r\n  Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\r\n\r\n  class Layers {\r\n    constructor() {\r\n      this.mask = 1 | 0;\r\n    }\r\n\r\n    set(channel) {\r\n      this.mask = (1 << channel) | 0;\r\n    }\r\n\r\n    enable(channel) {\r\n      this.mask |= (1 << channel) | 0;\r\n    }\r\n\r\n    enableAll() {\r\n      this.mask = 0xffffffff | 0;\r\n    }\r\n\r\n    toggle(channel) {\r\n      this.mask ^= (1 << channel) | 0;\r\n    }\r\n\r\n    disable(channel) {\r\n      this.mask &= ~((1 << channel) | 0);\r\n    }\r\n\r\n    disableAll() {\r\n      this.mask = 0;\r\n    }\r\n\r\n    test(layers) {\r\n      return (this.mask & layers.mask) !== 0;\r\n    }\r\n  }\r\n\r\n  let _object3DId = 0;\r\n\r\n  const _v1$4 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _q1 = /*@__PURE__*/ new Quaternion();\r\n\r\n  const _m1$1 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _target = /*@__PURE__*/ new Vector3();\r\n\r\n  const _position$3 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _scale$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _quaternion$2 = /*@__PURE__*/ new Quaternion();\r\n\r\n  const _xAxis = /*@__PURE__*/ new Vector3(1, 0, 0);\r\n\r\n  const _yAxis = /*@__PURE__*/ new Vector3(0, 1, 0);\r\n\r\n  const _zAxis = /*@__PURE__*/ new Vector3(0, 0, 1);\r\n\r\n  const _addedEvent = {\r\n    type: 'added',\r\n  };\r\n  const _removedEvent = {\r\n    type: 'removed',\r\n  };\r\n\r\n  class Object3D extends EventDispatcher {\r\n    constructor() {\r\n      super();\r\n      Object.defineProperty(this, 'id', {\r\n        value: _object3DId++,\r\n      });\r\n      this.uuid = generateUUID();\r\n      this.name = '';\r\n      this.type = 'Object3D';\r\n      this.parent = null;\r\n      this.children = [];\r\n      this.up = Object3D.DefaultUp.clone();\r\n      const position = new Vector3();\r\n      const rotation = new Euler();\r\n      const quaternion = new Quaternion();\r\n      const scale = new Vector3(1, 1, 1);\r\n\r\n      function onRotationChange() {\r\n        quaternion.setFromEuler(rotation, false);\r\n      }\r\n\r\n      function onQuaternionChange() {\r\n        rotation.setFromQuaternion(quaternion, undefined, false);\r\n      }\r\n\r\n      rotation._onChange(onRotationChange);\r\n\r\n      quaternion._onChange(onQuaternionChange);\r\n\r\n      Object.defineProperties(this, {\r\n        position: {\r\n          configurable: true,\r\n          enumerable: true,\r\n          value: position,\r\n        },\r\n        rotation: {\r\n          configurable: true,\r\n          enumerable: true,\r\n          value: rotation,\r\n        },\r\n        quaternion: {\r\n          configurable: true,\r\n          enumerable: true,\r\n          value: quaternion,\r\n        },\r\n        scale: {\r\n          configurable: true,\r\n          enumerable: true,\r\n          value: scale,\r\n        },\r\n        modelViewMatrix: {\r\n          value: new Matrix4(),\r\n        },\r\n        normalMatrix: {\r\n          value: new Matrix3(),\r\n        },\r\n      });\r\n      this.matrix = new Matrix4();\r\n      this.matrixWorld = new Matrix4();\r\n      this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n      this.matrixWorldNeedsUpdate = false;\r\n      this.layers = new Layers();\r\n      this.visible = true;\r\n      this.castShadow = false;\r\n      this.receiveShadow = false;\r\n      this.frustumCulled = true;\r\n      this.renderOrder = 0;\r\n      this.animations = [];\r\n      this.userData = {};\r\n    }\r\n\r\n    onBeforeRender() {}\r\n\r\n    onAfterRender() {}\r\n\r\n    applyMatrix4(matrix) {\r\n      if (this.matrixAutoUpdate) this.updateMatrix();\r\n      this.matrix.premultiply(matrix);\r\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n      this.quaternion.premultiply(q);\r\n      return this;\r\n    }\r\n\r\n    setRotationFromAxisAngle(axis, angle) {\r\n      // assumes axis is normalized\r\n      this.quaternion.setFromAxisAngle(axis, angle);\r\n    }\r\n\r\n    setRotationFromEuler(euler) {\r\n      this.quaternion.setFromEuler(euler, true);\r\n    }\r\n\r\n    setRotationFromMatrix(m) {\r\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n      this.quaternion.setFromRotationMatrix(m);\r\n    }\r\n\r\n    setRotationFromQuaternion(q) {\r\n      // assumes q is normalized\r\n      this.quaternion.copy(q);\r\n    }\r\n\r\n    rotateOnAxis(axis, angle) {\r\n      // rotate object on axis in object space\r\n      // axis is assumed to be normalized\r\n      _q1.setFromAxisAngle(axis, angle);\r\n\r\n      this.quaternion.multiply(_q1);\r\n      return this;\r\n    }\r\n\r\n    rotateOnWorldAxis(axis, angle) {\r\n      // rotate object on axis in world space\r\n      // axis is assumed to be normalized\r\n      // method assumes no rotated parent\r\n      _q1.setFromAxisAngle(axis, angle);\r\n\r\n      this.quaternion.premultiply(_q1);\r\n      return this;\r\n    }\r\n\r\n    rotateX(angle) {\r\n      return this.rotateOnAxis(_xAxis, angle);\r\n    }\r\n\r\n    rotateY(angle) {\r\n      return this.rotateOnAxis(_yAxis, angle);\r\n    }\r\n\r\n    rotateZ(angle) {\r\n      return this.rotateOnAxis(_zAxis, angle);\r\n    }\r\n\r\n    translateOnAxis(axis, distance) {\r\n      // translate object by distance along axis in object space\r\n      // axis is assumed to be normalized\r\n      _v1$4.copy(axis).applyQuaternion(this.quaternion);\r\n\r\n      this.position.add(_v1$4.multiplyScalar(distance));\r\n      return this;\r\n    }\r\n\r\n    translateX(distance) {\r\n      return this.translateOnAxis(_xAxis, distance);\r\n    }\r\n\r\n    translateY(distance) {\r\n      return this.translateOnAxis(_yAxis, distance);\r\n    }\r\n\r\n    translateZ(distance) {\r\n      return this.translateOnAxis(_zAxis, distance);\r\n    }\r\n\r\n    localToWorld(vector) {\r\n      return vector.applyMatrix4(this.matrixWorld);\r\n    }\r\n\r\n    worldToLocal(vector) {\r\n      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\r\n    }\r\n\r\n    lookAt(x, y, z) {\r\n      // This method does not support objects having non-uniformly-scaled parent(s)\r\n      if (x.isVector3) {\r\n        _target.copy(x);\r\n      } else {\r\n        _target.set(x, y, z);\r\n      }\r\n\r\n      const parent = this.parent;\r\n      this.updateWorldMatrix(true, false);\r\n\r\n      _position$3.setFromMatrixPosition(this.matrixWorld);\r\n\r\n      if (this.isCamera || this.isLight) {\r\n        _m1$1.lookAt(_position$3, _target, this.up);\r\n      } else {\r\n        _m1$1.lookAt(_target, _position$3, this.up);\r\n      }\r\n\r\n      this.quaternion.setFromRotationMatrix(_m1$1);\r\n\r\n      if (parent) {\r\n        _m1$1.extractRotation(parent.matrixWorld);\r\n\r\n        _q1.setFromRotationMatrix(_m1$1);\r\n\r\n        this.quaternion.premultiply(_q1.invert());\r\n      }\r\n    }\r\n\r\n    add(object) {\r\n      if (arguments.length > 1) {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n          this.add(arguments[i]);\r\n        }\r\n\r\n        return this;\r\n      }\r\n\r\n      if (object === this) {\r\n        console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\r\n        return this;\r\n      }\r\n\r\n      if (object && object.isObject3D) {\r\n        if (object.parent !== null) {\r\n          object.parent.remove(object);\r\n        }\r\n\r\n        object.parent = this;\r\n        this.children.push(object);\r\n        object.dispatchEvent(_addedEvent);\r\n      } else {\r\n        console.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    remove(object) {\r\n      if (arguments.length > 1) {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n          this.remove(arguments[i]);\r\n        }\r\n\r\n        return this;\r\n      }\r\n\r\n      const index = this.children.indexOf(object);\r\n\r\n      if (index !== -1) {\r\n        object.parent = null;\r\n        this.children.splice(index, 1);\r\n        object.dispatchEvent(_removedEvent);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    removeFromParent() {\r\n      const parent = this.parent;\r\n\r\n      if (parent !== null) {\r\n        parent.remove(this);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    clear() {\r\n      for (let i = 0; i < this.children.length; i++) {\r\n        const object = this.children[i];\r\n        object.parent = null;\r\n        object.dispatchEvent(_removedEvent);\r\n      }\r\n\r\n      this.children.length = 0;\r\n      return this;\r\n    }\r\n\r\n    attach(object) {\r\n      // adds object as a child of this, while maintaining the object's world transform\r\n      this.updateWorldMatrix(true, false);\r\n\r\n      _m1$1.copy(this.matrixWorld).invert();\r\n\r\n      if (object.parent !== null) {\r\n        object.parent.updateWorldMatrix(true, false);\r\n\r\n        _m1$1.multiply(object.parent.matrixWorld);\r\n      }\r\n\r\n      object.applyMatrix4(_m1$1);\r\n      this.add(object);\r\n      object.updateWorldMatrix(false, true);\r\n      return this;\r\n    }\r\n\r\n    getObjectById(id) {\r\n      return this.getObjectByProperty('id', id);\r\n    }\r\n\r\n    getObjectByName(name) {\r\n      return this.getObjectByProperty('name', name);\r\n    }\r\n\r\n    getObjectByProperty(name, value) {\r\n      if (this[name] === value) return this;\r\n\r\n      for (let i = 0, l = this.children.length; i < l; i++) {\r\n        const child = this.children[i];\r\n        const object = child.getObjectByProperty(name, value);\r\n\r\n        if (object !== undefined) {\r\n          return object;\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    getWorldPosition(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Object3D: .getWorldPosition() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      this.updateWorldMatrix(true, false);\r\n      return target.setFromMatrixPosition(this.matrixWorld);\r\n    }\r\n\r\n    getWorldQuaternion(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\r\n        target = new Quaternion();\r\n      }\r\n\r\n      this.updateWorldMatrix(true, false);\r\n      this.matrixWorld.decompose(_position$3, target, _scale$2);\r\n      return target;\r\n    }\r\n\r\n    getWorldScale(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Object3D: .getWorldScale() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      this.updateWorldMatrix(true, false);\r\n      this.matrixWorld.decompose(_position$3, _quaternion$2, target);\r\n      return target;\r\n    }\r\n\r\n    getWorldDirection(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Object3D: .getWorldDirection() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      this.updateWorldMatrix(true, false);\r\n      const e = this.matrixWorld.elements;\r\n      return target.set(e[8], e[9], e[10]).normalize();\r\n    }\r\n\r\n    raycast() {}\r\n\r\n    traverse(callback) {\r\n      callback(this);\r\n      const children = this.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        children[i].traverse(callback);\r\n      }\r\n    }\r\n\r\n    traverseVisible(callback) {\r\n      if (this.visible === false) return;\r\n      callback(this);\r\n      const children = this.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        children[i].traverseVisible(callback);\r\n      }\r\n    }\r\n\r\n    traverseAncestors(callback) {\r\n      const parent = this.parent;\r\n\r\n      if (parent !== null) {\r\n        callback(parent);\r\n        parent.traverseAncestors(callback);\r\n      }\r\n    }\r\n\r\n    updateMatrix() {\r\n      this.matrix.compose(this.position, this.quaternion, this.scale);\r\n      this.matrixWorldNeedsUpdate = true;\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      if (this.matrixAutoUpdate) this.updateMatrix();\r\n\r\n      if (this.matrixWorldNeedsUpdate || force) {\r\n        if (this.parent === null) {\r\n          this.matrixWorld.copy(this.matrix);\r\n        } else {\r\n          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\r\n        }\r\n\r\n        this.matrixWorldNeedsUpdate = false;\r\n        force = true;\r\n      } // update children\r\n\r\n      const children = this.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        children[i].updateMatrixWorld(force);\r\n      }\r\n    }\r\n\r\n    updateWorldMatrix(updateParents, updateChildren) {\r\n      const parent = this.parent;\r\n\r\n      if (updateParents === true && parent !== null) {\r\n        parent.updateWorldMatrix(true, false);\r\n      }\r\n\r\n      if (this.matrixAutoUpdate) this.updateMatrix();\r\n\r\n      if (this.parent === null) {\r\n        this.matrixWorld.copy(this.matrix);\r\n      } else {\r\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\r\n      } // update children\r\n\r\n      if (updateChildren === true) {\r\n        const children = this.children;\r\n\r\n        for (let i = 0, l = children.length; i < l; i++) {\r\n          children[i].updateWorldMatrix(false, true);\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON(meta) {\r\n      // meta is a string when called from JSON.stringify\r\n      const isRootObject = meta === undefined || typeof meta === 'string';\r\n      const output = {}; // meta is a hash used to collect geometries, materials.\r\n      // not providing it implies that this is the root object\r\n      // being serialized.\r\n\r\n      if (isRootObject) {\r\n        // initialize meta obj\r\n        meta = {\r\n          geometries: {},\r\n          materials: {},\r\n          textures: {},\r\n          images: {},\r\n          shapes: {},\r\n          skeletons: {},\r\n          animations: {},\r\n        };\r\n        output.metadata = {\r\n          version: 4.5,\r\n          type: 'Object',\r\n          generator: 'Object3D.toJSON',\r\n        };\r\n      } // standard Object3D serialization\r\n\r\n      const object = {};\r\n      object.uuid = this.uuid;\r\n      object.type = this.type;\r\n      if (this.name !== '') object.name = this.name;\r\n      if (this.castShadow === true) object.castShadow = true;\r\n      if (this.receiveShadow === true) object.receiveShadow = true;\r\n      if (this.visible === false) object.visible = false;\r\n      if (this.frustumCulled === false) object.frustumCulled = false;\r\n      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\r\n      if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\r\n      object.layers = this.layers.mask;\r\n      object.matrix = this.matrix.toArray();\r\n      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\r\n\r\n      if (this.isInstancedMesh) {\r\n        object.type = 'InstancedMesh';\r\n        object.count = this.count;\r\n        object.instanceMatrix = this.instanceMatrix.toJSON();\r\n        if (this.instanceColor !== null) object.instanceColor = this.instanceColor.toJSON();\r\n      } //\r\n\r\n      function serialize(library, element) {\r\n        if (library[element.uuid] === undefined) {\r\n          library[element.uuid] = element.toJSON(meta);\r\n        }\r\n\r\n        return element.uuid;\r\n      }\r\n\r\n      if (this.isMesh || this.isLine || this.isPoints) {\r\n        object.geometry = serialize(meta.geometries, this.geometry);\r\n        const parameters = this.geometry.parameters;\r\n\r\n        if (parameters !== undefined && parameters.shapes !== undefined) {\r\n          const shapes = parameters.shapes;\r\n\r\n          if (Array.isArray(shapes)) {\r\n            for (let i = 0, l = shapes.length; i < l; i++) {\r\n              const shape = shapes[i];\r\n              serialize(meta.shapes, shape);\r\n            }\r\n          } else {\r\n            serialize(meta.shapes, shapes);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.isSkinnedMesh) {\r\n        object.bindMode = this.bindMode;\r\n        object.bindMatrix = this.bindMatrix.toArray();\r\n\r\n        if (this.skeleton !== undefined) {\r\n          serialize(meta.skeletons, this.skeleton);\r\n          object.skeleton = this.skeleton.uuid;\r\n        }\r\n      }\r\n\r\n      if (this.material !== undefined) {\r\n        if (Array.isArray(this.material)) {\r\n          const uuids = [];\r\n\r\n          for (let i = 0, l = this.material.length; i < l; i++) {\r\n            uuids.push(serialize(meta.materials, this.material[i]));\r\n          }\r\n\r\n          object.material = uuids;\r\n        } else {\r\n          object.material = serialize(meta.materials, this.material);\r\n        }\r\n      } //\r\n\r\n      if (this.children.length > 0) {\r\n        object.children = [];\r\n\r\n        for (let i = 0; i < this.children.length; i++) {\r\n          object.children.push(this.children[i].toJSON(meta).object);\r\n        }\r\n      } //\r\n\r\n      if (this.animations.length > 0) {\r\n        object.animations = [];\r\n\r\n        for (let i = 0; i < this.animations.length; i++) {\r\n          const animation = this.animations[i];\r\n          object.animations.push(serialize(meta.animations, animation));\r\n        }\r\n      }\r\n\r\n      if (isRootObject) {\r\n        const geometries = extractFromCache(meta.geometries);\r\n        const materials = extractFromCache(meta.materials);\r\n        const textures = extractFromCache(meta.textures);\r\n        const images = extractFromCache(meta.images);\r\n        const shapes = extractFromCache(meta.shapes);\r\n        const skeletons = extractFromCache(meta.skeletons);\r\n        const animations = extractFromCache(meta.animations);\r\n        if (geometries.length > 0) output.geometries = geometries;\r\n        if (materials.length > 0) output.materials = materials;\r\n        if (textures.length > 0) output.textures = textures;\r\n        if (images.length > 0) output.images = images;\r\n        if (shapes.length > 0) output.shapes = shapes;\r\n        if (skeletons.length > 0) output.skeletons = skeletons;\r\n        if (animations.length > 0) output.animations = animations;\r\n      }\r\n\r\n      output.object = object;\r\n      return output; // extract data from the cache hash\r\n      // remove metadata on each item\r\n      // and return as array\r\n\r\n      function extractFromCache(cache) {\r\n        const values = [];\r\n\r\n        for (const key in cache) {\r\n          const data = cache[key];\r\n          delete data.metadata;\r\n          values.push(data);\r\n        }\r\n\r\n        return values;\r\n      }\r\n    }\r\n\r\n    clone(recursive) {\r\n      return new this.constructor().copy(this, recursive);\r\n    }\r\n\r\n    copy(source, recursive = true) {\r\n      this.name = source.name;\r\n      this.up.copy(source.up);\r\n      this.position.copy(source.position);\r\n      this.rotation.order = source.rotation.order;\r\n      this.quaternion.copy(source.quaternion);\r\n      this.scale.copy(source.scale);\r\n      this.matrix.copy(source.matrix);\r\n      this.matrixWorld.copy(source.matrixWorld);\r\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\r\n      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n      this.layers.mask = source.layers.mask;\r\n      this.visible = source.visible;\r\n      this.castShadow = source.castShadow;\r\n      this.receiveShadow = source.receiveShadow;\r\n      this.frustumCulled = source.frustumCulled;\r\n      this.renderOrder = source.renderOrder;\r\n      this.userData = JSON.parse(JSON.stringify(source.userData));\r\n\r\n      if (recursive === true) {\r\n        for (let i = 0; i < source.children.length; i++) {\r\n          const child = source.children[i];\r\n          this.add(child.clone());\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  Object3D.DefaultUp = new Vector3(0, 1, 0);\r\n  Object3D.DefaultMatrixAutoUpdate = true;\r\n  Object3D.prototype.isObject3D = true;\r\n\r\n  const _vector1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vector2$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _normalMatrix = /*@__PURE__*/ new Matrix3();\r\n\r\n  class Plane {\r\n    constructor(normal = new Vector3(1, 0, 0), constant = 0) {\r\n      // normal is assumed to be normalized\r\n      this.normal = normal;\r\n      this.constant = constant;\r\n    }\r\n\r\n    set(normal, constant) {\r\n      this.normal.copy(normal);\r\n      this.constant = constant;\r\n      return this;\r\n    }\r\n\r\n    setComponents(x, y, z, w) {\r\n      this.normal.set(x, y, z);\r\n      this.constant = w;\r\n      return this;\r\n    }\r\n\r\n    setFromNormalAndCoplanarPoint(normal, point) {\r\n      this.normal.copy(normal);\r\n      this.constant = -point.dot(this.normal);\r\n      return this;\r\n    }\r\n\r\n    setFromCoplanarPoints(a, b, c) {\r\n      const normal = _vector1.subVectors(c, b).cross(_vector2$1.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n      this.setFromNormalAndCoplanarPoint(normal, a);\r\n      return this;\r\n    }\r\n\r\n    copy(plane) {\r\n      this.normal.copy(plane.normal);\r\n      this.constant = plane.constant;\r\n      return this;\r\n    }\r\n\r\n    normalize() {\r\n      // Note: will lead to a divide by zero if the plane is invalid.\r\n      const inverseNormalLength = 1.0 / this.normal.length();\r\n      this.normal.multiplyScalar(inverseNormalLength);\r\n      this.constant *= inverseNormalLength;\r\n      return this;\r\n    }\r\n\r\n    negate() {\r\n      this.constant *= -1;\r\n      this.normal.negate();\r\n      return this;\r\n    }\r\n\r\n    distanceToPoint(point) {\r\n      return this.normal.dot(point) + this.constant;\r\n    }\r\n\r\n    distanceToSphere(sphere) {\r\n      return this.distanceToPoint(sphere.center) - sphere.radius;\r\n    }\r\n\r\n    projectPoint(point, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Plane: .projectPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\r\n    }\r\n\r\n    intersectLine(line, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Plane: .intersectLine() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      const direction = line.delta(_vector1);\r\n      const denominator = this.normal.dot(direction);\r\n\r\n      if (denominator === 0) {\r\n        // line is coplanar, return origin\r\n        if (this.distanceToPoint(line.start) === 0) {\r\n          return target.copy(line.start);\r\n        } // Unsure if this is the correct method to handle this case.\r\n\r\n        return null;\r\n      }\r\n\r\n      const t = -(line.start.dot(this.normal) + this.constant) / denominator;\r\n\r\n      if (t < 0 || t > 1) {\r\n        return null;\r\n      }\r\n\r\n      return target.copy(direction).multiplyScalar(t).add(line.start);\r\n    }\r\n\r\n    intersectsLine(line) {\r\n      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n      const startSign = this.distanceToPoint(line.start);\r\n      const endSign = this.distanceToPoint(line.end);\r\n      return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      return box.intersectsPlane(this);\r\n    }\r\n\r\n    intersectsSphere(sphere) {\r\n      return sphere.intersectsPlane(this);\r\n    }\r\n\r\n    coplanarPoint(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Plane: .coplanarPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.copy(this.normal).multiplyScalar(-this.constant);\r\n    }\r\n\r\n    applyMatrix4(matrix, optionalNormalMatrix) {\r\n      const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\r\n\r\n      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\r\n      const normal = this.normal.applyMatrix3(normalMatrix).normalize();\r\n      this.constant = -referencePoint.dot(normal);\r\n      return this;\r\n    }\r\n\r\n    translate(offset) {\r\n      this.constant -= offset.dot(this.normal);\r\n      return this;\r\n    }\r\n\r\n    equals(plane) {\r\n      return plane.normal.equals(this.normal) && plane.constant === this.constant;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  Plane.prototype.isPlane = true;\r\n\r\n  const _v0$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v1$3 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v2$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v3$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vab = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vac = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vbc = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vap = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vbp = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vcp = /*@__PURE__*/ new Vector3();\r\n\r\n  class Triangle {\r\n    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {\r\n      this.a = a;\r\n      this.b = b;\r\n      this.c = c;\r\n    }\r\n\r\n    static getNormal(a, b, c, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Triangle: .getNormal() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      target.subVectors(c, b);\r\n\r\n      _v0$1.subVectors(a, b);\r\n\r\n      target.cross(_v0$1);\r\n      const targetLengthSq = target.lengthSq();\r\n\r\n      if (targetLengthSq > 0) {\r\n        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\r\n      }\r\n\r\n      return target.set(0, 0, 0);\r\n    } // static/instance method to calculate barycentric coordinates\r\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\r\n    static getBarycoord(point, a, b, c, target) {\r\n      _v0$1.subVectors(c, a);\r\n\r\n      _v1$3.subVectors(b, a);\r\n\r\n      _v2$2.subVectors(point, a);\r\n\r\n      const dot00 = _v0$1.dot(_v0$1);\r\n\r\n      const dot01 = _v0$1.dot(_v1$3);\r\n\r\n      const dot02 = _v0$1.dot(_v2$2);\r\n\r\n      const dot11 = _v1$3.dot(_v1$3);\r\n\r\n      const dot12 = _v1$3.dot(_v2$2);\r\n\r\n      const denom = dot00 * dot11 - dot01 * dot01;\r\n\r\n      if (target === undefined) {\r\n        console.warn('THREE.Triangle: .getBarycoord() target is now required');\r\n        target = new Vector3();\r\n      } // collinear or singular triangle\r\n\r\n      if (denom === 0) {\r\n        // arbitrary location outside of triangle?\r\n        // not sure if this is the best idea, maybe should be returning undefined\r\n        return target.set(-2, -1, -1);\r\n      }\r\n\r\n      const invDenom = 1 / denom;\r\n      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\r\n      const v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\r\n\r\n      return target.set(1 - u - v, v, u);\r\n    }\r\n\r\n    static containsPoint(point, a, b, c) {\r\n      this.getBarycoord(point, a, b, c, _v3$1);\r\n      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;\r\n    }\r\n\r\n    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\r\n      this.getBarycoord(point, p1, p2, p3, _v3$1);\r\n      target.set(0, 0);\r\n      target.addScaledVector(uv1, _v3$1.x);\r\n      target.addScaledVector(uv2, _v3$1.y);\r\n      target.addScaledVector(uv3, _v3$1.z);\r\n      return target;\r\n    }\r\n\r\n    static isFrontFacing(a, b, c, direction) {\r\n      _v0$1.subVectors(c, b);\r\n\r\n      _v1$3.subVectors(a, b); // strictly front facing\r\n\r\n      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\r\n    }\r\n\r\n    set(a, b, c) {\r\n      this.a.copy(a);\r\n      this.b.copy(b);\r\n      this.c.copy(c);\r\n      return this;\r\n    }\r\n\r\n    setFromPointsAndIndices(points, i0, i1, i2) {\r\n      this.a.copy(points[i0]);\r\n      this.b.copy(points[i1]);\r\n      this.c.copy(points[i2]);\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(triangle) {\r\n      this.a.copy(triangle.a);\r\n      this.b.copy(triangle.b);\r\n      this.c.copy(triangle.c);\r\n      return this;\r\n    }\r\n\r\n    getArea() {\r\n      _v0$1.subVectors(this.c, this.b);\r\n\r\n      _v1$3.subVectors(this.a, this.b);\r\n\r\n      return _v0$1.cross(_v1$3).length() * 0.5;\r\n    }\r\n\r\n    getMidpoint(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Triangle: .getMidpoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target\r\n        .addVectors(this.a, this.b)\r\n        .add(this.c)\r\n        .multiplyScalar(1 / 3);\r\n    }\r\n\r\n    getNormal(target) {\r\n      return Triangle.getNormal(this.a, this.b, this.c, target);\r\n    }\r\n\r\n    getPlane(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Triangle: .getPlane() target is now required');\r\n        target = new Plane();\r\n      }\r\n\r\n      return target.setFromCoplanarPoints(this.a, this.b, this.c);\r\n    }\r\n\r\n    getBarycoord(point, target) {\r\n      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\r\n    }\r\n\r\n    getUV(point, uv1, uv2, uv3, target) {\r\n      return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\r\n    }\r\n\r\n    containsPoint(point) {\r\n      return Triangle.containsPoint(point, this.a, this.b, this.c);\r\n    }\r\n\r\n    isFrontFacing(direction) {\r\n      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      return box.intersectsTriangle(this);\r\n    }\r\n\r\n    closestPointToPoint(p, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Triangle: .closestPointToPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      const a = this.a,\r\n        b = this.b,\r\n        c = this.c;\r\n      let v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n      // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n      // under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n      // basically, we're distinguishing which of the voronoi regions of the triangle\r\n      // the point lies in with the minimum amount of redundant computation.\r\n\r\n      _vab.subVectors(b, a);\r\n\r\n      _vac.subVectors(c, a);\r\n\r\n      _vap.subVectors(p, a);\r\n\r\n      const d1 = _vab.dot(_vap);\r\n\r\n      const d2 = _vac.dot(_vap);\r\n\r\n      if (d1 <= 0 && d2 <= 0) {\r\n        // vertex region of A; barycentric coords (1, 0, 0)\r\n        return target.copy(a);\r\n      }\r\n\r\n      _vbp.subVectors(p, b);\r\n\r\n      const d3 = _vab.dot(_vbp);\r\n\r\n      const d4 = _vac.dot(_vbp);\r\n\r\n      if (d3 >= 0 && d4 <= d3) {\r\n        // vertex region of B; barycentric coords (0, 1, 0)\r\n        return target.copy(b);\r\n      }\r\n\r\n      const vc = d1 * d4 - d3 * d2;\r\n\r\n      if (vc <= 0 && d1 >= 0 && d3 <= 0) {\r\n        v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\r\n\r\n        return target.copy(a).addScaledVector(_vab, v);\r\n      }\r\n\r\n      _vcp.subVectors(p, c);\r\n\r\n      const d5 = _vab.dot(_vcp);\r\n\r\n      const d6 = _vac.dot(_vcp);\r\n\r\n      if (d6 >= 0 && d5 <= d6) {\r\n        // vertex region of C; barycentric coords (0, 0, 1)\r\n        return target.copy(c);\r\n      }\r\n\r\n      const vb = d5 * d2 - d1 * d6;\r\n\r\n      if (vb <= 0 && d2 >= 0 && d6 <= 0) {\r\n        w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\r\n\r\n        return target.copy(a).addScaledVector(_vac, w);\r\n      }\r\n\r\n      const va = d3 * d6 - d5 * d4;\r\n\r\n      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\r\n        _vbc.subVectors(c, b);\r\n\r\n        w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\r\n\r\n        return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\r\n      } // face region\r\n\r\n      const denom = 1 / (va + vb + vc); // u = va * denom\r\n\r\n      v = vb * denom;\r\n      w = vc * denom;\r\n      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\r\n    }\r\n\r\n    equals(triangle) {\r\n      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\r\n    }\r\n  }\r\n\r\n  let materialId = 0;\r\n\r\n  class Material extends EventDispatcher {\r\n    constructor() {\r\n      super();\r\n      Object.defineProperty(this, 'id', {\r\n        value: materialId++,\r\n      });\r\n      this.uuid = generateUUID();\r\n      this.name = '';\r\n      this.type = 'Material';\r\n      this.fog = true;\r\n      this.blending = NormalBlending;\r\n      this.side = FrontSide;\r\n      this.vertexColors = false;\r\n      this.opacity = 1;\r\n      this.transparent = false;\r\n      this.blendSrc = SrcAlphaFactor;\r\n      this.blendDst = OneMinusSrcAlphaFactor;\r\n      this.blendEquation = AddEquation;\r\n      this.blendSrcAlpha = null;\r\n      this.blendDstAlpha = null;\r\n      this.blendEquationAlpha = null;\r\n      this.depthFunc = LessEqualDepth;\r\n      this.depthTest = true;\r\n      this.depthWrite = true;\r\n      this.stencilWriteMask = 0xff;\r\n      this.stencilFunc = AlwaysStencilFunc;\r\n      this.stencilRef = 0;\r\n      this.stencilFuncMask = 0xff;\r\n      this.stencilFail = KeepStencilOp;\r\n      this.stencilZFail = KeepStencilOp;\r\n      this.stencilZPass = KeepStencilOp;\r\n      this.stencilWrite = false;\r\n      this.clippingPlanes = null;\r\n      this.clipIntersection = false;\r\n      this.clipShadows = false;\r\n      this.shadowSide = null;\r\n      this.colorWrite = true;\r\n      this.precision = null; // override the renderer's default precision for this material\r\n\r\n      this.polygonOffset = false;\r\n      this.polygonOffsetFactor = 0;\r\n      this.polygonOffsetUnits = 0;\r\n      this.dithering = false;\r\n      this.alphaTest = 0;\r\n      this.alphaToCoverage = false;\r\n      this.premultipliedAlpha = false;\r\n      this.visible = true;\r\n      this.toneMapped = true;\r\n      this.userData = {};\r\n      this.version = 0;\r\n    }\r\n\r\n    onBuild() /* shaderobject, renderer */\r\n    {}\r\n\r\n    onBeforeCompile() /* shaderobject, renderer */\r\n    {}\r\n\r\n    customProgramCacheKey() {\r\n      return this.onBeforeCompile.toString();\r\n    }\r\n\r\n    setValues(values) {\r\n      if (values === undefined) return;\r\n\r\n      for (const key in values) {\r\n        const newValue = values[key];\r\n\r\n        if (newValue === undefined) {\r\n          console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\r\n          continue;\r\n        } // for backward compatability if shading is set in the constructor\r\n\r\n        if (key === 'shading') {\r\n          console.warn(\r\n            'THREE.' +\r\n              this.type +\r\n              ': .shading has been removed. Use the boolean .flatShading instead.',\r\n          );\r\n          this.flatShading = newValue === FlatShading ? true : false;\r\n          continue;\r\n        }\r\n\r\n        const currentValue = this[key];\r\n\r\n        if (currentValue === undefined) {\r\n          console.warn(\r\n            'THREE.' + this.type + \": '\" + key + \"' is not a property of this material.\",\r\n          );\r\n          continue;\r\n        }\r\n\r\n        if (currentValue && currentValue.isColor) {\r\n          currentValue.set(newValue);\r\n        } else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\r\n          currentValue.copy(newValue);\r\n        } else {\r\n          this[key] = newValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const isRoot = meta === undefined || typeof meta === 'string';\r\n\r\n      if (isRoot) {\r\n        meta = {\r\n          textures: {},\r\n          images: {},\r\n        };\r\n      }\r\n\r\n      const data = {\r\n        metadata: {\r\n          version: 4.5,\r\n          type: 'Material',\r\n          generator: 'Material.toJSON',\r\n        },\r\n      }; // standard Material serialization\r\n\r\n      data.uuid = this.uuid;\r\n      data.type = this.type;\r\n      if (this.name !== '') data.name = this.name;\r\n      if (this.color && this.color.isColor) data.color = this.color.getHex();\r\n      if (this.roughness !== undefined) data.roughness = this.roughness;\r\n      if (this.metalness !== undefined) data.metalness = this.metalness;\r\n      if (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\r\n      if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\r\n      if (this.emissiveIntensity && this.emissiveIntensity !== 1)\r\n        data.emissiveIntensity = this.emissiveIntensity;\r\n      if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\r\n      if (this.shininess !== undefined) data.shininess = this.shininess;\r\n      if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\r\n      if (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\r\n\r\n      if (this.clearcoatMap && this.clearcoatMap.isTexture) {\r\n        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\r\n      }\r\n\r\n      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\r\n        data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\r\n      }\r\n\r\n      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\r\n        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\r\n        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n      }\r\n\r\n      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\r\n      if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\r\n      if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\r\n\r\n      if (this.lightMap && this.lightMap.isTexture) {\r\n        data.lightMap = this.lightMap.toJSON(meta).uuid;\r\n        data.lightMapIntensity = this.lightMapIntensity;\r\n      }\r\n\r\n      if (this.aoMap && this.aoMap.isTexture) {\r\n        data.aoMap = this.aoMap.toJSON(meta).uuid;\r\n        data.aoMapIntensity = this.aoMapIntensity;\r\n      }\r\n\r\n      if (this.bumpMap && this.bumpMap.isTexture) {\r\n        data.bumpMap = this.bumpMap.toJSON(meta).uuid;\r\n        data.bumpScale = this.bumpScale;\r\n      }\r\n\r\n      if (this.normalMap && this.normalMap.isTexture) {\r\n        data.normalMap = this.normalMap.toJSON(meta).uuid;\r\n        data.normalMapType = this.normalMapType;\r\n        data.normalScale = this.normalScale.toArray();\r\n      }\r\n\r\n      if (this.displacementMap && this.displacementMap.isTexture) {\r\n        data.displacementMap = this.displacementMap.toJSON(meta).uuid;\r\n        data.displacementScale = this.displacementScale;\r\n        data.displacementBias = this.displacementBias;\r\n      }\r\n\r\n      if (this.roughnessMap && this.roughnessMap.isTexture)\r\n        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\r\n      if (this.metalnessMap && this.metalnessMap.isTexture)\r\n        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\r\n      if (this.emissiveMap && this.emissiveMap.isTexture)\r\n        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\r\n      if (this.specularMap && this.specularMap.isTexture)\r\n        data.specularMap = this.specularMap.toJSON(meta).uuid;\r\n\r\n      if (this.envMap && this.envMap.isTexture) {\r\n        data.envMap = this.envMap.toJSON(meta).uuid;\r\n        if (this.combine !== undefined) data.combine = this.combine;\r\n      }\r\n\r\n      if (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\r\n      if (this.reflectivity !== undefined) data.reflectivity = this.reflectivity;\r\n      if (this.refractionRatio !== undefined) data.refractionRatio = this.refractionRatio;\r\n\r\n      if (this.gradientMap && this.gradientMap.isTexture) {\r\n        data.gradientMap = this.gradientMap.toJSON(meta).uuid;\r\n      }\r\n\r\n      if (this.transmission !== undefined) data.transmission = this.transmission;\r\n      if (this.transmissionMap && this.transmissionMap.isTexture)\r\n        data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;\r\n      if (this.thickness !== undefined) data.thickness = this.thickness;\r\n      if (this.thicknessMap && this.thicknessMap.isTexture)\r\n        data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;\r\n      if (this.attenuationDistance !== undefined)\r\n        data.attenuationDistance = this.attenuationDistance;\r\n      if (this.attenuationColor !== undefined)\r\n        data.attenuationColor = this.attenuationColor.getHex();\r\n      if (this.size !== undefined) data.size = this.size;\r\n      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;\r\n      if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\r\n      if (this.blending !== NormalBlending) data.blending = this.blending;\r\n      if (this.side !== FrontSide) data.side = this.side;\r\n      if (this.vertexColors) data.vertexColors = true;\r\n      if (this.opacity < 1) data.opacity = this.opacity;\r\n      if (this.transparent === true) data.transparent = this.transparent;\r\n      data.depthFunc = this.depthFunc;\r\n      data.depthTest = this.depthTest;\r\n      data.depthWrite = this.depthWrite;\r\n      data.colorWrite = this.colorWrite;\r\n      data.stencilWrite = this.stencilWrite;\r\n      data.stencilWriteMask = this.stencilWriteMask;\r\n      data.stencilFunc = this.stencilFunc;\r\n      data.stencilRef = this.stencilRef;\r\n      data.stencilFuncMask = this.stencilFuncMask;\r\n      data.stencilFail = this.stencilFail;\r\n      data.stencilZFail = this.stencilZFail;\r\n      data.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\r\n\r\n      if (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\r\n      if (this.polygonOffset === true) data.polygonOffset = true;\r\n      if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\r\n      if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\r\n      if (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\r\n      if (this.dashSize !== undefined) data.dashSize = this.dashSize;\r\n      if (this.gapSize !== undefined) data.gapSize = this.gapSize;\r\n      if (this.scale !== undefined) data.scale = this.scale;\r\n      if (this.dithering === true) data.dithering = true;\r\n      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\r\n      if (this.alphaToCoverage === true) data.alphaToCoverage = this.alphaToCoverage;\r\n      if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\r\n      if (this.wireframe === true) data.wireframe = this.wireframe;\r\n      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\r\n      if (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\r\n      if (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\r\n      if (this.morphTargets === true) data.morphTargets = true;\r\n      if (this.morphNormals === true) data.morphNormals = true;\r\n      if (this.flatShading === true) data.flatShading = this.flatShading;\r\n      if (this.visible === false) data.visible = false;\r\n      if (this.toneMapped === false) data.toneMapped = false;\r\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\r\n\r\n      function extractFromCache(cache) {\r\n        const values = [];\r\n\r\n        for (const key in cache) {\r\n          const data = cache[key];\r\n          delete data.metadata;\r\n          values.push(data);\r\n        }\r\n\r\n        return values;\r\n      }\r\n\r\n      if (isRoot) {\r\n        const textures = extractFromCache(meta.textures);\r\n        const images = extractFromCache(meta.images);\r\n        if (textures.length > 0) data.textures = textures;\r\n        if (images.length > 0) data.images = images;\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(source) {\r\n      this.name = source.name;\r\n      this.fog = source.fog;\r\n      this.blending = source.blending;\r\n      this.side = source.side;\r\n      this.vertexColors = source.vertexColors;\r\n      this.opacity = source.opacity;\r\n      this.transparent = source.transparent;\r\n      this.blendSrc = source.blendSrc;\r\n      this.blendDst = source.blendDst;\r\n      this.blendEquation = source.blendEquation;\r\n      this.blendSrcAlpha = source.blendSrcAlpha;\r\n      this.blendDstAlpha = source.blendDstAlpha;\r\n      this.blendEquationAlpha = source.blendEquationAlpha;\r\n      this.depthFunc = source.depthFunc;\r\n      this.depthTest = source.depthTest;\r\n      this.depthWrite = source.depthWrite;\r\n      this.stencilWriteMask = source.stencilWriteMask;\r\n      this.stencilFunc = source.stencilFunc;\r\n      this.stencilRef = source.stencilRef;\r\n      this.stencilFuncMask = source.stencilFuncMask;\r\n      this.stencilFail = source.stencilFail;\r\n      this.stencilZFail = source.stencilZFail;\r\n      this.stencilZPass = source.stencilZPass;\r\n      this.stencilWrite = source.stencilWrite;\r\n      const srcPlanes = source.clippingPlanes;\r\n      let dstPlanes = null;\r\n\r\n      if (srcPlanes !== null) {\r\n        const n = srcPlanes.length;\r\n        dstPlanes = new Array(n);\r\n\r\n        for (let i = 0; i !== n; ++i) {\r\n          dstPlanes[i] = srcPlanes[i].clone();\r\n        }\r\n      }\r\n\r\n      this.clippingPlanes = dstPlanes;\r\n      this.clipIntersection = source.clipIntersection;\r\n      this.clipShadows = source.clipShadows;\r\n      this.shadowSide = source.shadowSide;\r\n      this.colorWrite = source.colorWrite;\r\n      this.precision = source.precision;\r\n      this.polygonOffset = source.polygonOffset;\r\n      this.polygonOffsetFactor = source.polygonOffsetFactor;\r\n      this.polygonOffsetUnits = source.polygonOffsetUnits;\r\n      this.dithering = source.dithering;\r\n      this.alphaTest = source.alphaTest;\r\n      this.alphaToCoverage = source.alphaToCoverage;\r\n      this.premultipliedAlpha = source.premultipliedAlpha;\r\n      this.visible = source.visible;\r\n      this.toneMapped = source.toneMapped;\r\n      this.userData = JSON.parse(JSON.stringify(source.userData));\r\n      return this;\r\n    }\r\n\r\n    dispose() {\r\n      this.dispatchEvent({\r\n        type: 'dispose',\r\n      });\r\n    }\r\n\r\n    set needsUpdate(value) {\r\n      if (value === true) this.version++;\r\n    }\r\n  }\r\n\r\n  Material.prototype.isMaterial = true;\r\n\r\n  const _colorKeywords = {\r\n    aliceblue: 0xf0f8ff,\r\n    antiquewhite: 0xfaebd7,\r\n    aqua: 0x00ffff,\r\n    aquamarine: 0x7fffd4,\r\n    azure: 0xf0ffff,\r\n    beige: 0xf5f5dc,\r\n    bisque: 0xffe4c4,\r\n    black: 0x000000,\r\n    blanchedalmond: 0xffebcd,\r\n    blue: 0x0000ff,\r\n    blueviolet: 0x8a2be2,\r\n    brown: 0xa52a2a,\r\n    burlywood: 0xdeb887,\r\n    cadetblue: 0x5f9ea0,\r\n    chartreuse: 0x7fff00,\r\n    chocolate: 0xd2691e,\r\n    coral: 0xff7f50,\r\n    cornflowerblue: 0x6495ed,\r\n    cornsilk: 0xfff8dc,\r\n    crimson: 0xdc143c,\r\n    cyan: 0x00ffff,\r\n    darkblue: 0x00008b,\r\n    darkcyan: 0x008b8b,\r\n    darkgoldenrod: 0xb8860b,\r\n    darkgray: 0xa9a9a9,\r\n    darkgreen: 0x006400,\r\n    darkgrey: 0xa9a9a9,\r\n    darkkhaki: 0xbdb76b,\r\n    darkmagenta: 0x8b008b,\r\n    darkolivegreen: 0x556b2f,\r\n    darkorange: 0xff8c00,\r\n    darkorchid: 0x9932cc,\r\n    darkred: 0x8b0000,\r\n    darksalmon: 0xe9967a,\r\n    darkseagreen: 0x8fbc8f,\r\n    darkslateblue: 0x483d8b,\r\n    darkslategray: 0x2f4f4f,\r\n    darkslategrey: 0x2f4f4f,\r\n    darkturquoise: 0x00ced1,\r\n    darkviolet: 0x9400d3,\r\n    deeppink: 0xff1493,\r\n    deepskyblue: 0x00bfff,\r\n    dimgray: 0x696969,\r\n    dimgrey: 0x696969,\r\n    dodgerblue: 0x1e90ff,\r\n    firebrick: 0xb22222,\r\n    floralwhite: 0xfffaf0,\r\n    forestgreen: 0x228b22,\r\n    fuchsia: 0xff00ff,\r\n    gainsboro: 0xdcdcdc,\r\n    ghostwhite: 0xf8f8ff,\r\n    gold: 0xffd700,\r\n    goldenrod: 0xdaa520,\r\n    gray: 0x808080,\r\n    green: 0x008000,\r\n    greenyellow: 0xadff2f,\r\n    grey: 0x808080,\r\n    honeydew: 0xf0fff0,\r\n    hotpink: 0xff69b4,\r\n    indianred: 0xcd5c5c,\r\n    indigo: 0x4b0082,\r\n    ivory: 0xfffff0,\r\n    khaki: 0xf0e68c,\r\n    lavender: 0xe6e6fa,\r\n    lavenderblush: 0xfff0f5,\r\n    lawngreen: 0x7cfc00,\r\n    lemonchiffon: 0xfffacd,\r\n    lightblue: 0xadd8e6,\r\n    lightcoral: 0xf08080,\r\n    lightcyan: 0xe0ffff,\r\n    lightgoldenrodyellow: 0xfafad2,\r\n    lightgray: 0xd3d3d3,\r\n    lightgreen: 0x90ee90,\r\n    lightgrey: 0xd3d3d3,\r\n    lightpink: 0xffb6c1,\r\n    lightsalmon: 0xffa07a,\r\n    lightseagreen: 0x20b2aa,\r\n    lightskyblue: 0x87cefa,\r\n    lightslategray: 0x778899,\r\n    lightslategrey: 0x778899,\r\n    lightsteelblue: 0xb0c4de,\r\n    lightyellow: 0xffffe0,\r\n    lime: 0x00ff00,\r\n    limegreen: 0x32cd32,\r\n    linen: 0xfaf0e6,\r\n    magenta: 0xff00ff,\r\n    maroon: 0x800000,\r\n    mediumaquamarine: 0x66cdaa,\r\n    mediumblue: 0x0000cd,\r\n    mediumorchid: 0xba55d3,\r\n    mediumpurple: 0x9370db,\r\n    mediumseagreen: 0x3cb371,\r\n    mediumslateblue: 0x7b68ee,\r\n    mediumspringgreen: 0x00fa9a,\r\n    mediumturquoise: 0x48d1cc,\r\n    mediumvioletred: 0xc71585,\r\n    midnightblue: 0x191970,\r\n    mintcream: 0xf5fffa,\r\n    mistyrose: 0xffe4e1,\r\n    moccasin: 0xffe4b5,\r\n    navajowhite: 0xffdead,\r\n    navy: 0x000080,\r\n    oldlace: 0xfdf5e6,\r\n    olive: 0x808000,\r\n    olivedrab: 0x6b8e23,\r\n    orange: 0xffa500,\r\n    orangered: 0xff4500,\r\n    orchid: 0xda70d6,\r\n    palegoldenrod: 0xeee8aa,\r\n    palegreen: 0x98fb98,\r\n    paleturquoise: 0xafeeee,\r\n    palevioletred: 0xdb7093,\r\n    papayawhip: 0xffefd5,\r\n    peachpuff: 0xffdab9,\r\n    peru: 0xcd853f,\r\n    pink: 0xffc0cb,\r\n    plum: 0xdda0dd,\r\n    powderblue: 0xb0e0e6,\r\n    purple: 0x800080,\r\n    rebeccapurple: 0x663399,\r\n    red: 0xff0000,\r\n    rosybrown: 0xbc8f8f,\r\n    royalblue: 0x4169e1,\r\n    saddlebrown: 0x8b4513,\r\n    salmon: 0xfa8072,\r\n    sandybrown: 0xf4a460,\r\n    seagreen: 0x2e8b57,\r\n    seashell: 0xfff5ee,\r\n    sienna: 0xa0522d,\r\n    silver: 0xc0c0c0,\r\n    skyblue: 0x87ceeb,\r\n    slateblue: 0x6a5acd,\r\n    slategray: 0x708090,\r\n    slategrey: 0x708090,\r\n    snow: 0xfffafa,\r\n    springgreen: 0x00ff7f,\r\n    steelblue: 0x4682b4,\r\n    tan: 0xd2b48c,\r\n    teal: 0x008080,\r\n    thistle: 0xd8bfd8,\r\n    tomato: 0xff6347,\r\n    turquoise: 0x40e0d0,\r\n    violet: 0xee82ee,\r\n    wheat: 0xf5deb3,\r\n    white: 0xffffff,\r\n    whitesmoke: 0xf5f5f5,\r\n    yellow: 0xffff00,\r\n    yellowgreen: 0x9acd32,\r\n  };\r\n  const _hslA = {\r\n    h: 0,\r\n    s: 0,\r\n    l: 0,\r\n  };\r\n  const _hslB = {\r\n    h: 0,\r\n    s: 0,\r\n    l: 0,\r\n  };\r\n\r\n  function hue2rgb(p, q, t) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\r\n    return p;\r\n  }\r\n\r\n  function SRGBToLinear(c) {\r\n    return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\r\n  }\r\n\r\n  function LinearToSRGB(c) {\r\n    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\r\n  }\r\n\r\n  class Color {\r\n    constructor(r, g, b) {\r\n      if (g === undefined && b === undefined) {\r\n        // r is THREE.Color, hex or string\r\n        return this.set(r);\r\n      }\r\n\r\n      return this.setRGB(r, g, b);\r\n    }\r\n\r\n    set(value) {\r\n      if (value && value.isColor) {\r\n        this.copy(value);\r\n      } else if (typeof value === 'number') {\r\n        this.setHex(value);\r\n      } else if (typeof value === 'string') {\r\n        this.setStyle(value);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setScalar(scalar) {\r\n      this.r = scalar;\r\n      this.g = scalar;\r\n      this.b = scalar;\r\n      return this;\r\n    }\r\n\r\n    setHex(hex) {\r\n      hex = Math.floor(hex);\r\n      this.r = ((hex >> 16) & 255) / 255;\r\n      this.g = ((hex >> 8) & 255) / 255;\r\n      this.b = (hex & 255) / 255;\r\n      return this;\r\n    }\r\n\r\n    setRGB(r, g, b) {\r\n      this.r = r;\r\n      this.g = g;\r\n      this.b = b;\r\n      return this;\r\n    }\r\n\r\n    setHSL(h, s, l) {\r\n      // h,s,l ranges are in 0.0 - 1.0\r\n      h = euclideanModulo(h, 1);\r\n      s = clamp(s, 0, 1);\r\n      l = clamp(l, 0, 1);\r\n\r\n      if (s === 0) {\r\n        this.r = this.g = this.b = l;\r\n      } else {\r\n        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\r\n        const q = 2 * l - p;\r\n        this.r = hue2rgb(q, p, h + 1 / 3);\r\n        this.g = hue2rgb(q, p, h);\r\n        this.b = hue2rgb(q, p, h - 1 / 3);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setStyle(style) {\r\n      function handleAlpha(string) {\r\n        if (string === undefined) return;\r\n\r\n        if (parseFloat(string) < 1) {\r\n          console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\r\n        }\r\n      }\r\n\r\n      let m;\r\n\r\n      if ((m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style))) {\r\n        // rgb / hsl\r\n        let color;\r\n        const name = m[1];\r\n        const components = m[2];\r\n\r\n        switch (name) {\r\n          case 'rgb':\r\n          case 'rgba':\r\n            if (\r\n              (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(\r\n                components,\r\n              ))\r\n            ) {\r\n              // rgb(255,0,0) rgba(255,0,0,0.5)\r\n              this.r = Math.min(255, parseInt(color[1], 10)) / 255;\r\n              this.g = Math.min(255, parseInt(color[2], 10)) / 255;\r\n              this.b = Math.min(255, parseInt(color[3], 10)) / 255;\r\n              handleAlpha(color[4]);\r\n              return this;\r\n            }\r\n\r\n            if (\r\n              (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(\r\n                components,\r\n              ))\r\n            ) {\r\n              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n              this.r = Math.min(100, parseInt(color[1], 10)) / 100;\r\n              this.g = Math.min(100, parseInt(color[2], 10)) / 100;\r\n              this.b = Math.min(100, parseInt(color[3], 10)) / 100;\r\n              handleAlpha(color[4]);\r\n              return this;\r\n            }\r\n\r\n            break;\r\n\r\n          case 'hsl':\r\n          case 'hsla':\r\n            if (\r\n              (color =\r\n                /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(\r\n                  components,\r\n                ))\r\n            ) {\r\n              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n              const h = parseFloat(color[1]) / 360;\r\n              const s = parseInt(color[2], 10) / 100;\r\n              const l = parseInt(color[3], 10) / 100;\r\n              handleAlpha(color[4]);\r\n              return this.setHSL(h, s, l);\r\n            }\r\n\r\n            break;\r\n        }\r\n      } else if ((m = /^\\#([A-Fa-f\\d]+)$/.exec(style))) {\r\n        // hex color\r\n        const hex = m[1];\r\n        const size = hex.length;\r\n\r\n        if (size === 3) {\r\n          // #ff0\r\n          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\r\n          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\r\n          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\r\n          return this;\r\n        } else if (size === 6) {\r\n          // #ff0000\r\n          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\r\n          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\r\n          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\r\n          return this;\r\n        }\r\n      }\r\n\r\n      if (style && style.length > 0) {\r\n        return this.setColorName(style);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setColorName(style) {\r\n      // color keywords\r\n      const hex = _colorKeywords[style.toLowerCase()];\r\n\r\n      if (hex !== undefined) {\r\n        // red\r\n        this.setHex(hex);\r\n      } else {\r\n        // unknown color\r\n        console.warn('THREE.Color: Unknown color ' + style);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.r, this.g, this.b);\r\n    }\r\n\r\n    copy(color) {\r\n      this.r = color.r;\r\n      this.g = color.g;\r\n      this.b = color.b;\r\n      return this;\r\n    }\r\n\r\n    copyGammaToLinear(color, gammaFactor = 2.0) {\r\n      this.r = Math.pow(color.r, gammaFactor);\r\n      this.g = Math.pow(color.g, gammaFactor);\r\n      this.b = Math.pow(color.b, gammaFactor);\r\n      return this;\r\n    }\r\n\r\n    copyLinearToGamma(color, gammaFactor = 2.0) {\r\n      const safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\r\n      this.r = Math.pow(color.r, safeInverse);\r\n      this.g = Math.pow(color.g, safeInverse);\r\n      this.b = Math.pow(color.b, safeInverse);\r\n      return this;\r\n    }\r\n\r\n    convertGammaToLinear(gammaFactor) {\r\n      this.copyGammaToLinear(this, gammaFactor);\r\n      return this;\r\n    }\r\n\r\n    convertLinearToGamma(gammaFactor) {\r\n      this.copyLinearToGamma(this, gammaFactor);\r\n      return this;\r\n    }\r\n\r\n    copySRGBToLinear(color) {\r\n      this.r = SRGBToLinear(color.r);\r\n      this.g = SRGBToLinear(color.g);\r\n      this.b = SRGBToLinear(color.b);\r\n      return this;\r\n    }\r\n\r\n    copyLinearToSRGB(color) {\r\n      this.r = LinearToSRGB(color.r);\r\n      this.g = LinearToSRGB(color.g);\r\n      this.b = LinearToSRGB(color.b);\r\n      return this;\r\n    }\r\n\r\n    convertSRGBToLinear() {\r\n      this.copySRGBToLinear(this);\r\n      return this;\r\n    }\r\n\r\n    convertLinearToSRGB() {\r\n      this.copyLinearToSRGB(this);\r\n      return this;\r\n    }\r\n\r\n    getHex() {\r\n      return ((this.r * 255) << 16) ^ ((this.g * 255) << 8) ^ ((this.b * 255) << 0);\r\n    }\r\n\r\n    getHexString() {\r\n      return ('000000' + this.getHex().toString(16)).slice(-6);\r\n    }\r\n\r\n    getHSL(target) {\r\n      // h,s,l ranges are in 0.0 - 1.0\r\n      if (target === undefined) {\r\n        console.warn('THREE.Color: .getHSL() target is now required');\r\n        target = {\r\n          h: 0,\r\n          s: 0,\r\n          l: 0,\r\n        };\r\n      }\r\n\r\n      const r = this.r,\r\n        g = this.g,\r\n        b = this.b;\r\n      const max = Math.max(r, g, b);\r\n      const min = Math.min(r, g, b);\r\n      let hue, saturation;\r\n      const lightness = (min + max) / 2.0;\r\n\r\n      if (min === max) {\r\n        hue = 0;\r\n        saturation = 0;\r\n      } else {\r\n        const delta = max - min;\r\n        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\r\n\r\n        switch (max) {\r\n          case r:\r\n            hue = (g - b) / delta + (g < b ? 6 : 0);\r\n            break;\r\n\r\n          case g:\r\n            hue = (b - r) / delta + 2;\r\n            break;\r\n\r\n          case b:\r\n            hue = (r - g) / delta + 4;\r\n            break;\r\n        }\r\n\r\n        hue /= 6;\r\n      }\r\n\r\n      target.h = hue;\r\n      target.s = saturation;\r\n      target.l = lightness;\r\n      return target;\r\n    }\r\n\r\n    getStyle() {\r\n      return (\r\n        'rgb(' +\r\n        ((this.r * 255) | 0) +\r\n        ',' +\r\n        ((this.g * 255) | 0) +\r\n        ',' +\r\n        ((this.b * 255) | 0) +\r\n        ')'\r\n      );\r\n    }\r\n\r\n    offsetHSL(h, s, l) {\r\n      this.getHSL(_hslA);\r\n      _hslA.h += h;\r\n      _hslA.s += s;\r\n      _hslA.l += l;\r\n      this.setHSL(_hslA.h, _hslA.s, _hslA.l);\r\n      return this;\r\n    }\r\n\r\n    add(color) {\r\n      this.r += color.r;\r\n      this.g += color.g;\r\n      this.b += color.b;\r\n      return this;\r\n    }\r\n\r\n    addColors(color1, color2) {\r\n      this.r = color1.r + color2.r;\r\n      this.g = color1.g + color2.g;\r\n      this.b = color1.b + color2.b;\r\n      return this;\r\n    }\r\n\r\n    addScalar(s) {\r\n      this.r += s;\r\n      this.g += s;\r\n      this.b += s;\r\n      return this;\r\n    }\r\n\r\n    sub(color) {\r\n      this.r = Math.max(0, this.r - color.r);\r\n      this.g = Math.max(0, this.g - color.g);\r\n      this.b = Math.max(0, this.b - color.b);\r\n      return this;\r\n    }\r\n\r\n    multiply(color) {\r\n      this.r *= color.r;\r\n      this.g *= color.g;\r\n      this.b *= color.b;\r\n      return this;\r\n    }\r\n\r\n    multiplyScalar(s) {\r\n      this.r *= s;\r\n      this.g *= s;\r\n      this.b *= s;\r\n      return this;\r\n    }\r\n\r\n    lerp(color, alpha) {\r\n      this.r += (color.r - this.r) * alpha;\r\n      this.g += (color.g - this.g) * alpha;\r\n      this.b += (color.b - this.b) * alpha;\r\n      return this;\r\n    }\r\n\r\n    lerpColors(color1, color2, alpha) {\r\n      this.r = color1.r + (color2.r - color1.r) * alpha;\r\n      this.g = color1.g + (color2.g - color1.g) * alpha;\r\n      this.b = color1.b + (color2.b - color1.b) * alpha;\r\n      return this;\r\n    }\r\n\r\n    lerpHSL(color, alpha) {\r\n      this.getHSL(_hslA);\r\n      color.getHSL(_hslB);\r\n      const h = lerp(_hslA.h, _hslB.h, alpha);\r\n      const s = lerp(_hslA.s, _hslB.s, alpha);\r\n      const l = lerp(_hslA.l, _hslB.l, alpha);\r\n      this.setHSL(h, s, l);\r\n      return this;\r\n    }\r\n\r\n    equals(c) {\r\n      return c.r === this.r && c.g === this.g && c.b === this.b;\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      this.r = array[offset];\r\n      this.g = array[offset + 1];\r\n      this.b = array[offset + 2];\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      array[offset] = this.r;\r\n      array[offset + 1] = this.g;\r\n      array[offset + 2] = this.b;\r\n      return array;\r\n    }\r\n\r\n    fromBufferAttribute(attribute, index) {\r\n      this.r = attribute.getX(index);\r\n      this.g = attribute.getY(index);\r\n      this.b = attribute.getZ(index);\r\n\r\n      if (attribute.normalized === true) {\r\n        // assuming Uint8Array\r\n        this.r /= 255;\r\n        this.g /= 255;\r\n        this.b /= 255;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      return this.getHex();\r\n    }\r\n  }\r\n\r\n  Color.NAMES = _colorKeywords;\r\n  Color.prototype.isColor = true;\r\n  Color.prototype.r = 1;\r\n  Color.prototype.g = 1;\r\n  Color.prototype.b = 1;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tlightMap: new THREE.Texture( <Image> ),\r\n   *\tlightMapIntensity: <float>\r\n   *\r\n   *\taoMap: new THREE.Texture( <Image> ),\r\n   *\taoMapIntensity: <float>\r\n   *\r\n   *\tspecularMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n   *\tcombine: THREE.Multiply,\r\n   *\treflectivity: <float>,\r\n   *\trefractionRatio: <float>,\r\n   *\r\n   *\tdepthTest: <bool>,\r\n   *\tdepthWrite: <bool>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshBasicMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshBasicMaterial';\r\n      this.color = new Color(0xffffff); // emissive\r\n\r\n      this.map = null;\r\n      this.lightMap = null;\r\n      this.lightMapIntensity = 1.0;\r\n      this.aoMap = null;\r\n      this.aoMapIntensity = 1.0;\r\n      this.specularMap = null;\r\n      this.alphaMap = null;\r\n      this.envMap = null;\r\n      this.combine = MultiplyOperation;\r\n      this.reflectivity = 1;\r\n      this.refractionRatio = 0.98;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.wireframeLinecap = 'round';\r\n      this.wireframeLinejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.map = source.map;\r\n      this.lightMap = source.lightMap;\r\n      this.lightMapIntensity = source.lightMapIntensity;\r\n      this.aoMap = source.aoMap;\r\n      this.aoMapIntensity = source.aoMapIntensity;\r\n      this.specularMap = source.specularMap;\r\n      this.alphaMap = source.alphaMap;\r\n      this.envMap = source.envMap;\r\n      this.combine = source.combine;\r\n      this.reflectivity = source.reflectivity;\r\n      this.refractionRatio = source.refractionRatio;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.wireframeLinecap = source.wireframeLinecap;\r\n      this.wireframeLinejoin = source.wireframeLinejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\r\n\r\n  const _vector$9 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vector2 = /*@__PURE__*/ new Vector2();\r\n\r\n  class BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      if (Array.isArray(array)) {\r\n        throw new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\r\n      }\r\n\r\n      this.name = '';\r\n      this.array = array;\r\n      this.itemSize = itemSize;\r\n      this.count = array !== undefined ? array.length / itemSize : 0;\r\n      this.normalized = normalized === true;\r\n      this.usage = StaticDrawUsage;\r\n      this.updateRange = {\r\n        offset: 0,\r\n        count: -1,\r\n      };\r\n      this.version = 0;\r\n    }\r\n\r\n    onUploadCallback() {}\r\n\r\n    set needsUpdate(value) {\r\n      if (value === true) this.version++;\r\n    }\r\n\r\n    setUsage(value) {\r\n      this.usage = value;\r\n      return this;\r\n    }\r\n\r\n    copy(source) {\r\n      this.name = source.name;\r\n      this.array = new source.array.constructor(source.array);\r\n      this.itemSize = source.itemSize;\r\n      this.count = source.count;\r\n      this.normalized = source.normalized;\r\n      this.usage = source.usage;\r\n      return this;\r\n    }\r\n\r\n    copyAt(index1, attribute, index2) {\r\n      index1 *= this.itemSize;\r\n      index2 *= attribute.itemSize;\r\n\r\n      for (let i = 0, l = this.itemSize; i < l; i++) {\r\n        this.array[index1 + i] = attribute.array[index2 + i];\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    copyArray(array) {\r\n      this.array.set(array);\r\n      return this;\r\n    }\r\n\r\n    copyColorsArray(colors) {\r\n      const array = this.array;\r\n      let offset = 0;\r\n\r\n      for (let i = 0, l = colors.length; i < l; i++) {\r\n        let color = colors[i];\r\n\r\n        if (color === undefined) {\r\n          console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\r\n          color = new Color();\r\n        }\r\n\r\n        array[offset++] = color.r;\r\n        array[offset++] = color.g;\r\n        array[offset++] = color.b;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    copyVector2sArray(vectors) {\r\n      const array = this.array;\r\n      let offset = 0;\r\n\r\n      for (let i = 0, l = vectors.length; i < l; i++) {\r\n        let vector = vectors[i];\r\n\r\n        if (vector === undefined) {\r\n          console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\r\n          vector = new Vector2();\r\n        }\r\n\r\n        array[offset++] = vector.x;\r\n        array[offset++] = vector.y;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    copyVector3sArray(vectors) {\r\n      const array = this.array;\r\n      let offset = 0;\r\n\r\n      for (let i = 0, l = vectors.length; i < l; i++) {\r\n        let vector = vectors[i];\r\n\r\n        if (vector === undefined) {\r\n          console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\r\n          vector = new Vector3();\r\n        }\r\n\r\n        array[offset++] = vector.x;\r\n        array[offset++] = vector.y;\r\n        array[offset++] = vector.z;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    copyVector4sArray(vectors) {\r\n      const array = this.array;\r\n      let offset = 0;\r\n\r\n      for (let i = 0, l = vectors.length; i < l; i++) {\r\n        let vector = vectors[i];\r\n\r\n        if (vector === undefined) {\r\n          console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\r\n          vector = new Vector4();\r\n        }\r\n\r\n        array[offset++] = vector.x;\r\n        array[offset++] = vector.y;\r\n        array[offset++] = vector.z;\r\n        array[offset++] = vector.w;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    applyMatrix3(m) {\r\n      if (this.itemSize === 2) {\r\n        for (let i = 0, l = this.count; i < l; i++) {\r\n          _vector2.fromBufferAttribute(this, i);\r\n\r\n          _vector2.applyMatrix3(m);\r\n\r\n          this.setXY(i, _vector2.x, _vector2.y);\r\n        }\r\n      } else if (this.itemSize === 3) {\r\n        for (let i = 0, l = this.count; i < l; i++) {\r\n          _vector$9.fromBufferAttribute(this, i);\r\n\r\n          _vector$9.applyMatrix3(m);\r\n\r\n          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    applyMatrix4(m) {\r\n      for (let i = 0, l = this.count; i < l; i++) {\r\n        _vector$9.x = this.getX(i);\r\n        _vector$9.y = this.getY(i);\r\n        _vector$9.z = this.getZ(i);\r\n\r\n        _vector$9.applyMatrix4(m);\r\n\r\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    applyNormalMatrix(m) {\r\n      for (let i = 0, l = this.count; i < l; i++) {\r\n        _vector$9.x = this.getX(i);\r\n        _vector$9.y = this.getY(i);\r\n        _vector$9.z = this.getZ(i);\r\n\r\n        _vector$9.applyNormalMatrix(m);\r\n\r\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    transformDirection(m) {\r\n      for (let i = 0, l = this.count; i < l; i++) {\r\n        _vector$9.x = this.getX(i);\r\n        _vector$9.y = this.getY(i);\r\n        _vector$9.z = this.getZ(i);\r\n\r\n        _vector$9.transformDirection(m);\r\n\r\n        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    set(value, offset = 0) {\r\n      this.array.set(value, offset);\r\n      return this;\r\n    }\r\n\r\n    getX(index) {\r\n      return this.array[index * this.itemSize];\r\n    }\r\n\r\n    setX(index, x) {\r\n      this.array[index * this.itemSize] = x;\r\n      return this;\r\n    }\r\n\r\n    getY(index) {\r\n      return this.array[index * this.itemSize + 1];\r\n    }\r\n\r\n    setY(index, y) {\r\n      this.array[index * this.itemSize + 1] = y;\r\n      return this;\r\n    }\r\n\r\n    getZ(index) {\r\n      return this.array[index * this.itemSize + 2];\r\n    }\r\n\r\n    setZ(index, z) {\r\n      this.array[index * this.itemSize + 2] = z;\r\n      return this;\r\n    }\r\n\r\n    getW(index) {\r\n      return this.array[index * this.itemSize + 3];\r\n    }\r\n\r\n    setW(index, w) {\r\n      this.array[index * this.itemSize + 3] = w;\r\n      return this;\r\n    }\r\n\r\n    setXY(index, x, y) {\r\n      index *= this.itemSize;\r\n      this.array[index + 0] = x;\r\n      this.array[index + 1] = y;\r\n      return this;\r\n    }\r\n\r\n    setXYZ(index, x, y, z) {\r\n      index *= this.itemSize;\r\n      this.array[index + 0] = x;\r\n      this.array[index + 1] = y;\r\n      this.array[index + 2] = z;\r\n      return this;\r\n    }\r\n\r\n    setXYZW(index, x, y, z, w) {\r\n      index *= this.itemSize;\r\n      this.array[index + 0] = x;\r\n      this.array[index + 1] = y;\r\n      this.array[index + 2] = z;\r\n      this.array[index + 3] = w;\r\n      return this;\r\n    }\r\n\r\n    onUpload(callback) {\r\n      this.onUploadCallback = callback;\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.array, this.itemSize).copy(this);\r\n    }\r\n\r\n    toJSON() {\r\n      const data = {\r\n        itemSize: this.itemSize,\r\n        type: this.array.constructor.name,\r\n        array: Array.prototype.slice.call(this.array),\r\n        normalized: this.normalized,\r\n      };\r\n      if (this.name !== '') data.name = this.name;\r\n      if (this.usage !== StaticDrawUsage) data.usage = this.usage;\r\n      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)\r\n        data.updateRange = this.updateRange;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  BufferAttribute.prototype.isBufferAttribute = true; //\r\n\r\n  class Int8BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Int8Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Uint8BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Uint8Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Uint8ClampedBufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Uint8ClampedArray(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Int16BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Int16Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Uint16BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Uint16Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Int32BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Int32Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Uint32BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Uint32Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Float16BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Uint16Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  Float16BufferAttribute.prototype.isFloat16BufferAttribute = true;\r\n\r\n  class Float32BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Float32Array(array), itemSize, normalized);\r\n    }\r\n  }\r\n\r\n  class Float64BufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized) {\r\n      super(new Float64Array(array), itemSize, normalized);\r\n    }\r\n  } //\r\n\r\n  function arrayMax(array) {\r\n    if (array.length === 0) return -Infinity;\r\n    let max = array[0];\r\n\r\n    for (let i = 1, l = array.length; i < l; ++i) {\r\n      if (array[i] > max) max = array[i];\r\n    }\r\n\r\n    return max;\r\n  }\r\n\r\n  const TYPED_ARRAYS = {\r\n    Int8Array: Int8Array,\r\n    Uint8Array: Uint8Array,\r\n    Uint8ClampedArray: Uint8ClampedArray,\r\n    Int16Array: Int16Array,\r\n    Uint16Array: Uint16Array,\r\n    Int32Array: Int32Array,\r\n    Uint32Array: Uint32Array,\r\n    Float32Array: Float32Array,\r\n    Float64Array: Float64Array,\r\n  };\r\n\r\n  function getTypedArray(type, buffer) {\r\n    return new TYPED_ARRAYS[type](buffer);\r\n  }\r\n\r\n  let _id = 0;\r\n\r\n  const _m1 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _obj = /*@__PURE__*/ new Object3D();\r\n\r\n  const _offset = /*@__PURE__*/ new Vector3();\r\n\r\n  const _box$1 = /*@__PURE__*/ new Box3();\r\n\r\n  const _boxMorphTargets = /*@__PURE__*/ new Box3();\r\n\r\n  const _vector$8 = /*@__PURE__*/ new Vector3();\r\n\r\n  class BufferGeometry extends EventDispatcher {\r\n    constructor() {\r\n      super();\r\n      Object.defineProperty(this, 'id', {\r\n        value: _id++,\r\n      });\r\n      this.uuid = generateUUID();\r\n      this.name = '';\r\n      this.type = 'BufferGeometry';\r\n      this.index = null;\r\n      this.attributes = {};\r\n      this.morphAttributes = {};\r\n      this.morphTargetsRelative = false;\r\n      this.groups = [];\r\n      this.boundingBox = null;\r\n      this.boundingSphere = null;\r\n      this.drawRange = {\r\n        start: 0,\r\n        count: Infinity,\r\n      };\r\n      this.userData = {};\r\n    }\r\n\r\n    getIndex() {\r\n      return this.index;\r\n    }\r\n\r\n    setIndex(index) {\r\n      if (Array.isArray(index)) {\r\n        this.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(\r\n          index,\r\n          1,\r\n        );\r\n      } else {\r\n        this.index = index;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getAttribute(name) {\r\n      return this.attributes[name];\r\n    }\r\n\r\n    setAttribute(name, attribute) {\r\n      this.attributes[name] = attribute;\r\n      return this;\r\n    }\r\n\r\n    deleteAttribute(name) {\r\n      delete this.attributes[name];\r\n      return this;\r\n    }\r\n\r\n    hasAttribute(name) {\r\n      return this.attributes[name] !== undefined;\r\n    }\r\n\r\n    addGroup(start, count, materialIndex = 0) {\r\n      this.groups.push({\r\n        start: start,\r\n        count: count,\r\n        materialIndex: materialIndex,\r\n      });\r\n    }\r\n\r\n    clearGroups() {\r\n      this.groups = [];\r\n    }\r\n\r\n    setDrawRange(start, count) {\r\n      this.drawRange.start = start;\r\n      this.drawRange.count = count;\r\n    }\r\n\r\n    applyMatrix4(matrix) {\r\n      const position = this.attributes.position;\r\n\r\n      if (position !== undefined) {\r\n        position.applyMatrix4(matrix);\r\n        position.needsUpdate = true;\r\n      }\r\n\r\n      const normal = this.attributes.normal;\r\n\r\n      if (normal !== undefined) {\r\n        const normalMatrix = new Matrix3().getNormalMatrix(matrix);\r\n        normal.applyNormalMatrix(normalMatrix);\r\n        normal.needsUpdate = true;\r\n      }\r\n\r\n      const tangent = this.attributes.tangent;\r\n\r\n      if (tangent !== undefined) {\r\n        tangent.transformDirection(matrix);\r\n        tangent.needsUpdate = true;\r\n      }\r\n\r\n      if (this.boundingBox !== null) {\r\n        this.computeBoundingBox();\r\n      }\r\n\r\n      if (this.boundingSphere !== null) {\r\n        this.computeBoundingSphere();\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    applyQuaternion(q) {\r\n      _m1.makeRotationFromQuaternion(q);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    rotateX(angle) {\r\n      // rotate geometry around world x-axis\r\n      _m1.makeRotationX(angle);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    rotateY(angle) {\r\n      // rotate geometry around world y-axis\r\n      _m1.makeRotationY(angle);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    rotateZ(angle) {\r\n      // rotate geometry around world z-axis\r\n      _m1.makeRotationZ(angle);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    translate(x, y, z) {\r\n      // translate geometry\r\n      _m1.makeTranslation(x, y, z);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    scale(x, y, z) {\r\n      // scale geometry\r\n      _m1.makeScale(x, y, z);\r\n\r\n      this.applyMatrix4(_m1);\r\n      return this;\r\n    }\r\n\r\n    lookAt(vector) {\r\n      _obj.lookAt(vector);\r\n\r\n      _obj.updateMatrix();\r\n\r\n      this.applyMatrix4(_obj.matrix);\r\n      return this;\r\n    }\r\n\r\n    center() {\r\n      this.computeBoundingBox();\r\n      this.boundingBox.getCenter(_offset).negate();\r\n      this.translate(_offset.x, _offset.y, _offset.z);\r\n      return this;\r\n    }\r\n\r\n    setFromPoints(points) {\r\n      const position = [];\r\n\r\n      for (let i = 0, l = points.length; i < l; i++) {\r\n        const point = points[i];\r\n        position.push(point.x, point.y, point.z || 0);\r\n      }\r\n\r\n      this.setAttribute('position', new Float32BufferAttribute(position, 3));\r\n      return this;\r\n    }\r\n\r\n    computeBoundingBox() {\r\n      if (this.boundingBox === null) {\r\n        this.boundingBox = new Box3();\r\n      }\r\n\r\n      const position = this.attributes.position;\r\n      const morphAttributesPosition = this.morphAttributes.position;\r\n\r\n      if (position && position.isGLBufferAttribute) {\r\n        console.error(\r\n          'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".',\r\n          this,\r\n        );\r\n        this.boundingBox.set(\r\n          new Vector3(-Infinity, -Infinity, -Infinity),\r\n          new Vector3(+Infinity, +Infinity, +Infinity),\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (position !== undefined) {\r\n        this.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\r\n\r\n        if (morphAttributesPosition) {\r\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n            const morphAttribute = morphAttributesPosition[i];\r\n\r\n            _box$1.setFromBufferAttribute(morphAttribute);\r\n\r\n            if (this.morphTargetsRelative) {\r\n              _vector$8.addVectors(this.boundingBox.min, _box$1.min);\r\n\r\n              this.boundingBox.expandByPoint(_vector$8);\r\n\r\n              _vector$8.addVectors(this.boundingBox.max, _box$1.max);\r\n\r\n              this.boundingBox.expandByPoint(_vector$8);\r\n            } else {\r\n              this.boundingBox.expandByPoint(_box$1.min);\r\n              this.boundingBox.expandByPoint(_box$1.max);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        this.boundingBox.makeEmpty();\r\n      }\r\n\r\n      if (\r\n        isNaN(this.boundingBox.min.x) ||\r\n        isNaN(this.boundingBox.min.y) ||\r\n        isNaN(this.boundingBox.min.z)\r\n      ) {\r\n        console.error(\r\n          'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',\r\n          this,\r\n        );\r\n      }\r\n    }\r\n\r\n    computeBoundingSphere() {\r\n      if (this.boundingSphere === null) {\r\n        this.boundingSphere = new Sphere();\r\n      }\r\n\r\n      const position = this.attributes.position;\r\n      const morphAttributesPosition = this.morphAttributes.position;\r\n\r\n      if (position && position.isGLBufferAttribute) {\r\n        console.error(\r\n          'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".',\r\n          this,\r\n        );\r\n        this.boundingSphere.set(new Vector3(), Infinity);\r\n        return;\r\n      }\r\n\r\n      if (position) {\r\n        // first, find the center of the bounding sphere\r\n        const center = this.boundingSphere.center;\r\n\r\n        _box$1.setFromBufferAttribute(position); // process morph attributes if present\r\n\r\n        if (morphAttributesPosition) {\r\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n            const morphAttribute = morphAttributesPosition[i];\r\n\r\n            _boxMorphTargets.setFromBufferAttribute(morphAttribute);\r\n\r\n            if (this.morphTargetsRelative) {\r\n              _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);\r\n\r\n              _box$1.expandByPoint(_vector$8);\r\n\r\n              _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);\r\n\r\n              _box$1.expandByPoint(_vector$8);\r\n            } else {\r\n              _box$1.expandByPoint(_boxMorphTargets.min);\r\n\r\n              _box$1.expandByPoint(_boxMorphTargets.max);\r\n            }\r\n          }\r\n        }\r\n\r\n        _box$1.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\r\n        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n        let maxRadiusSq = 0;\r\n\r\n        for (let i = 0, il = position.count; i < il; i++) {\r\n          _vector$8.fromBufferAttribute(position, i);\r\n\r\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\r\n        } // process morph attributes if present\r\n\r\n        if (morphAttributesPosition) {\r\n          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {\r\n            const morphAttribute = morphAttributesPosition[i];\r\n            const morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {\r\n              _vector$8.fromBufferAttribute(morphAttribute, j);\r\n\r\n              if (morphTargetsRelative) {\r\n                _offset.fromBufferAttribute(position, j);\r\n\r\n                _vector$8.add(_offset);\r\n              }\r\n\r\n              maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));\r\n            }\r\n          }\r\n        }\r\n\r\n        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\r\n\r\n        if (isNaN(this.boundingSphere.radius)) {\r\n          console.error(\r\n            'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',\r\n            this,\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    computeFaceNormals() {\r\n      // backwards compatibility\r\n    }\r\n\r\n    computeTangents() {\r\n      const index = this.index;\r\n      const attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\r\n      // (per vertex tangents)\r\n\r\n      if (\r\n        index === null ||\r\n        attributes.position === undefined ||\r\n        attributes.normal === undefined ||\r\n        attributes.uv === undefined\r\n      ) {\r\n        console.error(\r\n          'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)',\r\n        );\r\n        return;\r\n      }\r\n\r\n      const indices = index.array;\r\n      const positions = attributes.position.array;\r\n      const normals = attributes.normal.array;\r\n      const uvs = attributes.uv.array;\r\n      const nVertices = positions.length / 3;\r\n\r\n      if (attributes.tangent === undefined) {\r\n        this.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\r\n      }\r\n\r\n      const tangents = attributes.tangent.array;\r\n      const tan1 = [],\r\n        tan2 = [];\r\n\r\n      for (let i = 0; i < nVertices; i++) {\r\n        tan1[i] = new Vector3();\r\n        tan2[i] = new Vector3();\r\n      }\r\n\r\n      const vA = new Vector3(),\r\n        vB = new Vector3(),\r\n        vC = new Vector3(),\r\n        uvA = new Vector2(),\r\n        uvB = new Vector2(),\r\n        uvC = new Vector2(),\r\n        sdir = new Vector3(),\r\n        tdir = new Vector3();\r\n\r\n      function handleTriangle(a, b, c) {\r\n        vA.fromArray(positions, a * 3);\r\n        vB.fromArray(positions, b * 3);\r\n        vC.fromArray(positions, c * 3);\r\n        uvA.fromArray(uvs, a * 2);\r\n        uvB.fromArray(uvs, b * 2);\r\n        uvC.fromArray(uvs, c * 2);\r\n        vB.sub(vA);\r\n        vC.sub(vA);\r\n        uvB.sub(uvA);\r\n        uvC.sub(uvA);\r\n        const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\r\n\r\n        if (!isFinite(r)) return;\r\n        sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\r\n        tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\r\n        tan1[a].add(sdir);\r\n        tan1[b].add(sdir);\r\n        tan1[c].add(sdir);\r\n        tan2[a].add(tdir);\r\n        tan2[b].add(tdir);\r\n        tan2[c].add(tdir);\r\n      }\r\n\r\n      let groups = this.groups;\r\n\r\n      if (groups.length === 0) {\r\n        groups = [\r\n          {\r\n            start: 0,\r\n            count: indices.length,\r\n          },\r\n        ];\r\n      }\r\n\r\n      for (let i = 0, il = groups.length; i < il; ++i) {\r\n        const group = groups[i];\r\n        const start = group.start;\r\n        const count = group.count;\r\n\r\n        for (let j = start, jl = start + count; j < jl; j += 3) {\r\n          handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\r\n        }\r\n      }\r\n\r\n      const tmp = new Vector3(),\r\n        tmp2 = new Vector3();\r\n      const n = new Vector3(),\r\n        n2 = new Vector3();\r\n\r\n      function handleVertex(v) {\r\n        n.fromArray(normals, v * 3);\r\n        n2.copy(n);\r\n        const t = tan1[v]; // Gram-Schmidt orthogonalize\r\n\r\n        tmp.copy(t);\r\n        tmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\r\n\r\n        tmp2.crossVectors(n2, t);\r\n        const test = tmp2.dot(tan2[v]);\r\n        const w = test < 0.0 ? -1.0 : 1.0;\r\n        tangents[v * 4] = tmp.x;\r\n        tangents[v * 4 + 1] = tmp.y;\r\n        tangents[v * 4 + 2] = tmp.z;\r\n        tangents[v * 4 + 3] = w;\r\n      }\r\n\r\n      for (let i = 0, il = groups.length; i < il; ++i) {\r\n        const group = groups[i];\r\n        const start = group.start;\r\n        const count = group.count;\r\n\r\n        for (let j = start, jl = start + count; j < jl; j += 3) {\r\n          handleVertex(indices[j + 0]);\r\n          handleVertex(indices[j + 1]);\r\n          handleVertex(indices[j + 2]);\r\n        }\r\n      }\r\n    }\r\n\r\n    computeVertexNormals() {\r\n      const index = this.index;\r\n      const positionAttribute = this.getAttribute('position');\r\n\r\n      if (positionAttribute !== undefined) {\r\n        let normalAttribute = this.getAttribute('normal');\r\n\r\n        if (normalAttribute === undefined) {\r\n          normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\r\n          this.setAttribute('normal', normalAttribute);\r\n        } else {\r\n          // reset existing normals to zero\r\n          for (let i = 0, il = normalAttribute.count; i < il; i++) {\r\n            normalAttribute.setXYZ(i, 0, 0, 0);\r\n          }\r\n        }\r\n\r\n        const pA = new Vector3(),\r\n          pB = new Vector3(),\r\n          pC = new Vector3();\r\n        const nA = new Vector3(),\r\n          nB = new Vector3(),\r\n          nC = new Vector3();\r\n        const cb = new Vector3(),\r\n          ab = new Vector3(); // indexed elements\r\n\r\n        if (index) {\r\n          for (let i = 0, il = index.count; i < il; i += 3) {\r\n            const vA = index.getX(i + 0);\r\n            const vB = index.getX(i + 1);\r\n            const vC = index.getX(i + 2);\r\n            pA.fromBufferAttribute(positionAttribute, vA);\r\n            pB.fromBufferAttribute(positionAttribute, vB);\r\n            pC.fromBufferAttribute(positionAttribute, vC);\r\n            cb.subVectors(pC, pB);\r\n            ab.subVectors(pA, pB);\r\n            cb.cross(ab);\r\n            nA.fromBufferAttribute(normalAttribute, vA);\r\n            nB.fromBufferAttribute(normalAttribute, vB);\r\n            nC.fromBufferAttribute(normalAttribute, vC);\r\n            nA.add(cb);\r\n            nB.add(cb);\r\n            nC.add(cb);\r\n            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\r\n            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\r\n            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\r\n          }\r\n        } else {\r\n          // non-indexed elements (unconnected triangle soup)\r\n          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {\r\n            pA.fromBufferAttribute(positionAttribute, i + 0);\r\n            pB.fromBufferAttribute(positionAttribute, i + 1);\r\n            pC.fromBufferAttribute(positionAttribute, i + 2);\r\n            cb.subVectors(pC, pB);\r\n            ab.subVectors(pA, pB);\r\n            cb.cross(ab);\r\n            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);\r\n            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);\r\n            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);\r\n          }\r\n        }\r\n\r\n        this.normalizeNormals();\r\n        normalAttribute.needsUpdate = true;\r\n      }\r\n    }\r\n\r\n    merge(geometry, offset) {\r\n      if (!(geometry && geometry.isBufferGeometry)) {\r\n        console.error(\r\n          'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',\r\n          geometry,\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (offset === undefined) {\r\n        offset = 0;\r\n        console.warn(\r\n          'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' +\r\n            'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.',\r\n        );\r\n      }\r\n\r\n      const attributes = this.attributes;\r\n\r\n      for (const key in attributes) {\r\n        if (geometry.attributes[key] === undefined) continue;\r\n        const attribute1 = attributes[key];\r\n        const attributeArray1 = attribute1.array;\r\n        const attribute2 = geometry.attributes[key];\r\n        const attributeArray2 = attribute2.array;\r\n        const attributeOffset = attribute2.itemSize * offset;\r\n        const length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\r\n\r\n        for (let i = 0, j = attributeOffset; i < length; i++, j++) {\r\n          attributeArray1[j] = attributeArray2[i];\r\n        }\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    normalizeNormals() {\r\n      const normals = this.attributes.normal;\r\n\r\n      for (let i = 0, il = normals.count; i < il; i++) {\r\n        _vector$8.fromBufferAttribute(normals, i);\r\n\r\n        _vector$8.normalize();\r\n\r\n        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);\r\n      }\r\n    }\r\n\r\n    toNonIndexed() {\r\n      function convertBufferAttribute(attribute, indices) {\r\n        const array = attribute.array;\r\n        const itemSize = attribute.itemSize;\r\n        const normalized = attribute.normalized;\r\n        const array2 = new array.constructor(indices.length * itemSize);\r\n        let index = 0,\r\n          index2 = 0;\r\n\r\n        for (let i = 0, l = indices.length; i < l; i++) {\r\n          index = indices[i] * itemSize;\r\n\r\n          for (let j = 0; j < itemSize; j++) {\r\n            array2[index2++] = array[index++];\r\n          }\r\n        }\r\n\r\n        return new BufferAttribute(array2, itemSize, normalized);\r\n      } //\r\n\r\n      if (this.index === null) {\r\n        console.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\r\n        return this;\r\n      }\r\n\r\n      const geometry2 = new BufferGeometry();\r\n      const indices = this.index.array;\r\n      const attributes = this.attributes; // attributes\r\n\r\n      for (const name in attributes) {\r\n        const attribute = attributes[name];\r\n        const newAttribute = convertBufferAttribute(attribute, indices);\r\n        geometry2.setAttribute(name, newAttribute);\r\n      } // morph attributes\r\n\r\n      const morphAttributes = this.morphAttributes;\r\n\r\n      for (const name in morphAttributes) {\r\n        const morphArray = [];\r\n        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n        for (let i = 0, il = morphAttribute.length; i < il; i++) {\r\n          const attribute = morphAttribute[i];\r\n          const newAttribute = convertBufferAttribute(attribute, indices);\r\n          morphArray.push(newAttribute);\r\n        }\r\n\r\n        geometry2.morphAttributes[name] = morphArray;\r\n      }\r\n\r\n      geometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\r\n\r\n      const groups = this.groups;\r\n\r\n      for (let i = 0, l = groups.length; i < l; i++) {\r\n        const group = groups[i];\r\n        geometry2.addGroup(group.start, group.count, group.materialIndex);\r\n      }\r\n\r\n      return geometry2;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = {\r\n        metadata: {\r\n          version: 4.5,\r\n          type: 'BufferGeometry',\r\n          generator: 'BufferGeometry.toJSON',\r\n        },\r\n      }; // standard BufferGeometry serialization\r\n\r\n      data.uuid = this.uuid;\r\n      data.type = this.type;\r\n      if (this.name !== '') data.name = this.name;\r\n      if (Object.keys(this.userData).length > 0) data.userData = this.userData;\r\n\r\n      if (this.parameters !== undefined) {\r\n        const parameters = this.parameters;\r\n\r\n        for (const key in parameters) {\r\n          if (parameters[key] !== undefined) data[key] = parameters[key];\r\n        }\r\n\r\n        return data;\r\n      } // for simplicity the code assumes attributes are not shared across geometries, see #15811\r\n\r\n      data.data = {\r\n        attributes: {},\r\n      };\r\n      const index = this.index;\r\n\r\n      if (index !== null) {\r\n        data.data.index = {\r\n          type: index.array.constructor.name,\r\n          array: Array.prototype.slice.call(index.array),\r\n        };\r\n      }\r\n\r\n      const attributes = this.attributes;\r\n\r\n      for (const key in attributes) {\r\n        const attribute = attributes[key];\r\n        data.data.attributes[key] = attribute.toJSON(data.data);\r\n      }\r\n\r\n      const morphAttributes = {};\r\n      let hasMorphAttributes = false;\r\n\r\n      for (const key in this.morphAttributes) {\r\n        const attributeArray = this.morphAttributes[key];\r\n        const array = [];\r\n\r\n        for (let i = 0, il = attributeArray.length; i < il; i++) {\r\n          const attribute = attributeArray[i];\r\n          array.push(attribute.toJSON(data.data));\r\n        }\r\n\r\n        if (array.length > 0) {\r\n          morphAttributes[key] = array;\r\n          hasMorphAttributes = true;\r\n        }\r\n      }\r\n\r\n      if (hasMorphAttributes) {\r\n        data.data.morphAttributes = morphAttributes;\r\n        data.data.morphTargetsRelative = this.morphTargetsRelative;\r\n      }\r\n\r\n      const groups = this.groups;\r\n\r\n      if (groups.length > 0) {\r\n        data.data.groups = JSON.parse(JSON.stringify(groups));\r\n      }\r\n\r\n      const boundingSphere = this.boundingSphere;\r\n\r\n      if (boundingSphere !== null) {\r\n        data.data.boundingSphere = {\r\n          center: boundingSphere.center.toArray(),\r\n          radius: boundingSphere.radius,\r\n        };\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    clone() {\r\n      /*\r\n\t\t\t // Handle primitives\r\n\t\t\t\t const parameters = this.parameters;\r\n\t\t\t\t if ( parameters !== undefined ) {\r\n\t\t\t\t const values = [];\r\n\t\t\t\t for ( const key in parameters ) {\r\n\t\t\t\t values.push( parameters[ key ] );\r\n\t\t\t\t }\r\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\t\t\t\t }\r\n\t\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n      return new BufferGeometry().copy(this);\r\n    }\r\n\r\n    copy(source) {\r\n      // reset\r\n      this.index = null;\r\n      this.attributes = {};\r\n      this.morphAttributes = {};\r\n      this.groups = [];\r\n      this.boundingBox = null;\r\n      this.boundingSphere = null; // used for storing cloned, shared data\r\n\r\n      const data = {}; // name\r\n\r\n      this.name = source.name; // index\r\n\r\n      const index = source.index;\r\n\r\n      if (index !== null) {\r\n        this.setIndex(index.clone(data));\r\n      } // attributes\r\n\r\n      const attributes = source.attributes;\r\n\r\n      for (const name in attributes) {\r\n        const attribute = attributes[name];\r\n        this.setAttribute(name, attribute.clone(data));\r\n      } // morph attributes\r\n\r\n      const morphAttributes = source.morphAttributes;\r\n\r\n      for (const name in morphAttributes) {\r\n        const array = [];\r\n        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n        for (let i = 0, l = morphAttribute.length; i < l; i++) {\r\n          array.push(morphAttribute[i].clone(data));\r\n        }\r\n\r\n        this.morphAttributes[name] = array;\r\n      }\r\n\r\n      this.morphTargetsRelative = source.morphTargetsRelative; // groups\r\n\r\n      const groups = source.groups;\r\n\r\n      for (let i = 0, l = groups.length; i < l; i++) {\r\n        const group = groups[i];\r\n        this.addGroup(group.start, group.count, group.materialIndex);\r\n      } // bounding box\r\n\r\n      const boundingBox = source.boundingBox;\r\n\r\n      if (boundingBox !== null) {\r\n        this.boundingBox = boundingBox.clone();\r\n      } // bounding sphere\r\n\r\n      const boundingSphere = source.boundingSphere;\r\n\r\n      if (boundingSphere !== null) {\r\n        this.boundingSphere = boundingSphere.clone();\r\n      } // draw range\r\n\r\n      this.drawRange.start = source.drawRange.start;\r\n      this.drawRange.count = source.drawRange.count; // user data\r\n\r\n      this.userData = source.userData;\r\n      return this;\r\n    }\r\n\r\n    dispose() {\r\n      this.dispatchEvent({\r\n        type: 'dispose',\r\n      });\r\n    }\r\n  }\r\n\r\n  BufferGeometry.prototype.isBufferGeometry = true;\r\n\r\n  const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _ray$2 = /*@__PURE__*/ new Ray();\r\n\r\n  const _sphere$3 = /*@__PURE__*/ new Sphere();\r\n\r\n  const _vA$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vB$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vC$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _tempA = /*@__PURE__*/ new Vector3();\r\n\r\n  const _tempB = /*@__PURE__*/ new Vector3();\r\n\r\n  const _tempC = /*@__PURE__*/ new Vector3();\r\n\r\n  const _morphA = /*@__PURE__*/ new Vector3();\r\n\r\n  const _morphB = /*@__PURE__*/ new Vector3();\r\n\r\n  const _morphC = /*@__PURE__*/ new Vector3();\r\n\r\n  const _uvA$1 = /*@__PURE__*/ new Vector2();\r\n\r\n  const _uvB$1 = /*@__PURE__*/ new Vector2();\r\n\r\n  const _uvC$1 = /*@__PURE__*/ new Vector2();\r\n\r\n  const _intersectionPoint = /*@__PURE__*/ new Vector3();\r\n\r\n  const _intersectionPointWorld = /*@__PURE__*/ new Vector3();\r\n\r\n  class Mesh extends Object3D {\r\n    constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {\r\n      super();\r\n      this.type = 'Mesh';\r\n      this.geometry = geometry;\r\n      this.material = material;\r\n      this.updateMorphTargets();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n\r\n      if (source.morphTargetInfluences !== undefined) {\r\n        this.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n      }\r\n\r\n      if (source.morphTargetDictionary !== undefined) {\r\n        this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\r\n      }\r\n\r\n      this.material = source.material;\r\n      this.geometry = source.geometry;\r\n      return this;\r\n    }\r\n\r\n    updateMorphTargets() {\r\n      const geometry = this.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const morphAttributes = geometry.morphAttributes;\r\n        const keys = Object.keys(morphAttributes);\r\n\r\n        if (keys.length > 0) {\r\n          const morphAttribute = morphAttributes[keys[0]];\r\n\r\n          if (morphAttribute !== undefined) {\r\n            this.morphTargetInfluences = [];\r\n            this.morphTargetDictionary = {};\r\n\r\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\r\n              const name = morphAttribute[m].name || String(m);\r\n              this.morphTargetInfluences.push(0);\r\n              this.morphTargetDictionary[name] = m;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        const morphTargets = geometry.morphTargets;\r\n\r\n        if (morphTargets !== undefined && morphTargets.length > 0) {\r\n          console.error(\r\n            'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      const geometry = this.geometry;\r\n      const material = this.material;\r\n      const matrixWorld = this.matrixWorld;\r\n      if (material === undefined) return; // Checking boundingSphere distance to ray\r\n\r\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\r\n\r\n      _sphere$3.copy(geometry.boundingSphere);\r\n\r\n      _sphere$3.applyMatrix4(matrixWorld);\r\n\r\n      if (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\r\n\r\n      _inverseMatrix$2.copy(matrixWorld).invert();\r\n\r\n      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2); // Check boundingBox before continuing\r\n\r\n      if (geometry.boundingBox !== null) {\r\n        if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;\r\n      }\r\n\r\n      let intersection;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const index = geometry.index;\r\n        const position = geometry.attributes.position;\r\n        const morphPosition = geometry.morphAttributes.position;\r\n        const morphTargetsRelative = geometry.morphTargetsRelative;\r\n        const uv = geometry.attributes.uv;\r\n        const uv2 = geometry.attributes.uv2;\r\n        const groups = geometry.groups;\r\n        const drawRange = geometry.drawRange;\r\n\r\n        if (index !== null) {\r\n          // indexed buffer geometry\r\n          if (Array.isArray(material)) {\r\n            for (let i = 0, il = groups.length; i < il; i++) {\r\n              const group = groups[i];\r\n              const groupMaterial = material[group.materialIndex];\r\n              const start = Math.max(group.start, drawRange.start);\r\n              const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\r\n\r\n              for (let j = start, jl = end; j < jl; j += 3) {\r\n                const a = index.getX(j);\r\n                const b = index.getX(j + 1);\r\n                const c = index.getX(j + 2);\r\n                intersection = checkBufferGeometryIntersection(\r\n                  this,\r\n                  groupMaterial,\r\n                  raycaster,\r\n                  _ray$2,\r\n                  position,\r\n                  morphPosition,\r\n                  morphTargetsRelative,\r\n                  uv,\r\n                  uv2,\r\n                  a,\r\n                  b,\r\n                  c,\r\n                );\r\n\r\n                if (intersection) {\r\n                  intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\r\n\r\n                  intersection.face.materialIndex = group.materialIndex;\r\n                  intersects.push(intersection);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            const start = Math.max(0, drawRange.start);\r\n            const end = Math.min(index.count, drawRange.start + drawRange.count);\r\n\r\n            for (let i = start, il = end; i < il; i += 3) {\r\n              const a = index.getX(i);\r\n              const b = index.getX(i + 1);\r\n              const c = index.getX(i + 2);\r\n              intersection = checkBufferGeometryIntersection(\r\n                this,\r\n                material,\r\n                raycaster,\r\n                _ray$2,\r\n                position,\r\n                morphPosition,\r\n                morphTargetsRelative,\r\n                uv,\r\n                uv2,\r\n                a,\r\n                b,\r\n                c,\r\n              );\r\n\r\n              if (intersection) {\r\n                intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\r\n\r\n                intersects.push(intersection);\r\n              }\r\n            }\r\n          }\r\n        } else if (position !== undefined) {\r\n          // non-indexed buffer geometry\r\n          if (Array.isArray(material)) {\r\n            for (let i = 0, il = groups.length; i < il; i++) {\r\n              const group = groups[i];\r\n              const groupMaterial = material[group.materialIndex];\r\n              const start = Math.max(group.start, drawRange.start);\r\n              const end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\r\n\r\n              for (let j = start, jl = end; j < jl; j += 3) {\r\n                const a = j;\r\n                const b = j + 1;\r\n                const c = j + 2;\r\n                intersection = checkBufferGeometryIntersection(\r\n                  this,\r\n                  groupMaterial,\r\n                  raycaster,\r\n                  _ray$2,\r\n                  position,\r\n                  morphPosition,\r\n                  morphTargetsRelative,\r\n                  uv,\r\n                  uv2,\r\n                  a,\r\n                  b,\r\n                  c,\r\n                );\r\n\r\n                if (intersection) {\r\n                  intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\r\n\r\n                  intersection.face.materialIndex = group.materialIndex;\r\n                  intersects.push(intersection);\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            const start = Math.max(0, drawRange.start);\r\n            const end = Math.min(position.count, drawRange.start + drawRange.count);\r\n\r\n            for (let i = start, il = end; i < il; i += 3) {\r\n              const a = i;\r\n              const b = i + 1;\r\n              const c = i + 2;\r\n              intersection = checkBufferGeometryIntersection(\r\n                this,\r\n                material,\r\n                raycaster,\r\n                _ray$2,\r\n                position,\r\n                morphPosition,\r\n                morphTargetsRelative,\r\n                uv,\r\n                uv2,\r\n                a,\r\n                b,\r\n                c,\r\n              );\r\n\r\n              if (intersection) {\r\n                intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\r\n\r\n                intersects.push(intersection);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else if (geometry.isGeometry) {\r\n        console.error(\r\n          'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Mesh.prototype.isMesh = true;\r\n\r\n  function checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\r\n    let intersect;\r\n\r\n    if (material.side === BackSide) {\r\n      intersect = ray.intersectTriangle(pC, pB, pA, true, point);\r\n    } else {\r\n      intersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\r\n    }\r\n\r\n    if (intersect === null) return null;\r\n\r\n    _intersectionPointWorld.copy(point);\r\n\r\n    _intersectionPointWorld.applyMatrix4(object.matrixWorld);\r\n\r\n    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\r\n    if (distance < raycaster.near || distance > raycaster.far) return null;\r\n    return {\r\n      distance: distance,\r\n      point: _intersectionPointWorld.clone(),\r\n      object: object,\r\n    };\r\n  }\r\n\r\n  function checkBufferGeometryIntersection(\r\n    object,\r\n    material,\r\n    raycaster,\r\n    ray,\r\n    position,\r\n    morphPosition,\r\n    morphTargetsRelative,\r\n    uv,\r\n    uv2,\r\n    a,\r\n    b,\r\n    c,\r\n  ) {\r\n    _vA$1.fromBufferAttribute(position, a);\r\n\r\n    _vB$1.fromBufferAttribute(position, b);\r\n\r\n    _vC$1.fromBufferAttribute(position, c);\r\n\r\n    const morphInfluences = object.morphTargetInfluences;\r\n\r\n    if (material.morphTargets && morphPosition && morphInfluences) {\r\n      _morphA.set(0, 0, 0);\r\n\r\n      _morphB.set(0, 0, 0);\r\n\r\n      _morphC.set(0, 0, 0);\r\n\r\n      for (let i = 0, il = morphPosition.length; i < il; i++) {\r\n        const influence = morphInfluences[i];\r\n        const morphAttribute = morphPosition[i];\r\n        if (influence === 0) continue;\r\n\r\n        _tempA.fromBufferAttribute(morphAttribute, a);\r\n\r\n        _tempB.fromBufferAttribute(morphAttribute, b);\r\n\r\n        _tempC.fromBufferAttribute(morphAttribute, c);\r\n\r\n        if (morphTargetsRelative) {\r\n          _morphA.addScaledVector(_tempA, influence);\r\n\r\n          _morphB.addScaledVector(_tempB, influence);\r\n\r\n          _morphC.addScaledVector(_tempC, influence);\r\n        } else {\r\n          _morphA.addScaledVector(_tempA.sub(_vA$1), influence);\r\n\r\n          _morphB.addScaledVector(_tempB.sub(_vB$1), influence);\r\n\r\n          _morphC.addScaledVector(_tempC.sub(_vC$1), influence);\r\n        }\r\n      }\r\n\r\n      _vA$1.add(_morphA);\r\n\r\n      _vB$1.add(_morphB);\r\n\r\n      _vC$1.add(_morphC);\r\n    }\r\n\r\n    if (object.isSkinnedMesh) {\r\n      object.boneTransform(a, _vA$1);\r\n      object.boneTransform(b, _vB$1);\r\n      object.boneTransform(c, _vC$1);\r\n    }\r\n\r\n    const intersection = checkIntersection(\r\n      object,\r\n      material,\r\n      raycaster,\r\n      ray,\r\n      _vA$1,\r\n      _vB$1,\r\n      _vC$1,\r\n      _intersectionPoint,\r\n    );\r\n\r\n    if (intersection) {\r\n      if (uv) {\r\n        _uvA$1.fromBufferAttribute(uv, a);\r\n\r\n        _uvB$1.fromBufferAttribute(uv, b);\r\n\r\n        _uvC$1.fromBufferAttribute(uv, c);\r\n\r\n        intersection.uv = Triangle.getUV(\r\n          _intersectionPoint,\r\n          _vA$1,\r\n          _vB$1,\r\n          _vC$1,\r\n          _uvA$1,\r\n          _uvB$1,\r\n          _uvC$1,\r\n          new Vector2(),\r\n        );\r\n      }\r\n\r\n      if (uv2) {\r\n        _uvA$1.fromBufferAttribute(uv2, a);\r\n\r\n        _uvB$1.fromBufferAttribute(uv2, b);\r\n\r\n        _uvC$1.fromBufferAttribute(uv2, c);\r\n\r\n        intersection.uv2 = Triangle.getUV(\r\n          _intersectionPoint,\r\n          _vA$1,\r\n          _vB$1,\r\n          _vC$1,\r\n          _uvA$1,\r\n          _uvB$1,\r\n          _uvC$1,\r\n          new Vector2(),\r\n        );\r\n      }\r\n\r\n      const face = {\r\n        a: a,\r\n        b: b,\r\n        c: c,\r\n        normal: new Vector3(),\r\n        materialIndex: 0,\r\n      };\r\n      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);\r\n      intersection.face = face;\r\n    }\r\n\r\n    return intersection;\r\n  }\r\n\r\n  class BoxGeometry extends BufferGeometry {\r\n    constructor(\r\n      width = 1,\r\n      height = 1,\r\n      depth = 1,\r\n      widthSegments = 1,\r\n      heightSegments = 1,\r\n      depthSegments = 1,\r\n    ) {\r\n      super();\r\n      this.type = 'BoxGeometry';\r\n      this.parameters = {\r\n        width: width,\r\n        height: height,\r\n        depth: depth,\r\n        widthSegments: widthSegments,\r\n        heightSegments: heightSegments,\r\n        depthSegments: depthSegments,\r\n      };\r\n      const scope = this; // segments\r\n\r\n      widthSegments = Math.floor(widthSegments);\r\n      heightSegments = Math.floor(heightSegments);\r\n      depthSegments = Math.floor(depthSegments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      let numberOfVertices = 0;\r\n      let groupStart = 0; // build each side of the box geometry\r\n\r\n      buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\r\n\r\n      buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\r\n\r\n      buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\r\n\r\n      buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\r\n\r\n      buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\r\n\r\n      buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\r\n      // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n\r\n      function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\r\n        const segmentWidth = width / gridX;\r\n        const segmentHeight = height / gridY;\r\n        const widthHalf = width / 2;\r\n        const heightHalf = height / 2;\r\n        const depthHalf = depth / 2;\r\n        const gridX1 = gridX + 1;\r\n        const gridY1 = gridY + 1;\r\n        let vertexCounter = 0;\r\n        let groupCount = 0;\r\n        const vector = new Vector3(); // generate vertices, normals and uvs\r\n\r\n        for (let iy = 0; iy < gridY1; iy++) {\r\n          const y = iy * segmentHeight - heightHalf;\r\n\r\n          for (let ix = 0; ix < gridX1; ix++) {\r\n            const x = ix * segmentWidth - widthHalf; // set values to correct vector component\r\n\r\n            vector[u] = x * udir;\r\n            vector[v] = y * vdir;\r\n            vector[w] = depthHalf; // now apply vector to vertex buffer\r\n\r\n            vertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\r\n\r\n            vector[u] = 0;\r\n            vector[v] = 0;\r\n            vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\r\n\r\n            normals.push(vector.x, vector.y, vector.z); // uvs\r\n\r\n            uvs.push(ix / gridX);\r\n            uvs.push(1 - iy / gridY); // counters\r\n\r\n            vertexCounter += 1;\r\n          }\r\n        } // indices\r\n        // 1. you need three indices to draw a single face\r\n        // 2. a single segment consists of two faces\r\n        // 3. so we need to generate six (2*3) indices per segment\r\n\r\n        for (let iy = 0; iy < gridY; iy++) {\r\n          for (let ix = 0; ix < gridX; ix++) {\r\n            const a = numberOfVertices + ix + gridX1 * iy;\r\n            const b = numberOfVertices + ix + gridX1 * (iy + 1);\r\n            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\r\n            const d = numberOfVertices + (ix + 1) + gridX1 * iy; // faces\r\n\r\n            indices.push(a, b, d);\r\n            indices.push(b, c, d); // increase counter\r\n\r\n            groupCount += 6;\r\n          }\r\n        } // add a group to the geometry. this will ensure multi material support\r\n\r\n        scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\r\n\r\n        groupStart += groupCount; // update total number of vertices\r\n\r\n        numberOfVertices += vertexCounter;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uniform Utilities\r\n   */\r\n  function cloneUniforms(src) {\r\n    const dst = {};\r\n\r\n    for (const u in src) {\r\n      dst[u] = {};\r\n\r\n      for (const p in src[u]) {\r\n        const property = src[u][p];\r\n\r\n        if (\r\n          property &&\r\n          (property.isColor ||\r\n            property.isMatrix3 ||\r\n            property.isMatrix4 ||\r\n            property.isVector2 ||\r\n            property.isVector3 ||\r\n            property.isVector4 ||\r\n            property.isTexture ||\r\n            property.isQuaternion)\r\n        ) {\r\n          dst[u][p] = property.clone();\r\n        } else if (Array.isArray(property)) {\r\n          dst[u][p] = property.slice();\r\n        } else {\r\n          dst[u][p] = property;\r\n        }\r\n      }\r\n    }\r\n\r\n    return dst;\r\n  }\r\n  function mergeUniforms(uniforms) {\r\n    const merged = {};\r\n\r\n    for (let u = 0; u < uniforms.length; u++) {\r\n      const tmp = cloneUniforms(uniforms[u]);\r\n\r\n      for (const p in tmp) {\r\n        merged[p] = tmp[p];\r\n      }\r\n    }\r\n\r\n    return merged;\r\n  } // Legacy\r\n\r\n  const UniformsUtils = {\r\n    clone: cloneUniforms,\r\n    merge: mergeUniforms,\r\n  };\r\n\r\n  var default_vertex =\r\n    'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\r\n  var default_fragment = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tdefines: { \"label\" : \"value\" },\r\n   *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\r\n   *\r\n   *\tfragmentShader: <string>,\r\n   *\tvertexShader: <string>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tlights: <bool>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>\r\n   * }\r\n   */\r\n\r\n  class ShaderMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'ShaderMaterial';\r\n      this.defines = {};\r\n      this.uniforms = {};\r\n      this.vertexShader = default_vertex;\r\n      this.fragmentShader = default_fragment;\r\n      this.linewidth = 1;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.fog = false; // set to use scene fog\r\n\r\n      this.lights = false; // set to use scene lights\r\n\r\n      this.clipping = false; // set to use user-defined clipping planes\r\n\r\n      this.morphTargets = false; // set to use morph targets\r\n\r\n      this.morphNormals = false; // set to use morph normals\r\n\r\n      this.extensions = {\r\n        derivatives: false,\r\n        // set to use derivatives\r\n        fragDepth: false,\r\n        // set to use fragment depth values\r\n        drawBuffers: false,\r\n        // set to use draw buffers\r\n        shaderTextureLOD: false, // set to use shader texture LOD\r\n      }; // When rendered geometry doesn't include these attributes but the material does,\r\n      // use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\r\n      this.defaultAttributeValues = {\r\n        color: [1, 1, 1],\r\n        uv: [0, 0],\r\n        uv2: [0, 0],\r\n      };\r\n      this.index0AttributeName = undefined;\r\n      this.uniformsNeedUpdate = false;\r\n      this.glslVersion = null;\r\n\r\n      if (parameters !== undefined) {\r\n        if (parameters.attributes !== undefined) {\r\n          console.error(\r\n            'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.',\r\n          );\r\n        }\r\n\r\n        this.setValues(parameters);\r\n      }\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.fragmentShader = source.fragmentShader;\r\n      this.vertexShader = source.vertexShader;\r\n      this.uniforms = cloneUniforms(source.uniforms);\r\n      this.defines = Object.assign({}, source.defines);\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.lights = source.lights;\r\n      this.clipping = source.clipping;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      this.extensions = Object.assign({}, source.extensions);\r\n      this.glslVersion = source.glslVersion;\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.glslVersion = this.glslVersion;\r\n      data.uniforms = {};\r\n\r\n      for (const name in this.uniforms) {\r\n        const uniform = this.uniforms[name];\r\n        const value = uniform.value;\r\n\r\n        if (value && value.isTexture) {\r\n          data.uniforms[name] = {\r\n            type: 't',\r\n            value: value.toJSON(meta).uuid,\r\n          };\r\n        } else if (value && value.isColor) {\r\n          data.uniforms[name] = {\r\n            type: 'c',\r\n            value: value.getHex(),\r\n          };\r\n        } else if (value && value.isVector2) {\r\n          data.uniforms[name] = {\r\n            type: 'v2',\r\n            value: value.toArray(),\r\n          };\r\n        } else if (value && value.isVector3) {\r\n          data.uniforms[name] = {\r\n            type: 'v3',\r\n            value: value.toArray(),\r\n          };\r\n        } else if (value && value.isVector4) {\r\n          data.uniforms[name] = {\r\n            type: 'v4',\r\n            value: value.toArray(),\r\n          };\r\n        } else if (value && value.isMatrix3) {\r\n          data.uniforms[name] = {\r\n            type: 'm3',\r\n            value: value.toArray(),\r\n          };\r\n        } else if (value && value.isMatrix4) {\r\n          data.uniforms[name] = {\r\n            type: 'm4',\r\n            value: value.toArray(),\r\n          };\r\n        } else {\r\n          data.uniforms[name] = {\r\n            value: value,\r\n          }; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n        }\r\n      }\r\n\r\n      if (Object.keys(this.defines).length > 0) data.defines = this.defines;\r\n      data.vertexShader = this.vertexShader;\r\n      data.fragmentShader = this.fragmentShader;\r\n      const extensions = {};\r\n\r\n      for (const key in this.extensions) {\r\n        if (this.extensions[key] === true) extensions[key] = true;\r\n      }\r\n\r\n      if (Object.keys(extensions).length > 0) data.extensions = extensions;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  ShaderMaterial.prototype.isShaderMaterial = true;\r\n\r\n  class Camera extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this.type = 'Camera';\r\n      this.matrixWorldInverse = new Matrix4();\r\n      this.projectionMatrix = new Matrix4();\r\n      this.projectionMatrixInverse = new Matrix4();\r\n    }\r\n\r\n    copy(source, recursive) {\r\n      super.copy(source, recursive);\r\n      this.matrixWorldInverse.copy(source.matrixWorldInverse);\r\n      this.projectionMatrix.copy(source.projectionMatrix);\r\n      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\r\n      return this;\r\n    }\r\n\r\n    getWorldDirection(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Camera: .getWorldDirection() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      this.updateWorldMatrix(true, false);\r\n      const e = this.matrixWorld.elements;\r\n      return target.set(-e[8], -e[9], -e[10]).normalize();\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      super.updateMatrixWorld(force);\r\n      this.matrixWorldInverse.copy(this.matrixWorld).invert();\r\n    }\r\n\r\n    updateWorldMatrix(updateParents, updateChildren) {\r\n      super.updateWorldMatrix(updateParents, updateChildren);\r\n      this.matrixWorldInverse.copy(this.matrixWorld).invert();\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  Camera.prototype.isCamera = true;\r\n\r\n  class PerspectiveCamera extends Camera {\r\n    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {\r\n      super();\r\n      this.type = 'PerspectiveCamera';\r\n      this.fov = fov;\r\n      this.zoom = 1;\r\n      this.near = near;\r\n      this.far = far;\r\n      this.focus = 10;\r\n      this.aspect = aspect;\r\n      this.view = null;\r\n      this.filmGauge = 35; // width of the film (default in millimeters)\r\n\r\n      this.filmOffset = 0; // horizontal film offset (same unit as gauge)\r\n\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    copy(source, recursive) {\r\n      super.copy(source, recursive);\r\n      this.fov = source.fov;\r\n      this.zoom = source.zoom;\r\n      this.near = source.near;\r\n      this.far = source.far;\r\n      this.focus = source.focus;\r\n      this.aspect = source.aspect;\r\n      this.view = source.view === null ? null : Object.assign({}, source.view);\r\n      this.filmGauge = source.filmGauge;\r\n      this.filmOffset = source.filmOffset;\r\n      return this;\r\n    }\r\n    /**\r\n     * Sets the FOV by focal length in respect to the current .filmGauge.\r\n     *\r\n     * The default film gauge is 35, so that the focal length can be specified for\r\n     * a 35mm (full frame) camera.\r\n     *\r\n     * Values for focal length and film gauge must have the same unit.\r\n     */\r\n\r\n    setFocalLength(focalLength) {\r\n      /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\r\n      const vExtentSlope = (0.5 * this.getFilmHeight()) / focalLength;\r\n      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);\r\n      this.updateProjectionMatrix();\r\n    }\r\n    /**\r\n     * Calculates the focal length from the current .fov and .filmGauge.\r\n     */\r\n\r\n    getFocalLength() {\r\n      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);\r\n      return (0.5 * this.getFilmHeight()) / vExtentSlope;\r\n    }\r\n\r\n    getEffectiveFOV() {\r\n      return RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom);\r\n    }\r\n\r\n    getFilmWidth() {\r\n      // film not completely covered in portrait format (aspect < 1)\r\n      return this.filmGauge * Math.min(this.aspect, 1);\r\n    }\r\n\r\n    getFilmHeight() {\r\n      // film not completely covered in landscape format (aspect > 1)\r\n      return this.filmGauge / Math.max(this.aspect, 1);\r\n    }\r\n    /**\r\n     * Sets an offset in a larger frustum. This is useful for multi-window or\r\n     * multi-monitor/multi-machine setups.\r\n     *\r\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n     * the monitors are in grid like this\r\n     *\r\n     *\t +---+---+---+\r\n     *\t | A | B | C |\r\n     *\t +---+---+---+\r\n     *\t | D | E | F |\r\n     *\t +---+---+---+\r\n     *\r\n     * then for each monitor you would call it like this\r\n     *\r\n     *\t const w = 1920;\r\n     *\t const h = 1080;\r\n     *\t const fullWidth = w * 3;\r\n     *\t const fullHeight = h * 2;\r\n     *\r\n     *\t --A--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n     *\t --B--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n     *\t --C--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n     *\t --D--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n     *\t --E--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n     *\t --F--\r\n     *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n     *\r\n     *\t Note there is no reason monitors have to be the same size or in a grid.\r\n     */\r\n\r\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\r\n      this.aspect = fullWidth / fullHeight;\r\n\r\n      if (this.view === null) {\r\n        this.view = {\r\n          enabled: true,\r\n          fullWidth: 1,\r\n          fullHeight: 1,\r\n          offsetX: 0,\r\n          offsetY: 0,\r\n          width: 1,\r\n          height: 1,\r\n        };\r\n      }\r\n\r\n      this.view.enabled = true;\r\n      this.view.fullWidth = fullWidth;\r\n      this.view.fullHeight = fullHeight;\r\n      this.view.offsetX = x;\r\n      this.view.offsetY = y;\r\n      this.view.width = width;\r\n      this.view.height = height;\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    clearViewOffset() {\r\n      if (this.view !== null) {\r\n        this.view.enabled = false;\r\n      }\r\n\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    updateProjectionMatrix() {\r\n      const near = this.near;\r\n      let top = (near * Math.tan(DEG2RAD * 0.5 * this.fov)) / this.zoom;\r\n      let height = 2 * top;\r\n      let width = this.aspect * height;\r\n      let left = -0.5 * width;\r\n      const view = this.view;\r\n\r\n      if (this.view !== null && this.view.enabled) {\r\n        const fullWidth = view.fullWidth,\r\n          fullHeight = view.fullHeight;\r\n        left += (view.offsetX * width) / fullWidth;\r\n        top -= (view.offsetY * height) / fullHeight;\r\n        width *= view.width / fullWidth;\r\n        height *= view.height / fullHeight;\r\n      }\r\n\r\n      const skew = this.filmOffset;\r\n      if (skew !== 0) left += (near * skew) / this.getFilmWidth();\r\n      this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\r\n      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.object.fov = this.fov;\r\n      data.object.zoom = this.zoom;\r\n      data.object.near = this.near;\r\n      data.object.far = this.far;\r\n      data.object.focus = this.focus;\r\n      data.object.aspect = this.aspect;\r\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\r\n      data.object.filmGauge = this.filmGauge;\r\n      data.object.filmOffset = this.filmOffset;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  PerspectiveCamera.prototype.isPerspectiveCamera = true;\r\n\r\n  const fov = 90,\r\n    aspect = 1;\r\n\r\n  class CubeCamera extends Object3D {\r\n    constructor(near, far, renderTarget) {\r\n      super();\r\n      this.type = 'CubeCamera';\r\n\r\n      if (renderTarget.isWebGLCubeRenderTarget !== true) {\r\n        console.error(\r\n          'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.',\r\n        );\r\n        return;\r\n      }\r\n\r\n      this.renderTarget = renderTarget;\r\n      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraPX.layers = this.layers;\r\n      cameraPX.up.set(0, -1, 0);\r\n      cameraPX.lookAt(new Vector3(1, 0, 0));\r\n      this.add(cameraPX);\r\n      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraNX.layers = this.layers;\r\n      cameraNX.up.set(0, -1, 0);\r\n      cameraNX.lookAt(new Vector3(-1, 0, 0));\r\n      this.add(cameraNX);\r\n      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraPY.layers = this.layers;\r\n      cameraPY.up.set(0, 0, 1);\r\n      cameraPY.lookAt(new Vector3(0, 1, 0));\r\n      this.add(cameraPY);\r\n      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraNY.layers = this.layers;\r\n      cameraNY.up.set(0, 0, -1);\r\n      cameraNY.lookAt(new Vector3(0, -1, 0));\r\n      this.add(cameraNY);\r\n      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraPZ.layers = this.layers;\r\n      cameraPZ.up.set(0, -1, 0);\r\n      cameraPZ.lookAt(new Vector3(0, 0, 1));\r\n      this.add(cameraPZ);\r\n      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\r\n      cameraNZ.layers = this.layers;\r\n      cameraNZ.up.set(0, -1, 0);\r\n      cameraNZ.lookAt(new Vector3(0, 0, -1));\r\n      this.add(cameraNZ);\r\n    }\r\n\r\n    update(renderer, scene) {\r\n      if (this.parent === null) this.updateMatrixWorld();\r\n      const renderTarget = this.renderTarget;\r\n      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;\r\n      const currentXrEnabled = renderer.xr.enabled;\r\n      const currentRenderTarget = renderer.getRenderTarget();\r\n      renderer.xr.enabled = false;\r\n      const generateMipmaps = renderTarget.texture.generateMipmaps;\r\n      renderTarget.texture.generateMipmaps = false;\r\n      renderer.setRenderTarget(renderTarget, 0);\r\n      renderer.render(scene, cameraPX);\r\n      renderer.setRenderTarget(renderTarget, 1);\r\n      renderer.render(scene, cameraNX);\r\n      renderer.setRenderTarget(renderTarget, 2);\r\n      renderer.render(scene, cameraPY);\r\n      renderer.setRenderTarget(renderTarget, 3);\r\n      renderer.render(scene, cameraNY);\r\n      renderer.setRenderTarget(renderTarget, 4);\r\n      renderer.render(scene, cameraPZ);\r\n      renderTarget.texture.generateMipmaps = generateMipmaps;\r\n      renderer.setRenderTarget(renderTarget, 5);\r\n      renderer.render(scene, cameraNZ);\r\n      renderer.setRenderTarget(currentRenderTarget);\r\n      renderer.xr.enabled = currentXrEnabled;\r\n    }\r\n  }\r\n\r\n  class CubeTexture extends Texture {\r\n    constructor(\r\n      images,\r\n      mapping,\r\n      wrapS,\r\n      wrapT,\r\n      magFilter,\r\n      minFilter,\r\n      format,\r\n      type,\r\n      anisotropy,\r\n      encoding,\r\n    ) {\r\n      images = images !== undefined ? images : [];\r\n      mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n      format = format !== undefined ? format : RGBFormat;\r\n      super(\r\n        images,\r\n        mapping,\r\n        wrapS,\r\n        wrapT,\r\n        magFilter,\r\n        minFilter,\r\n        format,\r\n        type,\r\n        anisotropy,\r\n        encoding,\r\n      ); // Why CubeTexture._needsFlipEnvMap is necessary:\r\n      //\r\n      // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\r\n      // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\r\n      // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\r\n      // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\r\n      // and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\r\n      // when using WebGLCubeRenderTarget.texture as a cube texture.\r\n\r\n      this._needsFlipEnvMap = true;\r\n      this.flipY = false;\r\n    }\r\n\r\n    get images() {\r\n      return this.image;\r\n    }\r\n\r\n    set images(value) {\r\n      this.image = value;\r\n    }\r\n  }\r\n\r\n  CubeTexture.prototype.isCubeTexture = true;\r\n\r\n  class WebGLCubeRenderTarget extends WebGLRenderTarget {\r\n    constructor(size, options, dummy) {\r\n      if (Number.isInteger(options)) {\r\n        console.warn(\r\n          'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )',\r\n        );\r\n        options = dummy;\r\n      }\r\n\r\n      super(size, size, options);\r\n      options = options || {};\r\n      this.texture = new CubeTexture(\r\n        undefined,\r\n        options.mapping,\r\n        options.wrapS,\r\n        options.wrapT,\r\n        options.magFilter,\r\n        options.minFilter,\r\n        options.format,\r\n        options.type,\r\n        options.anisotropy,\r\n        options.encoding,\r\n      );\r\n      this.texture.generateMipmaps =\r\n        options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n      this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n      this.texture._needsFlipEnvMap = false;\r\n    }\r\n\r\n    fromEquirectangularTexture(renderer, texture) {\r\n      this.texture.type = texture.type;\r\n      this.texture.format = RGBAFormat; // see #18859\r\n\r\n      this.texture.encoding = texture.encoding;\r\n      this.texture.generateMipmaps = texture.generateMipmaps;\r\n      this.texture.minFilter = texture.minFilter;\r\n      this.texture.magFilter = texture.magFilter;\r\n      const shader = {\r\n        uniforms: {\r\n          tEquirect: {\r\n            value: null,\r\n          },\r\n        },\r\n        vertexShader:\r\n          /* glsl */\r\n          `\r\n\r\n\t\t\t\tvarying vec3 vWorldDirection;\r\n\r\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\r\n\r\n\t\t\t\t\t#include <begin_vertex>\r\n\t\t\t\t\t#include <project_vertex>\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n        fragmentShader:\r\n          /* glsl */\r\n          `\r\n\r\n\t\t\t\tuniform sampler2D tEquirect;\r\n\r\n\t\t\t\tvarying vec3 vWorldDirection;\r\n\r\n\t\t\t\t#include <common>\r\n\r\n\t\t\t\tvoid main() {\r\n\r\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\r\n\r\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\r\n\r\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n      };\r\n      const geometry = new BoxGeometry(5, 5, 5);\r\n      const material = new ShaderMaterial({\r\n        name: 'CubemapFromEquirect',\r\n        uniforms: cloneUniforms(shader.uniforms),\r\n        vertexShader: shader.vertexShader,\r\n        fragmentShader: shader.fragmentShader,\r\n        side: BackSide,\r\n        blending: NoBlending,\r\n      });\r\n      material.uniforms.tEquirect.value = texture;\r\n      const mesh = new Mesh(geometry, material);\r\n      const currentMinFilter = texture.minFilter; // Avoid blurred poles\r\n\r\n      if (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\r\n      const camera = new CubeCamera(1, 10, this);\r\n      camera.update(renderer, mesh);\r\n      texture.minFilter = currentMinFilter;\r\n      mesh.geometry.dispose();\r\n      mesh.material.dispose();\r\n      return this;\r\n    }\r\n\r\n    clear(renderer, color, depth, stencil) {\r\n      const currentRenderTarget = renderer.getRenderTarget();\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        renderer.setRenderTarget(this, i);\r\n        renderer.clear(color, depth, stencil);\r\n      }\r\n\r\n      renderer.setRenderTarget(currentRenderTarget);\r\n    }\r\n  }\r\n\r\n  WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\r\n\r\n  const _sphere$2 = /*@__PURE__*/ new Sphere();\r\n\r\n  const _vector$7 = /*@__PURE__*/ new Vector3();\r\n\r\n  class Frustum {\r\n    constructor(\r\n      p0 = new Plane(),\r\n      p1 = new Plane(),\r\n      p2 = new Plane(),\r\n      p3 = new Plane(),\r\n      p4 = new Plane(),\r\n      p5 = new Plane(),\r\n    ) {\r\n      this.planes = [p0, p1, p2, p3, p4, p5];\r\n    }\r\n\r\n    set(p0, p1, p2, p3, p4, p5) {\r\n      const planes = this.planes;\r\n      planes[0].copy(p0);\r\n      planes[1].copy(p1);\r\n      planes[2].copy(p2);\r\n      planes[3].copy(p3);\r\n      planes[4].copy(p4);\r\n      planes[5].copy(p5);\r\n      return this;\r\n    }\r\n\r\n    copy(frustum) {\r\n      const planes = this.planes;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        planes[i].copy(frustum.planes[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromProjectionMatrix(m) {\r\n      const planes = this.planes;\r\n      const me = m.elements;\r\n      const me0 = me[0],\r\n        me1 = me[1],\r\n        me2 = me[2],\r\n        me3 = me[3];\r\n      const me4 = me[4],\r\n        me5 = me[5],\r\n        me6 = me[6],\r\n        me7 = me[7];\r\n      const me8 = me[8],\r\n        me9 = me[9],\r\n        me10 = me[10],\r\n        me11 = me[11];\r\n      const me12 = me[12],\r\n        me13 = me[13],\r\n        me14 = me[14],\r\n        me15 = me[15];\r\n      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\r\n      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\r\n      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\r\n      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\r\n      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\r\n      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\r\n      return this;\r\n    }\r\n\r\n    intersectsObject(object) {\r\n      const geometry = object.geometry;\r\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\r\n\r\n      _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\r\n\r\n      return this.intersectsSphere(_sphere$2);\r\n    }\r\n\r\n    intersectsSprite(sprite) {\r\n      _sphere$2.center.set(0, 0, 0);\r\n\r\n      _sphere$2.radius = 0.7071067811865476;\r\n\r\n      _sphere$2.applyMatrix4(sprite.matrixWorld);\r\n\r\n      return this.intersectsSphere(_sphere$2);\r\n    }\r\n\r\n    intersectsSphere(sphere) {\r\n      const planes = this.planes;\r\n      const center = sphere.center;\r\n      const negRadius = -sphere.radius;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        const distance = planes[i].distanceToPoint(center);\r\n\r\n        if (distance < negRadius) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      const planes = this.planes;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        const plane = planes[i]; // corner at max distance\r\n\r\n        _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n        _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n        _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n        if (plane.distanceToPoint(_vector$7) < 0) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    containsPoint(point) {\r\n      const planes = this.planes;\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        if (planes[i].distanceToPoint(point) < 0) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  function WebGLAnimation() {\r\n    let context = null;\r\n    let isAnimating = false;\r\n    let animationLoop = null;\r\n    let requestId = null;\r\n\r\n    function onAnimationFrame(time, frame) {\r\n      animationLoop(time, frame);\r\n      requestId = context.requestAnimationFrame(onAnimationFrame);\r\n    }\r\n\r\n    return {\r\n      start: function () {\r\n        if (isAnimating === true) return;\r\n        if (animationLoop === null) return;\r\n        requestId = context.requestAnimationFrame(onAnimationFrame);\r\n        isAnimating = true;\r\n      },\r\n      stop: function () {\r\n        context.cancelAnimationFrame(requestId);\r\n        isAnimating = false;\r\n      },\r\n      setAnimationLoop: function (callback) {\r\n        animationLoop = callback;\r\n      },\r\n      setContext: function (value) {\r\n        context = value;\r\n      },\r\n    };\r\n  }\r\n\r\n  function WebGLAttributes(gl, capabilities) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n    const buffers = new WeakMap();\r\n\r\n    function createBuffer(attribute, bufferType) {\r\n      const array = attribute.array;\r\n      const usage = attribute.usage;\r\n      const buffer = gl.createBuffer();\r\n      gl.bindBuffer(bufferType, buffer);\r\n      gl.bufferData(bufferType, array, usage);\r\n      attribute.onUploadCallback();\r\n      let type = gl.FLOAT;\r\n\r\n      if (array instanceof Float32Array) {\r\n        type = gl.FLOAT;\r\n      } else if (array instanceof Float64Array) {\r\n        console.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\r\n      } else if (array instanceof Uint16Array) {\r\n        if (attribute.isFloat16BufferAttribute) {\r\n          if (isWebGL2) {\r\n            type = gl.HALF_FLOAT;\r\n          } else {\r\n            console.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\r\n          }\r\n        } else {\r\n          type = gl.UNSIGNED_SHORT;\r\n        }\r\n      } else if (array instanceof Int16Array) {\r\n        type = gl.SHORT;\r\n      } else if (array instanceof Uint32Array) {\r\n        type = gl.UNSIGNED_INT;\r\n      } else if (array instanceof Int32Array) {\r\n        type = gl.INT;\r\n      } else if (array instanceof Int8Array) {\r\n        type = gl.BYTE;\r\n      } else if (array instanceof Uint8Array) {\r\n        type = gl.UNSIGNED_BYTE;\r\n      } else if (array instanceof Uint8ClampedArray) {\r\n        type = gl.UNSIGNED_BYTE;\r\n      }\r\n\r\n      return {\r\n        buffer: buffer,\r\n        type: type,\r\n        bytesPerElement: array.BYTES_PER_ELEMENT,\r\n        version: attribute.version,\r\n      };\r\n    }\r\n\r\n    function updateBuffer(buffer, attribute, bufferType) {\r\n      const array = attribute.array;\r\n      const updateRange = attribute.updateRange;\r\n      gl.bindBuffer(bufferType, buffer);\r\n\r\n      if (updateRange.count === -1) {\r\n        // Not using update ranges\r\n        gl.bufferSubData(bufferType, 0, array);\r\n      } else {\r\n        if (isWebGL2) {\r\n          gl.bufferSubData(\r\n            bufferType,\r\n            updateRange.offset * array.BYTES_PER_ELEMENT,\r\n            array,\r\n            updateRange.offset,\r\n            updateRange.count,\r\n          );\r\n        } else {\r\n          gl.bufferSubData(\r\n            bufferType,\r\n            updateRange.offset * array.BYTES_PER_ELEMENT,\r\n            array.subarray(updateRange.offset, updateRange.offset + updateRange.count),\r\n          );\r\n        }\r\n\r\n        updateRange.count = -1; // reset range\r\n      }\r\n    } //\r\n\r\n    function get(attribute) {\r\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\r\n      return buffers.get(attribute);\r\n    }\r\n\r\n    function remove(attribute) {\r\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\r\n      const data = buffers.get(attribute);\r\n\r\n      if (data) {\r\n        gl.deleteBuffer(data.buffer);\r\n        buffers.delete(attribute);\r\n      }\r\n    }\r\n\r\n    function update(attribute, bufferType) {\r\n      if (attribute.isGLBufferAttribute) {\r\n        const cached = buffers.get(attribute);\r\n\r\n        if (!cached || cached.version < attribute.version) {\r\n          buffers.set(attribute, {\r\n            buffer: attribute.buffer,\r\n            type: attribute.type,\r\n            bytesPerElement: attribute.elementSize,\r\n            version: attribute.version,\r\n          });\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\r\n      const data = buffers.get(attribute);\r\n\r\n      if (data === undefined) {\r\n        buffers.set(attribute, createBuffer(attribute, bufferType));\r\n      } else if (data.version < attribute.version) {\r\n        updateBuffer(data.buffer, attribute, bufferType);\r\n        data.version = attribute.version;\r\n      }\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      remove: remove,\r\n      update: update,\r\n    };\r\n  }\r\n\r\n  class PlaneGeometry extends BufferGeometry {\r\n    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {\r\n      super();\r\n      this.type = 'PlaneGeometry';\r\n      this.parameters = {\r\n        width: width,\r\n        height: height,\r\n        widthSegments: widthSegments,\r\n        heightSegments: heightSegments,\r\n      };\r\n      const width_half = width / 2;\r\n      const height_half = height / 2;\r\n      const gridX = Math.floor(widthSegments);\r\n      const gridY = Math.floor(heightSegments);\r\n      const gridX1 = gridX + 1;\r\n      const gridY1 = gridY + 1;\r\n      const segment_width = width / gridX;\r\n      const segment_height = height / gridY; //\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = [];\r\n\r\n      for (let iy = 0; iy < gridY1; iy++) {\r\n        const y = iy * segment_height - height_half;\r\n\r\n        for (let ix = 0; ix < gridX1; ix++) {\r\n          const x = ix * segment_width - width_half;\r\n          vertices.push(x, -y, 0);\r\n          normals.push(0, 0, 1);\r\n          uvs.push(ix / gridX);\r\n          uvs.push(1 - iy / gridY);\r\n        }\r\n      }\r\n\r\n      for (let iy = 0; iy < gridY; iy++) {\r\n        for (let ix = 0; ix < gridX; ix++) {\r\n          const a = ix + gridX1 * iy;\r\n          const b = ix + gridX1 * (iy + 1);\r\n          const c = ix + 1 + gridX1 * (iy + 1);\r\n          const d = ix + 1 + gridX1 * iy;\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      }\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  var alphamap_fragment =\r\n    '#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif';\r\n\r\n  var alphamap_pars_fragment = '#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif';\r\n\r\n  var alphatest_fragment = '#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif';\r\n\r\n  var aomap_fragment =\r\n    '#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif';\r\n\r\n  var aomap_pars_fragment =\r\n    '#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif';\r\n\r\n  var begin_vertex = 'vec3 transformed = vec3( position );';\r\n\r\n  var beginnormal_vertex =\r\n    'vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif';\r\n\r\n  var bsdfs =\r\n    'vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif';\r\n\r\n  var bumpmap_pars_fragment =\r\n    '#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif';\r\n\r\n  var clipping_planes_fragment =\r\n    '#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif';\r\n\r\n  var clipping_planes_pars_fragment =\r\n    '#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif';\r\n\r\n  var clipping_planes_pars_vertex =\r\n    '#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif';\r\n\r\n  var clipping_planes_vertex =\r\n    '#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif';\r\n\r\n  var color_fragment =\r\n    '#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif';\r\n\r\n  var color_pars_fragment =\r\n    '#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif';\r\n\r\n  var color_pars_vertex =\r\n    '#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif';\r\n\r\n  var color_vertex =\r\n    '#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif';\r\n\r\n  var common =\r\n    '#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}';\r\n\r\n  var cube_uv_reflection_fragment =\r\n    '#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif';\r\n\r\n  var defaultnormal_vertex =\r\n    'vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif';\r\n\r\n  var displacementmap_pars_vertex =\r\n    '#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif';\r\n\r\n  var displacementmap_vertex =\r\n    '#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif';\r\n\r\n  var emissivemap_fragment =\r\n    '#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif';\r\n\r\n  var emissivemap_pars_fragment =\r\n    '#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif';\r\n\r\n  var encodings_fragment = 'gl_FragColor = linearToOutputTexel( gl_FragColor );';\r\n\r\n  var encodings_pars_fragment =\r\n    '\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}';\r\n\r\n  var envmap_fragment =\r\n    '#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif';\r\n\r\n  var envmap_common_pars_fragment =\r\n    '#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif';\r\n\r\n  var envmap_pars_fragment =\r\n    '#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif';\r\n\r\n  var envmap_pars_vertex =\r\n    '#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif';\r\n\r\n  var envmap_vertex =\r\n    '#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif';\r\n\r\n  var fog_vertex = '#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif';\r\n\r\n  var fog_pars_vertex = '#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif';\r\n\r\n  var fog_fragment =\r\n    '#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif';\r\n\r\n  var fog_pars_fragment =\r\n    '#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif';\r\n\r\n  var gradientmap_pars_fragment =\r\n    '#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}';\r\n\r\n  var lightmap_fragment =\r\n    '#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif';\r\n\r\n  var lightmap_pars_fragment =\r\n    '#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif';\r\n\r\n  var lights_lambert_vertex =\r\n    'vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif';\r\n\r\n  var lights_pars_begin =\r\n    'uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif';\r\n\r\n  var envmap_physical_pars_fragment =\r\n    '#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif';\r\n\r\n  var lights_toon_fragment = 'ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;';\r\n\r\n  var lights_toon_pars_fragment =\r\n    'varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)';\r\n\r\n  var lights_phong_fragment =\r\n    'BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;';\r\n\r\n  var lights_phong_pars_fragment =\r\n    'varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)';\r\n\r\n  var lights_physical_fragment =\r\n    'PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), rawDiffuseColor, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), rawDiffuseColor, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif';\r\n\r\n  var lights_physical_pars_fragment =\r\n    'struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}';\r\n\r\n  var lights_fragment_begin =\r\n    '\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif';\r\n\r\n  var lights_fragment_maps =\r\n    '#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif';\r\n\r\n  var lights_fragment_end =\r\n    '#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif';\r\n\r\n  var logdepthbuf_fragment =\r\n    '#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif';\r\n\r\n  var logdepthbuf_pars_fragment =\r\n    '#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif';\r\n\r\n  var logdepthbuf_pars_vertex =\r\n    '#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif';\r\n\r\n  var logdepthbuf_vertex =\r\n    '#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif';\r\n\r\n  var map_fragment =\r\n    '#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif';\r\n\r\n  var map_pars_fragment = '#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif';\r\n\r\n  var map_particle_fragment =\r\n    '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif';\r\n\r\n  var map_particle_pars_fragment =\r\n    '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif';\r\n\r\n  var metalnessmap_fragment =\r\n    'float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif';\r\n\r\n  var metalnessmap_pars_fragment =\r\n    '#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif';\r\n\r\n  var morphnormal_vertex =\r\n    '#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif';\r\n\r\n  var morphtarget_pars_vertex =\r\n    '#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif';\r\n\r\n  var morphtarget_vertex =\r\n    '#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif';\r\n\r\n  var normal_fragment_begin =\r\n    'float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;';\r\n\r\n  var normal_fragment_maps =\r\n    '#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif';\r\n\r\n  var normalmap_pars_fragment =\r\n    '#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif';\r\n\r\n  var clearcoat_normal_fragment_begin =\r\n    '#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif';\r\n\r\n  var clearcoat_normal_fragment_maps =\r\n    '#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif';\r\n\r\n  var clearcoat_pars_fragment =\r\n    '#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif';\r\n\r\n  var packing =\r\n    'vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}';\r\n\r\n  var premultiplied_alpha_fragment =\r\n    '#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif';\r\n\r\n  var project_vertex =\r\n    'vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;';\r\n\r\n  var dithering_fragment =\r\n    '#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif';\r\n\r\n  var dithering_pars_fragment =\r\n    '#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif';\r\n\r\n  var roughnessmap_fragment =\r\n    'float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif';\r\n\r\n  var roughnessmap_pars_fragment =\r\n    '#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif';\r\n\r\n  var shadowmap_pars_fragment =\r\n    '#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif';\r\n\r\n  var shadowmap_pars_vertex =\r\n    '#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif';\r\n\r\n  var shadowmap_vertex =\r\n    '#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif';\r\n\r\n  var shadowmask_pars_fragment =\r\n    'float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}';\r\n\r\n  var skinbase_vertex =\r\n    '#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif';\r\n\r\n  var skinning_pars_vertex =\r\n    '#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif';\r\n\r\n  var skinning_vertex =\r\n    '#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif';\r\n\r\n  var skinnormal_vertex =\r\n    '#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif';\r\n\r\n  var specularmap_fragment =\r\n    'float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif';\r\n\r\n  var specularmap_pars_fragment =\r\n    '#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif';\r\n\r\n  var tonemapping_fragment =\r\n    '#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif';\r\n\r\n  var tonemapping_pars_fragment =\r\n    '#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }';\r\n\r\n  var transmission_fragment =\r\n    '#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSNMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition.xyz / vWorldPosition.w;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n\\tfloat ior = ( 1.0 + 0.4 * reflectivity ) / ( 1.0 - 0.4 * reflectivity );\\n\\tvec3 f0 = vec3( pow( ior - 1.0, 2.0 ) / pow( ior + 1.0, 2.0 ) );\\n\\tvec3 f90 = vec3( 1.0 );\\n\\tvec3 f_transmission = totalTransmission * getIBLVolumeRefraction(\\n\\t\\tnormal, v, viewDir, roughnessFactor, diffuseColor.rgb, f0, f90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance);\\n\\tdiffuseColor.rgb = mix( diffuseColor.rgb, f_transmission, totalTransmission );\\n#endif';\r\n\r\n  var transmission_pars_fragment =\r\n    '#ifdef USE_TRANSMISSION\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec4 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay(vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix) {\\n\\t\\tvec3 refractionVector = refract(-v, normalize(n), 1.0 / ior);\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length(vec3(modelMatrix[0].xyz));\\n\\t\\tmodelScale.y = length(vec3(modelMatrix[1].xyz));\\n\\t\\tmodelScale.z = length(vec3(modelMatrix[2].xyz));\\n\\t\\treturn normalize(refractionVector) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness(float roughness, float ior) {\\n\\t\\treturn roughness * clamp(ior * 2.0 - 2.0, 0.0, 1.0);\\n\\t}\\n\\tvec3 getTransmissionSample(vec2 fragCoord, float roughness, float ior) {\\n\\t\\tfloat framebufferLod = log2(transmissionSamplerSize.x) * applyIorToRoughness(roughness, ior);\\n\\t\\treturn texture2DLodEXT(transmissionSamplerMap, fragCoord.xy, framebufferLod).rgb;\\n\\t}\\n\\tvec3 applyVolumeAttenuation(vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tif (attenuationDistance == 0.0) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log(attenuationColor) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp(-attenuationCoefficient * transmissionDistance);\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec3 getIBLVolumeRefraction(vec3 n, vec3 v, vec3 viewDir, float perceptualRoughness, vec3 baseColor, vec3 f0, vec3 f90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness, vec3 attenuationColor, float attenuationDistance) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay(n, v, thickness, ior, modelMatrix);\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec3 transmittedLight = getTransmissionSample(refractionCoords, perceptualRoughness, ior);\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation(transmittedLight, length(transmissionRay), attenuationColor, attenuationDistance);\\n\\t\\tfloat NdotV = saturate(dot(n, viewDir));\\n\\t\\tvec2 brdf = integrateSpecularBRDF(NdotV, perceptualRoughness);\\n\\t\\tvec3 specularColor = f0 * brdf.x + f90 * brdf.y;\\n\\t\\treturn (1.0 - specularColor) * attenuatedColor * baseColor;\\n\\t}\\n#endif';\r\n\r\n  var uv_pars_fragment =\r\n    '#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif';\r\n\r\n  var uv_pars_vertex =\r\n    '#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif';\r\n\r\n  var uv_vertex = '#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif';\r\n\r\n  var uv2_pars_fragment =\r\n    '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif';\r\n\r\n  var uv2_pars_vertex =\r\n    '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif';\r\n\r\n  var uv2_vertex =\r\n    '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif';\r\n\r\n  var worldpos_vertex =\r\n    '#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif';\r\n\r\n  var background_frag =\r\n    'uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}';\r\n\r\n  var background_vert =\r\n    'varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}';\r\n\r\n  var cube_frag =\r\n    '#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}';\r\n\r\n  var cube_vert =\r\n    'varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}';\r\n\r\n  var depth_frag =\r\n    '#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}';\r\n\r\n  var depth_vert =\r\n    '#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}';\r\n\r\n  var distanceRGBA_frag =\r\n    '#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}';\r\n\r\n  var distanceRGBA_vert =\r\n    '#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}';\r\n\r\n  var equirect_frag =\r\n    'uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}';\r\n\r\n  var equirect_vert =\r\n    'varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}';\r\n\r\n  var linedashed_frag =\r\n    'uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}';\r\n\r\n  var linedashed_vert =\r\n    'uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var meshbasic_frag =\r\n    'uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshbasic_vert =\r\n    '#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var meshlambert_frag =\r\n    'uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshlambert_vert =\r\n    '#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var meshmatcap_frag =\r\n    '#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshmatcap_vert =\r\n    '#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}';\r\n\r\n  var meshtoon_frag =\r\n    '#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshtoon_vert =\r\n    '#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var meshphong_frag =\r\n    '#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshphong_vert =\r\n    '#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var meshphysical_frag =\r\n    '#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform vec3 attenuationColor;\\n\\tuniform float attenuationDistance;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <transmission_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t\\tfloat thicknessFactor = thickness;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\tvec3 rawDiffuseColor = diffuseColor.rgb;\\n\\t#include <transmission_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}';\r\n\r\n  var meshphysical_vert =\r\n    '#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec4 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition;\\n#endif\\n}';\r\n\r\n  var normal_frag =\r\n    '#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}';\r\n\r\n  var normal_vert =\r\n    '#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}';\r\n\r\n  var points_frag =\r\n    'uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}';\r\n\r\n  var points_vert =\r\n    'uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var shadow_frag =\r\n    'uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}';\r\n\r\n  var shadow_vert =\r\n    '#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  var sprite_frag =\r\n    'uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}';\r\n\r\n  var sprite_vert =\r\n    'uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}';\r\n\r\n  const ShaderChunk = {\r\n    alphamap_fragment: alphamap_fragment,\r\n    alphamap_pars_fragment: alphamap_pars_fragment,\r\n    alphatest_fragment: alphatest_fragment,\r\n    aomap_fragment: aomap_fragment,\r\n    aomap_pars_fragment: aomap_pars_fragment,\r\n    begin_vertex: begin_vertex,\r\n    beginnormal_vertex: beginnormal_vertex,\r\n    bsdfs: bsdfs,\r\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\r\n    clipping_planes_fragment: clipping_planes_fragment,\r\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n    clipping_planes_vertex: clipping_planes_vertex,\r\n    color_fragment: color_fragment,\r\n    color_pars_fragment: color_pars_fragment,\r\n    color_pars_vertex: color_pars_vertex,\r\n    color_vertex: color_vertex,\r\n    common: common,\r\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n    defaultnormal_vertex: defaultnormal_vertex,\r\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\r\n    displacementmap_vertex: displacementmap_vertex,\r\n    emissivemap_fragment: emissivemap_fragment,\r\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\r\n    encodings_fragment: encodings_fragment,\r\n    encodings_pars_fragment: encodings_pars_fragment,\r\n    envmap_fragment: envmap_fragment,\r\n    envmap_common_pars_fragment: envmap_common_pars_fragment,\r\n    envmap_pars_fragment: envmap_pars_fragment,\r\n    envmap_pars_vertex: envmap_pars_vertex,\r\n    envmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n    envmap_vertex: envmap_vertex,\r\n    fog_vertex: fog_vertex,\r\n    fog_pars_vertex: fog_pars_vertex,\r\n    fog_fragment: fog_fragment,\r\n    fog_pars_fragment: fog_pars_fragment,\r\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\r\n    lightmap_fragment: lightmap_fragment,\r\n    lightmap_pars_fragment: lightmap_pars_fragment,\r\n    lights_lambert_vertex: lights_lambert_vertex,\r\n    lights_pars_begin: lights_pars_begin,\r\n    lights_toon_fragment: lights_toon_fragment,\r\n    lights_toon_pars_fragment: lights_toon_pars_fragment,\r\n    lights_phong_fragment: lights_phong_fragment,\r\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\r\n    lights_physical_fragment: lights_physical_fragment,\r\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\r\n    lights_fragment_begin: lights_fragment_begin,\r\n    lights_fragment_maps: lights_fragment_maps,\r\n    lights_fragment_end: lights_fragment_end,\r\n    logdepthbuf_fragment: logdepthbuf_fragment,\r\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n    logdepthbuf_vertex: logdepthbuf_vertex,\r\n    map_fragment: map_fragment,\r\n    map_pars_fragment: map_pars_fragment,\r\n    map_particle_fragment: map_particle_fragment,\r\n    map_particle_pars_fragment: map_particle_pars_fragment,\r\n    metalnessmap_fragment: metalnessmap_fragment,\r\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n    morphnormal_vertex: morphnormal_vertex,\r\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\r\n    morphtarget_vertex: morphtarget_vertex,\r\n    normal_fragment_begin: normal_fragment_begin,\r\n    normal_fragment_maps: normal_fragment_maps,\r\n    normalmap_pars_fragment: normalmap_pars_fragment,\r\n    clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\r\n    clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\r\n    clearcoat_pars_fragment: clearcoat_pars_fragment,\r\n    packing: packing,\r\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n    project_vertex: project_vertex,\r\n    dithering_fragment: dithering_fragment,\r\n    dithering_pars_fragment: dithering_pars_fragment,\r\n    roughnessmap_fragment: roughnessmap_fragment,\r\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\r\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\r\n    shadowmap_vertex: shadowmap_vertex,\r\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\r\n    skinbase_vertex: skinbase_vertex,\r\n    skinning_pars_vertex: skinning_pars_vertex,\r\n    skinning_vertex: skinning_vertex,\r\n    skinnormal_vertex: skinnormal_vertex,\r\n    specularmap_fragment: specularmap_fragment,\r\n    specularmap_pars_fragment: specularmap_pars_fragment,\r\n    tonemapping_fragment: tonemapping_fragment,\r\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\r\n    transmission_fragment: transmission_fragment,\r\n    transmission_pars_fragment: transmission_pars_fragment,\r\n    uv_pars_fragment: uv_pars_fragment,\r\n    uv_pars_vertex: uv_pars_vertex,\r\n    uv_vertex: uv_vertex,\r\n    uv2_pars_fragment: uv2_pars_fragment,\r\n    uv2_pars_vertex: uv2_pars_vertex,\r\n    uv2_vertex: uv2_vertex,\r\n    worldpos_vertex: worldpos_vertex,\r\n    background_frag: background_frag,\r\n    background_vert: background_vert,\r\n    cube_frag: cube_frag,\r\n    cube_vert: cube_vert,\r\n    depth_frag: depth_frag,\r\n    depth_vert: depth_vert,\r\n    distanceRGBA_frag: distanceRGBA_frag,\r\n    distanceRGBA_vert: distanceRGBA_vert,\r\n    equirect_frag: equirect_frag,\r\n    equirect_vert: equirect_vert,\r\n    linedashed_frag: linedashed_frag,\r\n    linedashed_vert: linedashed_vert,\r\n    meshbasic_frag: meshbasic_frag,\r\n    meshbasic_vert: meshbasic_vert,\r\n    meshlambert_frag: meshlambert_frag,\r\n    meshlambert_vert: meshlambert_vert,\r\n    meshmatcap_frag: meshmatcap_frag,\r\n    meshmatcap_vert: meshmatcap_vert,\r\n    meshtoon_frag: meshtoon_frag,\r\n    meshtoon_vert: meshtoon_vert,\r\n    meshphong_frag: meshphong_frag,\r\n    meshphong_vert: meshphong_vert,\r\n    meshphysical_frag: meshphysical_frag,\r\n    meshphysical_vert: meshphysical_vert,\r\n    normal_frag: normal_frag,\r\n    normal_vert: normal_vert,\r\n    points_frag: points_frag,\r\n    points_vert: points_vert,\r\n    shadow_frag: shadow_frag,\r\n    shadow_vert: shadow_vert,\r\n    sprite_frag: sprite_frag,\r\n    sprite_vert: sprite_vert,\r\n  };\r\n\r\n  /**\r\n   * Uniforms library for shared webgl shaders\r\n   */\r\n\r\n  const UniformsLib = {\r\n    common: {\r\n      diffuse: {\r\n        value: new Color(0xffffff),\r\n      },\r\n      opacity: {\r\n        value: 1.0,\r\n      },\r\n      map: {\r\n        value: null,\r\n      },\r\n      uvTransform: {\r\n        value: new Matrix3(),\r\n      },\r\n      uv2Transform: {\r\n        value: new Matrix3(),\r\n      },\r\n      alphaMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    specularmap: {\r\n      specularMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    envmap: {\r\n      envMap: {\r\n        value: null,\r\n      },\r\n      flipEnvMap: {\r\n        value: -1,\r\n      },\r\n      reflectivity: {\r\n        value: 1.0,\r\n      },\r\n      refractionRatio: {\r\n        value: 0.98,\r\n      },\r\n      maxMipLevel: {\r\n        value: 0,\r\n      },\r\n    },\r\n    aomap: {\r\n      aoMap: {\r\n        value: null,\r\n      },\r\n      aoMapIntensity: {\r\n        value: 1,\r\n      },\r\n    },\r\n    lightmap: {\r\n      lightMap: {\r\n        value: null,\r\n      },\r\n      lightMapIntensity: {\r\n        value: 1,\r\n      },\r\n    },\r\n    emissivemap: {\r\n      emissiveMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    bumpmap: {\r\n      bumpMap: {\r\n        value: null,\r\n      },\r\n      bumpScale: {\r\n        value: 1,\r\n      },\r\n    },\r\n    normalmap: {\r\n      normalMap: {\r\n        value: null,\r\n      },\r\n      normalScale: {\r\n        value: new Vector2(1, 1),\r\n      },\r\n    },\r\n    displacementmap: {\r\n      displacementMap: {\r\n        value: null,\r\n      },\r\n      displacementScale: {\r\n        value: 1,\r\n      },\r\n      displacementBias: {\r\n        value: 0,\r\n      },\r\n    },\r\n    roughnessmap: {\r\n      roughnessMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    metalnessmap: {\r\n      metalnessMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    gradientmap: {\r\n      gradientMap: {\r\n        value: null,\r\n      },\r\n    },\r\n    fog: {\r\n      fogDensity: {\r\n        value: 0.00025,\r\n      },\r\n      fogNear: {\r\n        value: 1,\r\n      },\r\n      fogFar: {\r\n        value: 2000,\r\n      },\r\n      fogColor: {\r\n        value: new Color(0xffffff),\r\n      },\r\n    },\r\n    lights: {\r\n      ambientLightColor: {\r\n        value: [],\r\n      },\r\n      lightProbe: {\r\n        value: [],\r\n      },\r\n      directionalLights: {\r\n        value: [],\r\n        properties: {\r\n          direction: {},\r\n          color: {},\r\n        },\r\n      },\r\n      directionalLightShadows: {\r\n        value: [],\r\n        properties: {\r\n          shadowBias: {},\r\n          shadowNormalBias: {},\r\n          shadowRadius: {},\r\n          shadowMapSize: {},\r\n        },\r\n      },\r\n      directionalShadowMap: {\r\n        value: [],\r\n      },\r\n      directionalShadowMatrix: {\r\n        value: [],\r\n      },\r\n      spotLights: {\r\n        value: [],\r\n        properties: {\r\n          color: {},\r\n          position: {},\r\n          direction: {},\r\n          distance: {},\r\n          coneCos: {},\r\n          penumbraCos: {},\r\n          decay: {},\r\n        },\r\n      },\r\n      spotLightShadows: {\r\n        value: [],\r\n        properties: {\r\n          shadowBias: {},\r\n          shadowNormalBias: {},\r\n          shadowRadius: {},\r\n          shadowMapSize: {},\r\n        },\r\n      },\r\n      spotShadowMap: {\r\n        value: [],\r\n      },\r\n      spotShadowMatrix: {\r\n        value: [],\r\n      },\r\n      pointLights: {\r\n        value: [],\r\n        properties: {\r\n          color: {},\r\n          position: {},\r\n          decay: {},\r\n          distance: {},\r\n        },\r\n      },\r\n      pointLightShadows: {\r\n        value: [],\r\n        properties: {\r\n          shadowBias: {},\r\n          shadowNormalBias: {},\r\n          shadowRadius: {},\r\n          shadowMapSize: {},\r\n          shadowCameraNear: {},\r\n          shadowCameraFar: {},\r\n        },\r\n      },\r\n      pointShadowMap: {\r\n        value: [],\r\n      },\r\n      pointShadowMatrix: {\r\n        value: [],\r\n      },\r\n      hemisphereLights: {\r\n        value: [],\r\n        properties: {\r\n          direction: {},\r\n          skyColor: {},\r\n          groundColor: {},\r\n        },\r\n      },\r\n      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n      rectAreaLights: {\r\n        value: [],\r\n        properties: {\r\n          color: {},\r\n          position: {},\r\n          width: {},\r\n          height: {},\r\n        },\r\n      },\r\n      ltc_1: {\r\n        value: null,\r\n      },\r\n      ltc_2: {\r\n        value: null,\r\n      },\r\n    },\r\n    points: {\r\n      diffuse: {\r\n        value: new Color(0xffffff),\r\n      },\r\n      opacity: {\r\n        value: 1.0,\r\n      },\r\n      size: {\r\n        value: 1.0,\r\n      },\r\n      scale: {\r\n        value: 1.0,\r\n      },\r\n      map: {\r\n        value: null,\r\n      },\r\n      alphaMap: {\r\n        value: null,\r\n      },\r\n      uvTransform: {\r\n        value: new Matrix3(),\r\n      },\r\n    },\r\n    sprite: {\r\n      diffuse: {\r\n        value: new Color(0xffffff),\r\n      },\r\n      opacity: {\r\n        value: 1.0,\r\n      },\r\n      center: {\r\n        value: new Vector2(0.5, 0.5),\r\n      },\r\n      rotation: {\r\n        value: 0.0,\r\n      },\r\n      map: {\r\n        value: null,\r\n      },\r\n      alphaMap: {\r\n        value: null,\r\n      },\r\n      uvTransform: {\r\n        value: new Matrix3(),\r\n      },\r\n    },\r\n  };\r\n\r\n  const ShaderLib = {\r\n    basic: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.specularmap,\r\n        UniformsLib.envmap,\r\n        UniformsLib.aomap,\r\n        UniformsLib.lightmap,\r\n        UniformsLib.fog,\r\n      ]),\r\n      vertexShader: ShaderChunk.meshbasic_vert,\r\n      fragmentShader: ShaderChunk.meshbasic_frag,\r\n    },\r\n    lambert: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.specularmap,\r\n        UniformsLib.envmap,\r\n        UniformsLib.aomap,\r\n        UniformsLib.lightmap,\r\n        UniformsLib.emissivemap,\r\n        UniformsLib.fog,\r\n        UniformsLib.lights,\r\n        {\r\n          emissive: {\r\n            value: new Color(0x000000),\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.meshlambert_vert,\r\n      fragmentShader: ShaderChunk.meshlambert_frag,\r\n    },\r\n    phong: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.specularmap,\r\n        UniformsLib.envmap,\r\n        UniformsLib.aomap,\r\n        UniformsLib.lightmap,\r\n        UniformsLib.emissivemap,\r\n        UniformsLib.bumpmap,\r\n        UniformsLib.normalmap,\r\n        UniformsLib.displacementmap,\r\n        UniformsLib.fog,\r\n        UniformsLib.lights,\r\n        {\r\n          emissive: {\r\n            value: new Color(0x000000),\r\n          },\r\n          specular: {\r\n            value: new Color(0x111111),\r\n          },\r\n          shininess: {\r\n            value: 30,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.meshphong_vert,\r\n      fragmentShader: ShaderChunk.meshphong_frag,\r\n    },\r\n    standard: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.envmap,\r\n        UniformsLib.aomap,\r\n        UniformsLib.lightmap,\r\n        UniformsLib.emissivemap,\r\n        UniformsLib.bumpmap,\r\n        UniformsLib.normalmap,\r\n        UniformsLib.displacementmap,\r\n        UniformsLib.roughnessmap,\r\n        UniformsLib.metalnessmap,\r\n        UniformsLib.fog,\r\n        UniformsLib.lights,\r\n        {\r\n          emissive: {\r\n            value: new Color(0x000000),\r\n          },\r\n          roughness: {\r\n            value: 1.0,\r\n          },\r\n          metalness: {\r\n            value: 0.0,\r\n          },\r\n          envMapIntensity: {\r\n            value: 1,\r\n          }, // temporary\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.meshphysical_vert,\r\n      fragmentShader: ShaderChunk.meshphysical_frag,\r\n    },\r\n    toon: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.aomap,\r\n        UniformsLib.lightmap,\r\n        UniformsLib.emissivemap,\r\n        UniformsLib.bumpmap,\r\n        UniformsLib.normalmap,\r\n        UniformsLib.displacementmap,\r\n        UniformsLib.gradientmap,\r\n        UniformsLib.fog,\r\n        UniformsLib.lights,\r\n        {\r\n          emissive: {\r\n            value: new Color(0x000000),\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.meshtoon_vert,\r\n      fragmentShader: ShaderChunk.meshtoon_frag,\r\n    },\r\n    matcap: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.bumpmap,\r\n        UniformsLib.normalmap,\r\n        UniformsLib.displacementmap,\r\n        UniformsLib.fog,\r\n        {\r\n          matcap: {\r\n            value: null,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.meshmatcap_vert,\r\n      fragmentShader: ShaderChunk.meshmatcap_frag,\r\n    },\r\n    points: {\r\n      uniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\r\n      vertexShader: ShaderChunk.points_vert,\r\n      fragmentShader: ShaderChunk.points_frag,\r\n    },\r\n    dashed: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.fog,\r\n        {\r\n          scale: {\r\n            value: 1,\r\n          },\r\n          dashSize: {\r\n            value: 1,\r\n          },\r\n          totalSize: {\r\n            value: 2,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.linedashed_vert,\r\n      fragmentShader: ShaderChunk.linedashed_frag,\r\n    },\r\n    depth: {\r\n      uniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\r\n      vertexShader: ShaderChunk.depth_vert,\r\n      fragmentShader: ShaderChunk.depth_frag,\r\n    },\r\n    normal: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.bumpmap,\r\n        UniformsLib.normalmap,\r\n        UniformsLib.displacementmap,\r\n        {\r\n          opacity: {\r\n            value: 1.0,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.normal_vert,\r\n      fragmentShader: ShaderChunk.normal_frag,\r\n    },\r\n    sprite: {\r\n      uniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\r\n      vertexShader: ShaderChunk.sprite_vert,\r\n      fragmentShader: ShaderChunk.sprite_frag,\r\n    },\r\n    background: {\r\n      uniforms: {\r\n        uvTransform: {\r\n          value: new Matrix3(),\r\n        },\r\n        t2D: {\r\n          value: null,\r\n        },\r\n      },\r\n      vertexShader: ShaderChunk.background_vert,\r\n      fragmentShader: ShaderChunk.background_frag,\r\n    },\r\n\r\n    /* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n    cube: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.envmap,\r\n        {\r\n          opacity: {\r\n            value: 1.0,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.cube_vert,\r\n      fragmentShader: ShaderChunk.cube_frag,\r\n    },\r\n    equirect: {\r\n      uniforms: {\r\n        tEquirect: {\r\n          value: null,\r\n        },\r\n      },\r\n      vertexShader: ShaderChunk.equirect_vert,\r\n      fragmentShader: ShaderChunk.equirect_frag,\r\n    },\r\n    distanceRGBA: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.common,\r\n        UniformsLib.displacementmap,\r\n        {\r\n          referencePosition: {\r\n            value: new Vector3(),\r\n          },\r\n          nearDistance: {\r\n            value: 1,\r\n          },\r\n          farDistance: {\r\n            value: 1000,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.distanceRGBA_vert,\r\n      fragmentShader: ShaderChunk.distanceRGBA_frag,\r\n    },\r\n    shadow: {\r\n      uniforms: mergeUniforms([\r\n        UniformsLib.lights,\r\n        UniformsLib.fog,\r\n        {\r\n          color: {\r\n            value: new Color(0x00000),\r\n          },\r\n          opacity: {\r\n            value: 1.0,\r\n          },\r\n        },\r\n      ]),\r\n      vertexShader: ShaderChunk.shadow_vert,\r\n      fragmentShader: ShaderChunk.shadow_frag,\r\n    },\r\n  };\r\n  ShaderLib.physical = {\r\n    uniforms: mergeUniforms([\r\n      ShaderLib.standard.uniforms,\r\n      {\r\n        clearcoat: {\r\n          value: 0,\r\n        },\r\n        clearcoatMap: {\r\n          value: null,\r\n        },\r\n        clearcoatRoughness: {\r\n          value: 0,\r\n        },\r\n        clearcoatRoughnessMap: {\r\n          value: null,\r\n        },\r\n        clearcoatNormalScale: {\r\n          value: new Vector2(1, 1),\r\n        },\r\n        clearcoatNormalMap: {\r\n          value: null,\r\n        },\r\n        sheen: {\r\n          value: new Color(0x000000),\r\n        },\r\n        transmission: {\r\n          value: 0,\r\n        },\r\n        transmissionMap: {\r\n          value: null,\r\n        },\r\n        transmissionSamplerSize: {\r\n          value: new Vector2(),\r\n        },\r\n        transmissionSamplerMap: {\r\n          value: null,\r\n        },\r\n        thickness: {\r\n          value: 0,\r\n        },\r\n        thicknessMap: {\r\n          value: null,\r\n        },\r\n        attenuationDistance: {\r\n          value: 0,\r\n        },\r\n        attenuationColor: {\r\n          value: new Color(0x000000),\r\n        },\r\n      },\r\n    ]),\r\n    vertexShader: ShaderChunk.meshphysical_vert,\r\n    fragmentShader: ShaderChunk.meshphysical_frag,\r\n  };\r\n\r\n  function WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\r\n    const clearColor = new Color(0x000000);\r\n    let clearAlpha = 0;\r\n    let planeMesh;\r\n    let boxMesh;\r\n    let currentBackground = null;\r\n    let currentBackgroundVersion = 0;\r\n    let currentTonemapping = null;\r\n\r\n    function render(renderList, scene) {\r\n      let forceClear = false;\r\n      let background = scene.isScene === true ? scene.background : null;\r\n\r\n      if (background && background.isTexture) {\r\n        background = cubemaps.get(background);\r\n      } // Ignore background in AR\r\n      // TODO: Reconsider this.\r\n\r\n      const xr = renderer.xr;\r\n      const session = xr.getSession && xr.getSession();\r\n\r\n      if (session && session.environmentBlendMode === 'additive') {\r\n        background = null;\r\n      }\r\n\r\n      if (background === null) {\r\n        setClear(clearColor, clearAlpha);\r\n      } else if (background && background.isColor) {\r\n        setClear(background, 1);\r\n        forceClear = true;\r\n      }\r\n\r\n      if (renderer.autoClear || forceClear) {\r\n        renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\r\n      }\r\n\r\n      if (\r\n        background &&\r\n        (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)\r\n      ) {\r\n        if (boxMesh === undefined) {\r\n          boxMesh = new Mesh(\r\n            new BoxGeometry(1, 1, 1),\r\n            new ShaderMaterial({\r\n              name: 'BackgroundCubeMaterial',\r\n              uniforms: cloneUniforms(ShaderLib.cube.uniforms),\r\n              vertexShader: ShaderLib.cube.vertexShader,\r\n              fragmentShader: ShaderLib.cube.fragmentShader,\r\n              side: BackSide,\r\n              depthTest: false,\r\n              depthWrite: false,\r\n              fog: false,\r\n            }),\r\n          );\r\n          boxMesh.geometry.deleteAttribute('normal');\r\n          boxMesh.geometry.deleteAttribute('uv');\r\n\r\n          boxMesh.onBeforeRender = function (renderer, scene, camera) {\r\n            this.matrixWorld.copyPosition(camera.matrixWorld);\r\n          }; // enable code injection for non-built-in material\r\n\r\n          Object.defineProperty(boxMesh.material, 'envMap', {\r\n            get: function () {\r\n              return this.uniforms.envMap.value;\r\n            },\r\n          });\r\n          objects.update(boxMesh);\r\n        }\r\n\r\n        boxMesh.material.uniforms.envMap.value = background;\r\n        boxMesh.material.uniforms.flipEnvMap.value =\r\n          background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\r\n\r\n        if (\r\n          currentBackground !== background ||\r\n          currentBackgroundVersion !== background.version ||\r\n          currentTonemapping !== renderer.toneMapping\r\n        ) {\r\n          boxMesh.material.needsUpdate = true;\r\n          currentBackground = background;\r\n          currentBackgroundVersion = background.version;\r\n          currentTonemapping = renderer.toneMapping;\r\n        } // push to the pre-sorted opaque render list\r\n\r\n        renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\r\n      } else if (background && background.isTexture) {\r\n        if (planeMesh === undefined) {\r\n          planeMesh = new Mesh(\r\n            new PlaneGeometry(2, 2),\r\n            new ShaderMaterial({\r\n              name: 'BackgroundMaterial',\r\n              uniforms: cloneUniforms(ShaderLib.background.uniforms),\r\n              vertexShader: ShaderLib.background.vertexShader,\r\n              fragmentShader: ShaderLib.background.fragmentShader,\r\n              side: FrontSide,\r\n              depthTest: false,\r\n              depthWrite: false,\r\n              fog: false,\r\n            }),\r\n          );\r\n          planeMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\r\n\r\n          Object.defineProperty(planeMesh.material, 'map', {\r\n            get: function () {\r\n              return this.uniforms.t2D.value;\r\n            },\r\n          });\r\n          objects.update(planeMesh);\r\n        }\r\n\r\n        planeMesh.material.uniforms.t2D.value = background;\r\n\r\n        if (background.matrixAutoUpdate === true) {\r\n          background.updateMatrix();\r\n        }\r\n\r\n        planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);\r\n\r\n        if (\r\n          currentBackground !== background ||\r\n          currentBackgroundVersion !== background.version ||\r\n          currentTonemapping !== renderer.toneMapping\r\n        ) {\r\n          planeMesh.material.needsUpdate = true;\r\n          currentBackground = background;\r\n          currentBackgroundVersion = background.version;\r\n          currentTonemapping = renderer.toneMapping;\r\n        } // push to the pre-sorted opaque render list\r\n\r\n        renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\r\n      }\r\n    }\r\n\r\n    function setClear(color, alpha) {\r\n      state.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\r\n    }\r\n\r\n    return {\r\n      getClearColor: function () {\r\n        return clearColor;\r\n      },\r\n      setClearColor: function (color, alpha = 1) {\r\n        clearColor.set(color);\r\n        clearAlpha = alpha;\r\n        setClear(clearColor, clearAlpha);\r\n      },\r\n      getClearAlpha: function () {\r\n        return clearAlpha;\r\n      },\r\n      setClearAlpha: function (alpha) {\r\n        clearAlpha = alpha;\r\n        setClear(clearColor, clearAlpha);\r\n      },\r\n      render: render,\r\n    };\r\n  }\r\n\r\n  function WebGLBindingStates(gl, extensions, attributes, capabilities) {\r\n    const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\r\n    const extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\r\n    const vaoAvailable = capabilities.isWebGL2 || extension !== null;\r\n    const bindingStates = {};\r\n    const defaultState = createBindingState(null);\r\n    let currentState = defaultState;\r\n\r\n    function setup(object, material, program, geometry, index) {\r\n      let updateBuffers = false;\r\n\r\n      if (vaoAvailable) {\r\n        const state = getBindingState(geometry, program, material);\r\n\r\n        if (currentState !== state) {\r\n          currentState = state;\r\n          bindVertexArrayObject(currentState.object);\r\n        }\r\n\r\n        updateBuffers = needsUpdate(geometry, index);\r\n        if (updateBuffers) saveCache(geometry, index);\r\n      } else {\r\n        const wireframe = material.wireframe === true;\r\n\r\n        if (\r\n          currentState.geometry !== geometry.id ||\r\n          currentState.program !== program.id ||\r\n          currentState.wireframe !== wireframe\r\n        ) {\r\n          currentState.geometry = geometry.id;\r\n          currentState.program = program.id;\r\n          currentState.wireframe = wireframe;\r\n          updateBuffers = true;\r\n        }\r\n      }\r\n\r\n      if (object.isInstancedMesh === true) {\r\n        updateBuffers = true;\r\n      }\r\n\r\n      if (index !== null) {\r\n        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\r\n      }\r\n\r\n      if (updateBuffers) {\r\n        setupVertexAttributes(object, material, program, geometry);\r\n\r\n        if (index !== null) {\r\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index).buffer);\r\n        }\r\n      }\r\n    }\r\n\r\n    function createVertexArrayObject() {\r\n      if (capabilities.isWebGL2) return gl.createVertexArray();\r\n      return extension.createVertexArrayOES();\r\n    }\r\n\r\n    function bindVertexArrayObject(vao) {\r\n      if (capabilities.isWebGL2) return gl.bindVertexArray(vao);\r\n      return extension.bindVertexArrayOES(vao);\r\n    }\r\n\r\n    function deleteVertexArrayObject(vao) {\r\n      if (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\r\n      return extension.deleteVertexArrayOES(vao);\r\n    }\r\n\r\n    function getBindingState(geometry, program, material) {\r\n      const wireframe = material.wireframe === true;\r\n      let programMap = bindingStates[geometry.id];\r\n\r\n      if (programMap === undefined) {\r\n        programMap = {};\r\n        bindingStates[geometry.id] = programMap;\r\n      }\r\n\r\n      let stateMap = programMap[program.id];\r\n\r\n      if (stateMap === undefined) {\r\n        stateMap = {};\r\n        programMap[program.id] = stateMap;\r\n      }\r\n\r\n      let state = stateMap[wireframe];\r\n\r\n      if (state === undefined) {\r\n        state = createBindingState(createVertexArrayObject());\r\n        stateMap[wireframe] = state;\r\n      }\r\n\r\n      return state;\r\n    }\r\n\r\n    function createBindingState(vao) {\r\n      const newAttributes = [];\r\n      const enabledAttributes = [];\r\n      const attributeDivisors = [];\r\n\r\n      for (let i = 0; i < maxVertexAttributes; i++) {\r\n        newAttributes[i] = 0;\r\n        enabledAttributes[i] = 0;\r\n        attributeDivisors[i] = 0;\r\n      }\r\n\r\n      return {\r\n        // for backward compatibility on non-VAO support browser\r\n        geometry: null,\r\n        program: null,\r\n        wireframe: false,\r\n        newAttributes: newAttributes,\r\n        enabledAttributes: enabledAttributes,\r\n        attributeDivisors: attributeDivisors,\r\n        object: vao,\r\n        attributes: {},\r\n        index: null,\r\n      };\r\n    }\r\n\r\n    function needsUpdate(geometry, index) {\r\n      const cachedAttributes = currentState.attributes;\r\n      const geometryAttributes = geometry.attributes;\r\n      let attributesNum = 0;\r\n\r\n      for (const key in geometryAttributes) {\r\n        const cachedAttribute = cachedAttributes[key];\r\n        const geometryAttribute = geometryAttributes[key];\r\n        if (cachedAttribute === undefined) return true;\r\n        if (cachedAttribute.attribute !== geometryAttribute) return true;\r\n        if (cachedAttribute.data !== geometryAttribute.data) return true;\r\n        attributesNum++;\r\n      }\r\n\r\n      if (currentState.attributesNum !== attributesNum) return true;\r\n      if (currentState.index !== index) return true;\r\n      return false;\r\n    }\r\n\r\n    function saveCache(geometry, index) {\r\n      const cache = {};\r\n      const attributes = geometry.attributes;\r\n      let attributesNum = 0;\r\n\r\n      for (const key in attributes) {\r\n        const attribute = attributes[key];\r\n        const data = {};\r\n        data.attribute = attribute;\r\n\r\n        if (attribute.data) {\r\n          data.data = attribute.data;\r\n        }\r\n\r\n        cache[key] = data;\r\n        attributesNum++;\r\n      }\r\n\r\n      currentState.attributes = cache;\r\n      currentState.attributesNum = attributesNum;\r\n      currentState.index = index;\r\n    }\r\n\r\n    function initAttributes() {\r\n      const newAttributes = currentState.newAttributes;\r\n\r\n      for (let i = 0, il = newAttributes.length; i < il; i++) {\r\n        newAttributes[i] = 0;\r\n      }\r\n    }\r\n\r\n    function enableAttribute(attribute) {\r\n      enableAttributeAndDivisor(attribute, 0);\r\n    }\r\n\r\n    function enableAttributeAndDivisor(attribute, meshPerAttribute) {\r\n      const newAttributes = currentState.newAttributes;\r\n      const enabledAttributes = currentState.enabledAttributes;\r\n      const attributeDivisors = currentState.attributeDivisors;\r\n      newAttributes[attribute] = 1;\r\n\r\n      if (enabledAttributes[attribute] === 0) {\r\n        gl.enableVertexAttribArray(attribute);\r\n        enabledAttributes[attribute] = 1;\r\n      }\r\n\r\n      if (attributeDivisors[attribute] !== meshPerAttribute) {\r\n        const extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\r\n        extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](\r\n          attribute,\r\n          meshPerAttribute,\r\n        );\r\n        attributeDivisors[attribute] = meshPerAttribute;\r\n      }\r\n    }\r\n\r\n    function disableUnusedAttributes() {\r\n      const newAttributes = currentState.newAttributes;\r\n      const enabledAttributes = currentState.enabledAttributes;\r\n\r\n      for (let i = 0, il = enabledAttributes.length; i < il; i++) {\r\n        if (enabledAttributes[i] !== newAttributes[i]) {\r\n          gl.disableVertexAttribArray(i);\r\n          enabledAttributes[i] = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    function vertexAttribPointer(index, size, type, normalized, stride, offset) {\r\n      if (capabilities.isWebGL2 === true && (type === gl.INT || type === gl.UNSIGNED_INT)) {\r\n        gl.vertexAttribIPointer(index, size, type, stride, offset);\r\n      } else {\r\n        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\r\n      }\r\n    }\r\n\r\n    function setupVertexAttributes(object, material, program, geometry) {\r\n      if (\r\n        capabilities.isWebGL2 === false &&\r\n        (object.isInstancedMesh || geometry.isInstancedBufferGeometry)\r\n      ) {\r\n        if (extensions.get('ANGLE_instanced_arrays') === null) return;\r\n      }\r\n\r\n      initAttributes();\r\n      const geometryAttributes = geometry.attributes;\r\n      const programAttributes = program.getAttributes();\r\n      const materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n      for (const name in programAttributes) {\r\n        const programAttribute = programAttributes[name];\r\n\r\n        if (programAttribute >= 0) {\r\n          const geometryAttribute = geometryAttributes[name];\r\n\r\n          if (geometryAttribute !== undefined) {\r\n            const normalized = geometryAttribute.normalized;\r\n            const size = geometryAttribute.itemSize;\r\n            const attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\r\n\r\n            if (attribute === undefined) continue;\r\n            const buffer = attribute.buffer;\r\n            const type = attribute.type;\r\n            const bytesPerElement = attribute.bytesPerElement;\r\n\r\n            if (geometryAttribute.isInterleavedBufferAttribute) {\r\n              const data = geometryAttribute.data;\r\n              const stride = data.stride;\r\n              const offset = geometryAttribute.offset;\r\n\r\n              if (data && data.isInstancedInterleavedBuffer) {\r\n                enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\r\n\r\n                if (geometry._maxInstanceCount === undefined) {\r\n                  geometry._maxInstanceCount = data.meshPerAttribute * data.count;\r\n                }\r\n              } else {\r\n                enableAttribute(programAttribute);\r\n              }\r\n\r\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n              vertexAttribPointer(\r\n                programAttribute,\r\n                size,\r\n                type,\r\n                normalized,\r\n                stride * bytesPerElement,\r\n                offset * bytesPerElement,\r\n              );\r\n            } else {\r\n              if (geometryAttribute.isInstancedBufferAttribute) {\r\n                enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\r\n\r\n                if (geometry._maxInstanceCount === undefined) {\r\n                  geometry._maxInstanceCount =\r\n                    geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n                }\r\n              } else {\r\n                enableAttribute(programAttribute);\r\n              }\r\n\r\n              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n              vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\r\n            }\r\n          } else if (name === 'instanceMatrix') {\r\n            const attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\r\n\r\n            if (attribute === undefined) continue;\r\n            const buffer = attribute.buffer;\r\n            const type = attribute.type;\r\n            enableAttributeAndDivisor(programAttribute + 0, 1);\r\n            enableAttributeAndDivisor(programAttribute + 1, 1);\r\n            enableAttributeAndDivisor(programAttribute + 2, 1);\r\n            enableAttributeAndDivisor(programAttribute + 3, 1);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n            gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\r\n            gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\r\n            gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\r\n            gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\r\n          } else if (name === 'instanceColor') {\r\n            const attribute = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\r\n\r\n            if (attribute === undefined) continue;\r\n            const buffer = attribute.buffer;\r\n            const type = attribute.type;\r\n            enableAttributeAndDivisor(programAttribute, 1);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n            gl.vertexAttribPointer(programAttribute, 3, type, false, 12, 0);\r\n          } else if (materialDefaultAttributeValues !== undefined) {\r\n            const value = materialDefaultAttributeValues[name];\r\n\r\n            if (value !== undefined) {\r\n              switch (value.length) {\r\n                case 2:\r\n                  gl.vertexAttrib2fv(programAttribute, value);\r\n                  break;\r\n\r\n                case 3:\r\n                  gl.vertexAttrib3fv(programAttribute, value);\r\n                  break;\r\n\r\n                case 4:\r\n                  gl.vertexAttrib4fv(programAttribute, value);\r\n                  break;\r\n\r\n                default:\r\n                  gl.vertexAttrib1fv(programAttribute, value);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      disableUnusedAttributes();\r\n    }\r\n\r\n    function dispose() {\r\n      reset();\r\n\r\n      for (const geometryId in bindingStates) {\r\n        const programMap = bindingStates[geometryId];\r\n\r\n        for (const programId in programMap) {\r\n          const stateMap = programMap[programId];\r\n\r\n          for (const wireframe in stateMap) {\r\n            deleteVertexArrayObject(stateMap[wireframe].object);\r\n            delete stateMap[wireframe];\r\n          }\r\n\r\n          delete programMap[programId];\r\n        }\r\n\r\n        delete bindingStates[geometryId];\r\n      }\r\n    }\r\n\r\n    function releaseStatesOfGeometry(geometry) {\r\n      if (bindingStates[geometry.id] === undefined) return;\r\n      const programMap = bindingStates[geometry.id];\r\n\r\n      for (const programId in programMap) {\r\n        const stateMap = programMap[programId];\r\n\r\n        for (const wireframe in stateMap) {\r\n          deleteVertexArrayObject(stateMap[wireframe].object);\r\n          delete stateMap[wireframe];\r\n        }\r\n\r\n        delete programMap[programId];\r\n      }\r\n\r\n      delete bindingStates[geometry.id];\r\n    }\r\n\r\n    function releaseStatesOfProgram(program) {\r\n      for (const geometryId in bindingStates) {\r\n        const programMap = bindingStates[geometryId];\r\n        if (programMap[program.id] === undefined) continue;\r\n        const stateMap = programMap[program.id];\r\n\r\n        for (const wireframe in stateMap) {\r\n          deleteVertexArrayObject(stateMap[wireframe].object);\r\n          delete stateMap[wireframe];\r\n        }\r\n\r\n        delete programMap[program.id];\r\n      }\r\n    }\r\n\r\n    function reset() {\r\n      resetDefaultState();\r\n      if (currentState === defaultState) return;\r\n      currentState = defaultState;\r\n      bindVertexArrayObject(currentState.object);\r\n    } // for backward-compatilibity\r\n\r\n    function resetDefaultState() {\r\n      defaultState.geometry = null;\r\n      defaultState.program = null;\r\n      defaultState.wireframe = false;\r\n    }\r\n\r\n    return {\r\n      setup: setup,\r\n      reset: reset,\r\n      resetDefaultState: resetDefaultState,\r\n      dispose: dispose,\r\n      releaseStatesOfGeometry: releaseStatesOfGeometry,\r\n      releaseStatesOfProgram: releaseStatesOfProgram,\r\n      initAttributes: initAttributes,\r\n      enableAttribute: enableAttribute,\r\n      disableUnusedAttributes: disableUnusedAttributes,\r\n    };\r\n  }\r\n\r\n  function WebGLBufferRenderer(gl, extensions, info, capabilities) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n    let mode;\r\n\r\n    function setMode(value) {\r\n      mode = value;\r\n    }\r\n\r\n    function render(start, count) {\r\n      gl.drawArrays(mode, start, count);\r\n      info.update(count, mode, 1);\r\n    }\r\n\r\n    function renderInstances(start, count, primcount) {\r\n      if (primcount === 0) return;\r\n      let extension, methodName;\r\n\r\n      if (isWebGL2) {\r\n        extension = gl;\r\n        methodName = 'drawArraysInstanced';\r\n      } else {\r\n        extension = extensions.get('ANGLE_instanced_arrays');\r\n        methodName = 'drawArraysInstancedANGLE';\r\n\r\n        if (extension === null) {\r\n          console.error(\r\n            'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.',\r\n          );\r\n          return;\r\n        }\r\n      }\r\n\r\n      extension[methodName](mode, start, count, primcount);\r\n      info.update(count, mode, primcount);\r\n    } //\r\n\r\n    this.setMode = setMode;\r\n    this.render = render;\r\n    this.renderInstances = renderInstances;\r\n  }\r\n\r\n  function WebGLCapabilities(gl, extensions, parameters) {\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n      if (maxAnisotropy !== undefined) return maxAnisotropy;\r\n\r\n      if (extensions.has('EXT_texture_filter_anisotropic') === true) {\r\n        const extension = extensions.get('EXT_texture_filter_anisotropic');\r\n        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\r\n      } else {\r\n        maxAnisotropy = 0;\r\n      }\r\n\r\n      return maxAnisotropy;\r\n    }\r\n\r\n    function getMaxPrecision(precision) {\r\n      if (precision === 'highp') {\r\n        if (\r\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 &&\r\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0\r\n        ) {\r\n          return 'highp';\r\n        }\r\n\r\n        precision = 'mediump';\r\n      }\r\n\r\n      if (precision === 'mediump') {\r\n        if (\r\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 &&\r\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0\r\n        ) {\r\n          return 'mediump';\r\n        }\r\n      }\r\n\r\n      return 'lowp';\r\n    }\r\n    /* eslint-disable no-undef */\r\n\r\n    const isWebGL2 =\r\n      (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) ||\r\n      (typeof WebGL2ComputeRenderingContext !== 'undefined' &&\r\n        gl instanceof WebGL2ComputeRenderingContext);\r\n    /* eslint-enable no-undef */\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision(precision);\r\n\r\n    if (maxPrecision !== precision) {\r\n      console.warn(\r\n        'THREE.WebGLRenderer:',\r\n        precision,\r\n        'not supported, using',\r\n        maxPrecision,\r\n        'instead.',\r\n      );\r\n      precision = maxPrecision;\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has('WEBGL_draw_buffers');\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n    const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\r\n    const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\r\n    const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\r\n    const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\r\n    const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n    const maxSamples = isWebGL2 ? gl.getParameter(gl.MAX_SAMPLES) : 0;\r\n    return {\r\n      isWebGL2: isWebGL2,\r\n      drawBuffers: drawBuffers,\r\n      getMaxAnisotropy: getMaxAnisotropy,\r\n      getMaxPrecision: getMaxPrecision,\r\n      precision: precision,\r\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n      maxTextures: maxTextures,\r\n      maxVertexTextures: maxVertexTextures,\r\n      maxTextureSize: maxTextureSize,\r\n      maxCubemapSize: maxCubemapSize,\r\n      maxAttributes: maxAttributes,\r\n      maxVertexUniforms: maxVertexUniforms,\r\n      maxVaryings: maxVaryings,\r\n      maxFragmentUniforms: maxFragmentUniforms,\r\n      vertexTextures: vertexTextures,\r\n      floatFragmentTextures: floatFragmentTextures,\r\n      floatVertexTextures: floatVertexTextures,\r\n      maxSamples: maxSamples,\r\n    };\r\n  }\r\n\r\n  function WebGLClipping(properties) {\r\n    const scope = this;\r\n    let globalState = null,\r\n      numGlobalPlanes = 0,\r\n      localClippingEnabled = false,\r\n      renderingShadows = false;\r\n    const plane = new Plane(),\r\n      viewNormalMatrix = new Matrix3(),\r\n      uniform = {\r\n        value: null,\r\n        needsUpdate: false,\r\n      };\r\n    this.uniform = uniform;\r\n    this.numPlanes = 0;\r\n    this.numIntersection = 0;\r\n\r\n    this.init = function (planes, enableLocalClipping, camera) {\r\n      const enabled =\r\n        planes.length !== 0 ||\r\n        enableLocalClipping || // enable state of previous frame - the clipping code has to\r\n        // run another frame in order to reset the state:\r\n        numGlobalPlanes !== 0 ||\r\n        localClippingEnabled;\r\n      localClippingEnabled = enableLocalClipping;\r\n      globalState = projectPlanes(planes, camera, 0);\r\n      numGlobalPlanes = planes.length;\r\n      return enabled;\r\n    };\r\n\r\n    this.beginShadows = function () {\r\n      renderingShadows = true;\r\n      projectPlanes(null);\r\n    };\r\n\r\n    this.endShadows = function () {\r\n      renderingShadows = false;\r\n      resetGlobalState();\r\n    };\r\n\r\n    this.setState = function (material, camera, useCache) {\r\n      const planes = material.clippingPlanes,\r\n        clipIntersection = material.clipIntersection,\r\n        clipShadows = material.clipShadows;\r\n      const materialProperties = properties.get(material);\r\n\r\n      if (\r\n        !localClippingEnabled ||\r\n        planes === null ||\r\n        planes.length === 0 ||\r\n        (renderingShadows && !clipShadows)\r\n      ) {\r\n        // there's no local clipping\r\n        if (renderingShadows) {\r\n          // there's no global clipping\r\n          projectPlanes(null);\r\n        } else {\r\n          resetGlobalState();\r\n        }\r\n      } else {\r\n        const nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n          lGlobal = nGlobal * 4;\r\n        let dstArray = materialProperties.clippingState || null;\r\n        uniform.value = dstArray; // ensure unique state\r\n\r\n        dstArray = projectPlanes(planes, camera, lGlobal, useCache);\r\n\r\n        for (let i = 0; i !== lGlobal; ++i) {\r\n          dstArray[i] = globalState[i];\r\n        }\r\n\r\n        materialProperties.clippingState = dstArray;\r\n        this.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n        this.numPlanes += nGlobal;\r\n      }\r\n    };\r\n\r\n    function resetGlobalState() {\r\n      if (uniform.value !== globalState) {\r\n        uniform.value = globalState;\r\n        uniform.needsUpdate = numGlobalPlanes > 0;\r\n      }\r\n\r\n      scope.numPlanes = numGlobalPlanes;\r\n      scope.numIntersection = 0;\r\n    }\r\n\r\n    function projectPlanes(planes, camera, dstOffset, skipTransform) {\r\n      const nPlanes = planes !== null ? planes.length : 0;\r\n      let dstArray = null;\r\n\r\n      if (nPlanes !== 0) {\r\n        dstArray = uniform.value;\r\n\r\n        if (skipTransform !== true || dstArray === null) {\r\n          const flatSize = dstOffset + nPlanes * 4,\r\n            viewMatrix = camera.matrixWorldInverse;\r\n          viewNormalMatrix.getNormalMatrix(viewMatrix);\r\n\r\n          if (dstArray === null || dstArray.length < flatSize) {\r\n            dstArray = new Float32Array(flatSize);\r\n          }\r\n\r\n          for (let i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\r\n            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\r\n            plane.normal.toArray(dstArray, i4);\r\n            dstArray[i4 + 3] = plane.constant;\r\n          }\r\n        }\r\n\r\n        uniform.value = dstArray;\r\n        uniform.needsUpdate = true;\r\n      }\r\n\r\n      scope.numPlanes = nPlanes;\r\n      scope.numIntersection = 0;\r\n      return dstArray;\r\n    }\r\n  }\r\n\r\n  function WebGLCubeMaps(renderer) {\r\n    let cubemaps = new WeakMap();\r\n\r\n    function mapTextureMapping(texture, mapping) {\r\n      if (mapping === EquirectangularReflectionMapping) {\r\n        texture.mapping = CubeReflectionMapping;\r\n      } else if (mapping === EquirectangularRefractionMapping) {\r\n        texture.mapping = CubeRefractionMapping;\r\n      }\r\n\r\n      return texture;\r\n    }\r\n\r\n    function get(texture) {\r\n      if (texture && texture.isTexture) {\r\n        const mapping = texture.mapping;\r\n\r\n        if (\r\n          mapping === EquirectangularReflectionMapping ||\r\n          mapping === EquirectangularRefractionMapping\r\n        ) {\r\n          if (cubemaps.has(texture)) {\r\n            const cubemap = cubemaps.get(texture).texture;\r\n            return mapTextureMapping(cubemap, texture.mapping);\r\n          } else {\r\n            const image = texture.image;\r\n\r\n            if (image && image.height > 0) {\r\n              const currentRenderTarget = renderer.getRenderTarget();\r\n              const renderTarget = new WebGLCubeRenderTarget(image.height / 2);\r\n              renderTarget.fromEquirectangularTexture(renderer, texture);\r\n              cubemaps.set(texture, renderTarget);\r\n              renderer.setRenderTarget(currentRenderTarget);\r\n              texture.addEventListener('dispose', onTextureDispose);\r\n              return mapTextureMapping(renderTarget.texture, texture.mapping);\r\n            } else {\r\n              // image not yet ready. try the conversion next frame\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return texture;\r\n    }\r\n\r\n    function onTextureDispose(event) {\r\n      const texture = event.target;\r\n      texture.removeEventListener('dispose', onTextureDispose);\r\n      const cubemap = cubemaps.get(texture);\r\n\r\n      if (cubemap !== undefined) {\r\n        cubemaps.delete(texture);\r\n        cubemap.dispose();\r\n      }\r\n    }\r\n\r\n    function dispose() {\r\n      cubemaps = new WeakMap();\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      dispose: dispose,\r\n    };\r\n  }\r\n\r\n  function WebGLExtensions(gl) {\r\n    const extensions = {};\r\n\r\n    function getExtension(name) {\r\n      if (extensions[name] !== undefined) {\r\n        return extensions[name];\r\n      }\r\n\r\n      let extension;\r\n\r\n      switch (name) {\r\n        case 'WEBGL_depth_texture':\r\n          extension =\r\n            gl.getExtension('WEBGL_depth_texture') ||\r\n            gl.getExtension('MOZ_WEBGL_depth_texture') ||\r\n            gl.getExtension('WEBKIT_WEBGL_depth_texture');\r\n          break;\r\n\r\n        case 'EXT_texture_filter_anisotropic':\r\n          extension =\r\n            gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n            gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\r\n            gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\r\n          break;\r\n\r\n        case 'WEBGL_compressed_texture_s3tc':\r\n          extension =\r\n            gl.getExtension('WEBGL_compressed_texture_s3tc') ||\r\n            gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||\r\n            gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\r\n          break;\r\n\r\n        case 'WEBGL_compressed_texture_pvrtc':\r\n          extension =\r\n            gl.getExtension('WEBGL_compressed_texture_pvrtc') ||\r\n            gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\r\n          break;\r\n\r\n        default:\r\n          extension = gl.getExtension(name);\r\n      }\r\n\r\n      extensions[name] = extension;\r\n      return extension;\r\n    }\r\n\r\n    return {\r\n      has: function (name) {\r\n        return getExtension(name) !== null;\r\n      },\r\n      init: function (capabilities) {\r\n        if (capabilities.isWebGL2) {\r\n          getExtension('EXT_color_buffer_float');\r\n        } else {\r\n          getExtension('WEBGL_depth_texture');\r\n          getExtension('OES_texture_float');\r\n          getExtension('OES_texture_half_float');\r\n          getExtension('OES_texture_half_float_linear');\r\n          getExtension('OES_standard_derivatives');\r\n          getExtension('OES_element_index_uint');\r\n          getExtension('OES_vertex_array_object');\r\n          getExtension('ANGLE_instanced_arrays');\r\n        }\r\n\r\n        getExtension('OES_texture_float_linear');\r\n        getExtension('EXT_color_buffer_half_float');\r\n      },\r\n      get: function (name) {\r\n        const extension = getExtension(name);\r\n\r\n        if (extension === null) {\r\n          console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\r\n        }\r\n\r\n        return extension;\r\n      },\r\n    };\r\n  }\r\n\r\n  function WebGLGeometries(gl, attributes, info, bindingStates) {\r\n    const geometries = {};\r\n    const wireframeAttributes = new WeakMap();\r\n\r\n    function onGeometryDispose(event) {\r\n      const geometry = event.target;\r\n\r\n      if (geometry.index !== null) {\r\n        attributes.remove(geometry.index);\r\n      }\r\n\r\n      for (const name in geometry.attributes) {\r\n        attributes.remove(geometry.attributes[name]);\r\n      }\r\n\r\n      geometry.removeEventListener('dispose', onGeometryDispose);\r\n      delete geometries[geometry.id];\r\n      const attribute = wireframeAttributes.get(geometry);\r\n\r\n      if (attribute) {\r\n        attributes.remove(attribute);\r\n        wireframeAttributes.delete(geometry);\r\n      }\r\n\r\n      bindingStates.releaseStatesOfGeometry(geometry);\r\n\r\n      if (geometry.isInstancedBufferGeometry === true) {\r\n        delete geometry._maxInstanceCount;\r\n      } //\r\n\r\n      info.memory.geometries--;\r\n    }\r\n\r\n    function get(object, geometry) {\r\n      if (geometries[geometry.id] === true) return geometry;\r\n      geometry.addEventListener('dispose', onGeometryDispose);\r\n      geometries[geometry.id] = true;\r\n      info.memory.geometries++;\r\n      return geometry;\r\n    }\r\n\r\n    function update(geometry) {\r\n      const geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\r\n\r\n      for (const name in geometryAttributes) {\r\n        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\r\n      } // morph targets\r\n\r\n      const morphAttributes = geometry.morphAttributes;\r\n\r\n      for (const name in morphAttributes) {\r\n        const array = morphAttributes[name];\r\n\r\n        for (let i = 0, l = array.length; i < l; i++) {\r\n          attributes.update(array[i], gl.ARRAY_BUFFER);\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateWireframeAttribute(geometry) {\r\n      const indices = [];\r\n      const geometryIndex = geometry.index;\r\n      const geometryPosition = geometry.attributes.position;\r\n      let version = 0;\r\n\r\n      if (geometryIndex !== null) {\r\n        const array = geometryIndex.array;\r\n        version = geometryIndex.version;\r\n\r\n        for (let i = 0, l = array.length; i < l; i += 3) {\r\n          const a = array[i + 0];\r\n          const b = array[i + 1];\r\n          const c = array[i + 2];\r\n          indices.push(a, b, b, c, c, a);\r\n        }\r\n      } else {\r\n        const array = geometryPosition.array;\r\n        version = geometryPosition.version;\r\n\r\n        for (let i = 0, l = array.length / 3 - 1; i < l; i += 3) {\r\n          const a = i + 0;\r\n          const b = i + 1;\r\n          const c = i + 2;\r\n          indices.push(a, b, b, c, c, a);\r\n        }\r\n      }\r\n\r\n      const attribute = new (\r\n        arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute\r\n      )(indices, 1);\r\n      attribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\r\n      //\r\n\r\n      const previousAttribute = wireframeAttributes.get(geometry);\r\n      if (previousAttribute) attributes.remove(previousAttribute); //\r\n\r\n      wireframeAttributes.set(geometry, attribute);\r\n    }\r\n\r\n    function getWireframeAttribute(geometry) {\r\n      const currentAttribute = wireframeAttributes.get(geometry);\r\n\r\n      if (currentAttribute) {\r\n        const geometryIndex = geometry.index;\r\n\r\n        if (geometryIndex !== null) {\r\n          // if the attribute is obsolete, create a new one\r\n          if (currentAttribute.version < geometryIndex.version) {\r\n            updateWireframeAttribute(geometry);\r\n          }\r\n        }\r\n      } else {\r\n        updateWireframeAttribute(geometry);\r\n      }\r\n\r\n      return wireframeAttributes.get(geometry);\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      update: update,\r\n      getWireframeAttribute: getWireframeAttribute,\r\n    };\r\n  }\r\n\r\n  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n    let mode;\r\n\r\n    function setMode(value) {\r\n      mode = value;\r\n    }\r\n\r\n    let type, bytesPerElement;\r\n\r\n    function setIndex(value) {\r\n      type = value.type;\r\n      bytesPerElement = value.bytesPerElement;\r\n    }\r\n\r\n    function render(start, count) {\r\n      gl.drawElements(mode, count, type, start * bytesPerElement);\r\n      info.update(count, mode, 1);\r\n    }\r\n\r\n    function renderInstances(start, count, primcount) {\r\n      if (primcount === 0) return;\r\n      let extension, methodName;\r\n\r\n      if (isWebGL2) {\r\n        extension = gl;\r\n        methodName = 'drawElementsInstanced';\r\n      } else {\r\n        extension = extensions.get('ANGLE_instanced_arrays');\r\n        methodName = 'drawElementsInstancedANGLE';\r\n\r\n        if (extension === null) {\r\n          console.error(\r\n            'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.',\r\n          );\r\n          return;\r\n        }\r\n      }\r\n\r\n      extension[methodName](mode, count, type, start * bytesPerElement, primcount);\r\n      info.update(count, mode, primcount);\r\n    } //\r\n\r\n    this.setMode = setMode;\r\n    this.setIndex = setIndex;\r\n    this.render = render;\r\n    this.renderInstances = renderInstances;\r\n  }\r\n\r\n  function WebGLInfo(gl) {\r\n    const memory = {\r\n      geometries: 0,\r\n      textures: 0,\r\n    };\r\n    const render = {\r\n      frame: 0,\r\n      calls: 0,\r\n      triangles: 0,\r\n      points: 0,\r\n      lines: 0,\r\n    };\r\n\r\n    function update(count, mode, instanceCount) {\r\n      render.calls++;\r\n\r\n      switch (mode) {\r\n        case gl.TRIANGLES:\r\n          render.triangles += instanceCount * (count / 3);\r\n          break;\r\n\r\n        case gl.LINES:\r\n          render.lines += instanceCount * (count / 2);\r\n          break;\r\n\r\n        case gl.LINE_STRIP:\r\n          render.lines += instanceCount * (count - 1);\r\n          break;\r\n\r\n        case gl.LINE_LOOP:\r\n          render.lines += instanceCount * count;\r\n          break;\r\n\r\n        case gl.POINTS:\r\n          render.points += instanceCount * count;\r\n          break;\r\n\r\n        default:\r\n          console.error('THREE.WebGLInfo: Unknown draw mode:', mode);\r\n          break;\r\n      }\r\n    }\r\n\r\n    function reset() {\r\n      render.frame++;\r\n      render.calls = 0;\r\n      render.triangles = 0;\r\n      render.points = 0;\r\n      render.lines = 0;\r\n    }\r\n\r\n    return {\r\n      memory: memory,\r\n      render: render,\r\n      programs: null,\r\n      autoReset: true,\r\n      reset: reset,\r\n      update: update,\r\n    };\r\n  }\r\n\r\n  function numericalSort(a, b) {\r\n    return a[0] - b[0];\r\n  }\r\n\r\n  function absNumericalSort(a, b) {\r\n    return Math.abs(b[1]) - Math.abs(a[1]);\r\n  }\r\n\r\n  function WebGLMorphtargets(gl) {\r\n    const influencesList = {};\r\n    const morphInfluences = new Float32Array(8);\r\n    const workInfluences = [];\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n      workInfluences[i] = [i, 0];\r\n    }\r\n\r\n    function update(object, geometry, material, program) {\r\n      const objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\r\n      // This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\r\n\r\n      const length = objectInfluences === undefined ? 0 : objectInfluences.length;\r\n      let influences = influencesList[geometry.id];\r\n\r\n      if (influences === undefined) {\r\n        // initialise list\r\n        influences = [];\r\n\r\n        for (let i = 0; i < length; i++) {\r\n          influences[i] = [i, 0];\r\n        }\r\n\r\n        influencesList[geometry.id] = influences;\r\n      } // Collect influences\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const influence = influences[i];\r\n        influence[0] = i;\r\n        influence[1] = objectInfluences[i];\r\n      }\r\n\r\n      influences.sort(absNumericalSort);\r\n\r\n      for (let i = 0; i < 8; i++) {\r\n        if (i < length && influences[i][1]) {\r\n          workInfluences[i][0] = influences[i][0];\r\n          workInfluences[i][1] = influences[i][1];\r\n        } else {\r\n          workInfluences[i][0] = Number.MAX_SAFE_INTEGER;\r\n          workInfluences[i][1] = 0;\r\n        }\r\n      }\r\n\r\n      workInfluences.sort(numericalSort);\r\n      const morphTargets = material.morphTargets && geometry.morphAttributes.position;\r\n      const morphNormals = material.morphNormals && geometry.morphAttributes.normal;\r\n      let morphInfluencesSum = 0;\r\n\r\n      for (let i = 0; i < 8; i++) {\r\n        const influence = workInfluences[i];\r\n        const index = influence[0];\r\n        const value = influence[1];\r\n\r\n        if (index !== Number.MAX_SAFE_INTEGER && value) {\r\n          if (morphTargets && geometry.getAttribute('morphTarget' + i) !== morphTargets[index]) {\r\n            geometry.setAttribute('morphTarget' + i, morphTargets[index]);\r\n          }\r\n\r\n          if (morphNormals && geometry.getAttribute('morphNormal' + i) !== morphNormals[index]) {\r\n            geometry.setAttribute('morphNormal' + i, morphNormals[index]);\r\n          }\r\n\r\n          morphInfluences[i] = value;\r\n          morphInfluencesSum += value;\r\n        } else {\r\n          if (morphTargets && geometry.hasAttribute('morphTarget' + i) === true) {\r\n            geometry.deleteAttribute('morphTarget' + i);\r\n          }\r\n\r\n          if (morphNormals && geometry.hasAttribute('morphNormal' + i) === true) {\r\n            geometry.deleteAttribute('morphNormal' + i);\r\n          }\r\n\r\n          morphInfluences[i] = 0;\r\n        }\r\n      } // GLSL shader uses formula baseinfluence * base + sum(target * influence)\r\n      // This allows us to switch between absolute morphs and relative morphs without changing shader code\r\n      // When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\r\n\r\n      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n      program.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\r\n      program.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\r\n    }\r\n\r\n    return {\r\n      update: update,\r\n    };\r\n  }\r\n\r\n  function WebGLObjects(gl, geometries, attributes, info) {\r\n    let updateMap = new WeakMap();\r\n\r\n    function update(object) {\r\n      const frame = info.render.frame;\r\n      const geometry = object.geometry;\r\n      const buffergeometry = geometries.get(object, geometry); // Update once per frame\r\n\r\n      if (updateMap.get(buffergeometry) !== frame) {\r\n        geometries.update(buffergeometry);\r\n        updateMap.set(buffergeometry, frame);\r\n      }\r\n\r\n      if (object.isInstancedMesh) {\r\n        if (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\r\n          object.addEventListener('dispose', onInstancedMeshDispose);\r\n        }\r\n\r\n        attributes.update(object.instanceMatrix, gl.ARRAY_BUFFER);\r\n\r\n        if (object.instanceColor !== null) {\r\n          attributes.update(object.instanceColor, gl.ARRAY_BUFFER);\r\n        }\r\n      }\r\n\r\n      return buffergeometry;\r\n    }\r\n\r\n    function dispose() {\r\n      updateMap = new WeakMap();\r\n    }\r\n\r\n    function onInstancedMeshDispose(event) {\r\n      const instancedMesh = event.target;\r\n      instancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\r\n      attributes.remove(instancedMesh.instanceMatrix);\r\n      if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\r\n    }\r\n\r\n    return {\r\n      update: update,\r\n      dispose: dispose,\r\n    };\r\n  }\r\n\r\n  class DataTexture2DArray extends Texture {\r\n    constructor(data = null, width = 1, height = 1, depth = 1) {\r\n      super(null);\r\n      this.image = {\r\n        data,\r\n        width,\r\n        height,\r\n        depth,\r\n      };\r\n      this.magFilter = NearestFilter;\r\n      this.minFilter = NearestFilter;\r\n      this.wrapR = ClampToEdgeWrapping;\r\n      this.generateMipmaps = false;\r\n      this.flipY = false;\r\n      this.unpackAlignment = 1;\r\n      this.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  DataTexture2DArray.prototype.isDataTexture2DArray = true;\r\n\r\n  class DataTexture3D extends Texture {\r\n    constructor(data = null, width = 1, height = 1, depth = 1) {\r\n      // We're going to add .setXXX() methods for setting properties later.\r\n      // Users can still set in DataTexture3D directly.\r\n      //\r\n      //\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\r\n      // \ttexture.anisotropy = 16;\r\n      //\r\n      // See #14839\r\n      super(null);\r\n      this.image = {\r\n        data,\r\n        width,\r\n        height,\r\n        depth,\r\n      };\r\n      this.magFilter = NearestFilter;\r\n      this.minFilter = NearestFilter;\r\n      this.wrapR = ClampToEdgeWrapping;\r\n      this.generateMipmaps = false;\r\n      this.flipY = false;\r\n      this.unpackAlignment = 1;\r\n      this.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  DataTexture3D.prototype.isDataTexture3D = true;\r\n\r\n  /**\r\n   * Uniforms of a program.\r\n   * Those form a tree structure with a special top-level container for the root,\r\n   * which you get by calling 'new WebGLUniforms( gl, program )'.\r\n   *\r\n   *\r\n   * Properties of inner nodes including the top-level container:\r\n   *\r\n   * .seq - array of nested uniforms\r\n   * .map - nested uniforms by name\r\n   *\r\n   *\r\n   * Methods of all nodes except the top-level container:\r\n   *\r\n   * .setValue( gl, value, [textures] )\r\n   *\r\n   * \t\tuploads a uniform value(s)\r\n   *\t\tthe 'textures' parameter is needed for sampler uniforms\r\n   *\r\n   *\r\n   * Static methods of the top-level container (textures factorizations):\r\n   *\r\n   * .upload( gl, seq, values, textures )\r\n   *\r\n   * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n   *\r\n   * .seqWithValue( seq, values ) : filteredSeq\r\n   *\r\n   * \t\tfilters 'seq' entries with corresponding entry in values\r\n   *\r\n   *\r\n   * Methods of the top-level container (textures factorizations):\r\n   *\r\n   * .setValue( gl, name, value, textures )\r\n   *\r\n   * \t\tsets uniform with\tname 'name' to 'value'\r\n   *\r\n   * .setOptional( gl, obj, prop )\r\n   *\r\n   * \t\tlike .set for an optional property of the object\r\n   *\r\n   */\r\n  const emptyTexture = new Texture();\r\n  const emptyTexture2dArray = new DataTexture2DArray();\r\n  const emptyTexture3d = new DataTexture3D();\r\n  const emptyCubeTexture = new CubeTexture(); // --- Utilities ---\r\n  // Array Caches (provide typed arrays for temporary by size)\r\n\r\n  const arrayCacheF32 = [];\r\n  const arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\r\n\r\n  const mat4array = new Float32Array(16);\r\n  const mat3array = new Float32Array(9);\r\n  const mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\r\n\r\n  function flatten(array, nBlocks, blockSize) {\r\n    const firstElem = array[0];\r\n    if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\r\n    // see http://jacksondunstan.com/articles/983\r\n\r\n    const n = nBlocks * blockSize;\r\n    let r = arrayCacheF32[n];\r\n\r\n    if (r === undefined) {\r\n      r = new Float32Array(n);\r\n      arrayCacheF32[n] = r;\r\n    }\r\n\r\n    if (nBlocks !== 0) {\r\n      firstElem.toArray(r, 0);\r\n\r\n      for (let i = 1, offset = 0; i !== nBlocks; ++i) {\r\n        offset += blockSize;\r\n        array[i].toArray(r, offset);\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function arraysEqual(a, b) {\r\n    if (a.length !== b.length) return false;\r\n\r\n    for (let i = 0, l = a.length; i < l; i++) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function copyArray(a, b) {\r\n    for (let i = 0, l = b.length; i < l; i++) {\r\n      a[i] = b[i];\r\n    }\r\n  } // Texture unit allocation\r\n\r\n  function allocTexUnits(textures, n) {\r\n    let r = arrayCacheI32[n];\r\n\r\n    if (r === undefined) {\r\n      r = new Int32Array(n);\r\n      arrayCacheI32[n] = r;\r\n    }\r\n\r\n    for (let i = 0; i !== n; ++i) {\r\n      r[i] = textures.allocateTextureUnit();\r\n    }\r\n\r\n    return r;\r\n  } // --- Setters ---\r\n  // Note: Defining these methods externally, because they come in a bunch\r\n  // and this way their names minify.\r\n  // Single scalar\r\n\r\n  function setValueV1f(gl, v) {\r\n    const cache = this.cache;\r\n    if (cache[0] === v) return;\r\n    gl.uniform1f(this.addr, v);\r\n    cache[0] = v;\r\n  } // Single float vector (from flat array or THREE.VectorN)\r\n\r\n  function setValueV2f(gl, v) {\r\n    const cache = this.cache;\r\n\r\n    if (v.x !== undefined) {\r\n      if (cache[0] !== v.x || cache[1] !== v.y) {\r\n        gl.uniform2f(this.addr, v.x, v.y);\r\n        cache[0] = v.x;\r\n        cache[1] = v.y;\r\n      }\r\n    } else {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniform2fv(this.addr, v);\r\n      copyArray(cache, v);\r\n    }\r\n  }\r\n\r\n  function setValueV3f(gl, v) {\r\n    const cache = this.cache;\r\n\r\n    if (v.x !== undefined) {\r\n      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\r\n        gl.uniform3f(this.addr, v.x, v.y, v.z);\r\n        cache[0] = v.x;\r\n        cache[1] = v.y;\r\n        cache[2] = v.z;\r\n      }\r\n    } else if (v.r !== undefined) {\r\n      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\r\n        gl.uniform3f(this.addr, v.r, v.g, v.b);\r\n        cache[0] = v.r;\r\n        cache[1] = v.g;\r\n        cache[2] = v.b;\r\n      }\r\n    } else {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniform3fv(this.addr, v);\r\n      copyArray(cache, v);\r\n    }\r\n  }\r\n\r\n  function setValueV4f(gl, v) {\r\n    const cache = this.cache;\r\n\r\n    if (v.x !== undefined) {\r\n      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\r\n        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\r\n        cache[0] = v.x;\r\n        cache[1] = v.y;\r\n        cache[2] = v.z;\r\n        cache[3] = v.w;\r\n      }\r\n    } else {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniform4fv(this.addr, v);\r\n      copyArray(cache, v);\r\n    }\r\n  } // Single matrix (from flat array or THREE.MatrixN)\r\n\r\n  function setValueM2(gl, v) {\r\n    const cache = this.cache;\r\n    const elements = v.elements;\r\n\r\n    if (elements === undefined) {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniformMatrix2fv(this.addr, false, v);\r\n      copyArray(cache, v);\r\n    } else {\r\n      if (arraysEqual(cache, elements)) return;\r\n      mat2array.set(elements);\r\n      gl.uniformMatrix2fv(this.addr, false, mat2array);\r\n      copyArray(cache, elements);\r\n    }\r\n  }\r\n\r\n  function setValueM3(gl, v) {\r\n    const cache = this.cache;\r\n    const elements = v.elements;\r\n\r\n    if (elements === undefined) {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniformMatrix3fv(this.addr, false, v);\r\n      copyArray(cache, v);\r\n    } else {\r\n      if (arraysEqual(cache, elements)) return;\r\n      mat3array.set(elements);\r\n      gl.uniformMatrix3fv(this.addr, false, mat3array);\r\n      copyArray(cache, elements);\r\n    }\r\n  }\r\n\r\n  function setValueM4(gl, v) {\r\n    const cache = this.cache;\r\n    const elements = v.elements;\r\n\r\n    if (elements === undefined) {\r\n      if (arraysEqual(cache, v)) return;\r\n      gl.uniformMatrix4fv(this.addr, false, v);\r\n      copyArray(cache, v);\r\n    } else {\r\n      if (arraysEqual(cache, elements)) return;\r\n      mat4array.set(elements);\r\n      gl.uniformMatrix4fv(this.addr, false, mat4array);\r\n      copyArray(cache, elements);\r\n    }\r\n  } // Single integer / boolean\r\n\r\n  function setValueV1i(gl, v) {\r\n    const cache = this.cache;\r\n    if (cache[0] === v) return;\r\n    gl.uniform1i(this.addr, v);\r\n    cache[0] = v;\r\n  } // Single integer / boolean vector (from flat array)\r\n\r\n  function setValueV2i(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform2iv(this.addr, v);\r\n    copyArray(cache, v);\r\n  }\r\n\r\n  function setValueV3i(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform3iv(this.addr, v);\r\n    copyArray(cache, v);\r\n  }\r\n\r\n  function setValueV4i(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform4iv(this.addr, v);\r\n    copyArray(cache, v);\r\n  } // Single unsigned integer\r\n\r\n  function setValueV1ui(gl, v) {\r\n    const cache = this.cache;\r\n    if (cache[0] === v) return;\r\n    gl.uniform1ui(this.addr, v);\r\n    cache[0] = v;\r\n  } // Single unsigned integer vector (from flat array)\r\n\r\n  function setValueV2ui(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform2uiv(this.addr, v);\r\n    copyArray(cache, v);\r\n  }\r\n\r\n  function setValueV3ui(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform3uiv(this.addr, v);\r\n    copyArray(cache, v);\r\n  }\r\n\r\n  function setValueV4ui(gl, v) {\r\n    const cache = this.cache;\r\n    if (arraysEqual(cache, v)) return;\r\n    gl.uniform4uiv(this.addr, v);\r\n    copyArray(cache, v);\r\n  } // Single texture (2D / Cube)\r\n\r\n  function setValueT1(gl, v, textures) {\r\n    const cache = this.cache;\r\n    const unit = textures.allocateTextureUnit();\r\n\r\n    if (cache[0] !== unit) {\r\n      gl.uniform1i(this.addr, unit);\r\n      cache[0] = unit;\r\n    }\r\n\r\n    textures.safeSetTexture2D(v || emptyTexture, unit);\r\n  }\r\n\r\n  function setValueT3D1(gl, v, textures) {\r\n    const cache = this.cache;\r\n    const unit = textures.allocateTextureUnit();\r\n\r\n    if (cache[0] !== unit) {\r\n      gl.uniform1i(this.addr, unit);\r\n      cache[0] = unit;\r\n    }\r\n\r\n    textures.setTexture3D(v || emptyTexture3d, unit);\r\n  }\r\n\r\n  function setValueT6(gl, v, textures) {\r\n    const cache = this.cache;\r\n    const unit = textures.allocateTextureUnit();\r\n\r\n    if (cache[0] !== unit) {\r\n      gl.uniform1i(this.addr, unit);\r\n      cache[0] = unit;\r\n    }\r\n\r\n    textures.safeSetTextureCube(v || emptyCubeTexture, unit);\r\n  }\r\n\r\n  function setValueT2DArray1(gl, v, textures) {\r\n    const cache = this.cache;\r\n    const unit = textures.allocateTextureUnit();\r\n\r\n    if (cache[0] !== unit) {\r\n      gl.uniform1i(this.addr, unit);\r\n      cache[0] = unit;\r\n    }\r\n\r\n    textures.setTexture2DArray(v || emptyTexture2dArray, unit);\r\n  } // Helper to pick the right setter for the singular case\r\n\r\n  function getSingularSetter(type) {\r\n    switch (type) {\r\n      case 0x1406:\r\n        return setValueV1f;\r\n      // FLOAT\r\n\r\n      case 0x8b50:\r\n        return setValueV2f;\r\n      // _VEC2\r\n\r\n      case 0x8b51:\r\n        return setValueV3f;\r\n      // _VEC3\r\n\r\n      case 0x8b52:\r\n        return setValueV4f;\r\n      // _VEC4\r\n\r\n      case 0x8b5a:\r\n        return setValueM2;\r\n      // _MAT2\r\n\r\n      case 0x8b5b:\r\n        return setValueM3;\r\n      // _MAT3\r\n\r\n      case 0x8b5c:\r\n        return setValueM4;\r\n      // _MAT4\r\n\r\n      case 0x1404:\r\n      case 0x8b56:\r\n        return setValueV1i;\r\n      // INT, BOOL\r\n\r\n      case 0x8b53:\r\n      case 0x8b57:\r\n        return setValueV2i;\r\n      // _VEC2\r\n\r\n      case 0x8b54:\r\n      case 0x8b58:\r\n        return setValueV3i;\r\n      // _VEC3\r\n\r\n      case 0x8b55:\r\n      case 0x8b59:\r\n        return setValueV4i;\r\n      // _VEC4\r\n\r\n      case 0x1405:\r\n        return setValueV1ui;\r\n      // UINT\r\n\r\n      case 0x8dc6:\r\n        return setValueV2ui;\r\n      // _VEC2\r\n\r\n      case 0x8dc7:\r\n        return setValueV3ui;\r\n      // _VEC3\r\n\r\n      case 0x8dc8:\r\n        return setValueV4ui;\r\n      // _VEC4\r\n\r\n      case 0x8b5e: // SAMPLER_2D\r\n\r\n      case 0x8d66: // SAMPLER_EXTERNAL_OES\r\n\r\n      case 0x8dca: // INT_SAMPLER_2D\r\n\r\n      case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\r\n\r\n      case 0x8b62:\r\n        // SAMPLER_2D_SHADOW\r\n        return setValueT1;\r\n\r\n      case 0x8b5f: // SAMPLER_3D\r\n\r\n      case 0x8dcb: // INT_SAMPLER_3D\r\n\r\n      case 0x8dd3:\r\n        // UNSIGNED_INT_SAMPLER_3D\r\n        return setValueT3D1;\r\n\r\n      case 0x8b60: // SAMPLER_CUBE\r\n\r\n      case 0x8dcc: // INT_SAMPLER_CUBE\r\n\r\n      case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\r\n\r\n      case 0x8dc5:\r\n        // SAMPLER_CUBE_SHADOW\r\n        return setValueT6;\r\n\r\n      case 0x8dc1: // SAMPLER_2D_ARRAY\r\n\r\n      case 0x8dcf: // INT_SAMPLER_2D_ARRAY\r\n\r\n      case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\r\n\r\n      case 0x8dc4:\r\n        // SAMPLER_2D_ARRAY_SHADOW\r\n        return setValueT2DArray1;\r\n    }\r\n  } // Array of scalars\r\n\r\n  function setValueV1fArray(gl, v) {\r\n    gl.uniform1fv(this.addr, v);\r\n  } // Array of vectors (from flat array or array of THREE.VectorN)\r\n\r\n  function setValueV2fArray(gl, v) {\r\n    const data = flatten(v, this.size, 2);\r\n    gl.uniform2fv(this.addr, data);\r\n  }\r\n\r\n  function setValueV3fArray(gl, v) {\r\n    const data = flatten(v, this.size, 3);\r\n    gl.uniform3fv(this.addr, data);\r\n  }\r\n\r\n  function setValueV4fArray(gl, v) {\r\n    const data = flatten(v, this.size, 4);\r\n    gl.uniform4fv(this.addr, data);\r\n  } // Array of matrices (from flat array or array of THREE.MatrixN)\r\n\r\n  function setValueM2Array(gl, v) {\r\n    const data = flatten(v, this.size, 4);\r\n    gl.uniformMatrix2fv(this.addr, false, data);\r\n  }\r\n\r\n  function setValueM3Array(gl, v) {\r\n    const data = flatten(v, this.size, 9);\r\n    gl.uniformMatrix3fv(this.addr, false, data);\r\n  }\r\n\r\n  function setValueM4Array(gl, v) {\r\n    const data = flatten(v, this.size, 16);\r\n    gl.uniformMatrix4fv(this.addr, false, data);\r\n  } // Array of integer / boolean\r\n\r\n  function setValueV1iArray(gl, v) {\r\n    gl.uniform1iv(this.addr, v);\r\n  } // Array of integer / boolean vectors (from flat array)\r\n\r\n  function setValueV2iArray(gl, v) {\r\n    gl.uniform2iv(this.addr, v);\r\n  }\r\n\r\n  function setValueV3iArray(gl, v) {\r\n    gl.uniform3iv(this.addr, v);\r\n  }\r\n\r\n  function setValueV4iArray(gl, v) {\r\n    gl.uniform4iv(this.addr, v);\r\n  } // Array of unsigned integer\r\n\r\n  function setValueV1uiArray(gl, v) {\r\n    gl.uniform1uiv(this.addr, v);\r\n  } // Array of unsigned integer vectors (from flat array)\r\n\r\n  function setValueV2uiArray(gl, v) {\r\n    gl.uniform2uiv(this.addr, v);\r\n  }\r\n\r\n  function setValueV3uiArray(gl, v) {\r\n    gl.uniform3uiv(this.addr, v);\r\n  }\r\n\r\n  function setValueV4uiArray(gl, v) {\r\n    gl.uniform4uiv(this.addr, v);\r\n  } // Array of textures (2D / Cube)\r\n\r\n  function setValueT1Array(gl, v, textures) {\r\n    const n = v.length;\r\n    const units = allocTexUnits(textures, n);\r\n    gl.uniform1iv(this.addr, units);\r\n\r\n    for (let i = 0; i !== n; ++i) {\r\n      textures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\r\n    }\r\n  }\r\n\r\n  function setValueT6Array(gl, v, textures) {\r\n    const n = v.length;\r\n    const units = allocTexUnits(textures, n);\r\n    gl.uniform1iv(this.addr, units);\r\n\r\n    for (let i = 0; i !== n; ++i) {\r\n      textures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\r\n    }\r\n  } // Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n  function getPureArraySetter(type) {\r\n    switch (type) {\r\n      case 0x1406:\r\n        return setValueV1fArray;\r\n      // FLOAT\r\n\r\n      case 0x8b50:\r\n        return setValueV2fArray;\r\n      // _VEC2\r\n\r\n      case 0x8b51:\r\n        return setValueV3fArray;\r\n      // _VEC3\r\n\r\n      case 0x8b52:\r\n        return setValueV4fArray;\r\n      // _VEC4\r\n\r\n      case 0x8b5a:\r\n        return setValueM2Array;\r\n      // _MAT2\r\n\r\n      case 0x8b5b:\r\n        return setValueM3Array;\r\n      // _MAT3\r\n\r\n      case 0x8b5c:\r\n        return setValueM4Array;\r\n      // _MAT4\r\n\r\n      case 0x1404:\r\n      case 0x8b56:\r\n        return setValueV1iArray;\r\n      // INT, BOOL\r\n\r\n      case 0x8b53:\r\n      case 0x8b57:\r\n        return setValueV2iArray;\r\n      // _VEC2\r\n\r\n      case 0x8b54:\r\n      case 0x8b58:\r\n        return setValueV3iArray;\r\n      // _VEC3\r\n\r\n      case 0x8b55:\r\n      case 0x8b59:\r\n        return setValueV4iArray;\r\n      // _VEC4\r\n\r\n      case 0x1405:\r\n        return setValueV1uiArray;\r\n      // UINT\r\n\r\n      case 0x8dc6:\r\n        return setValueV2uiArray;\r\n      // _VEC2\r\n\r\n      case 0x8dc7:\r\n        return setValueV3uiArray;\r\n      // _VEC3\r\n\r\n      case 0x8dc8:\r\n        return setValueV4uiArray;\r\n      // _VEC4\r\n\r\n      case 0x8b5e: // SAMPLER_2D\r\n\r\n      case 0x8d66: // SAMPLER_EXTERNAL_OES\r\n\r\n      case 0x8dca: // INT_SAMPLER_2D\r\n\r\n      case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\r\n\r\n      case 0x8b62:\r\n        // SAMPLER_2D_SHADOW\r\n        return setValueT1Array;\r\n\r\n      case 0x8b60: // SAMPLER_CUBE\r\n\r\n      case 0x8dcc: // INT_SAMPLER_CUBE\r\n\r\n      case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\r\n\r\n      case 0x8dc5:\r\n        // SAMPLER_CUBE_SHADOW\r\n        return setValueT6Array;\r\n    }\r\n  } // --- Uniform Classes ---\r\n\r\n  function SingleUniform(id, activeInfo, addr) {\r\n    this.id = id;\r\n    this.addr = addr;\r\n    this.cache = [];\r\n    this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\r\n  }\r\n\r\n  function PureArrayUniform(id, activeInfo, addr) {\r\n    this.id = id;\r\n    this.addr = addr;\r\n    this.cache = [];\r\n    this.size = activeInfo.size;\r\n    this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\r\n  }\r\n\r\n  PureArrayUniform.prototype.updateCache = function (data) {\r\n    const cache = this.cache;\r\n\r\n    if (data instanceof Float32Array && cache.length !== data.length) {\r\n      this.cache = new Float32Array(data.length);\r\n    }\r\n\r\n    copyArray(cache, data);\r\n  };\r\n\r\n  function StructuredUniform(id) {\r\n    this.id = id;\r\n    this.seq = [];\r\n    this.map = {};\r\n  }\r\n\r\n  StructuredUniform.prototype.setValue = function (gl, value, textures) {\r\n    const seq = this.seq;\r\n\r\n    for (let i = 0, n = seq.length; i !== n; ++i) {\r\n      const u = seq[i];\r\n      u.setValue(gl, value[u.id], textures);\r\n    }\r\n  }; // --- Top-level ---\r\n  // Parser - builds up the property tree from the path strings\r\n\r\n  const RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\r\n  // \t- the identifier (member name or array index)\r\n  //\t- followed by an optional right bracket (found when array index)\r\n  //\t- followed by an optional left bracket or dot (type of subscript)\r\n  //\r\n  // Note: These portions can be read in a non-overlapping fashion and\r\n  // allow straightforward parsing of the hierarchy that WebGL encodes\r\n  // in the uniform names.\r\n\r\n  function addUniform(container, uniformObject) {\r\n    container.seq.push(uniformObject);\r\n    container.map[uniformObject.id] = uniformObject;\r\n  }\r\n\r\n  function parseUniform(activeInfo, addr, container) {\r\n    const path = activeInfo.name,\r\n      pathLength = path.length; // reset RegExp object, because of the early exit of a previous run\r\n\r\n    RePathPart.lastIndex = 0;\r\n\r\n    while (true) {\r\n      const match = RePathPart.exec(path),\r\n        matchEnd = RePathPart.lastIndex;\r\n      let id = match[1];\r\n      const idIsIndex = match[2] === ']',\r\n        subscript = match[3];\r\n      if (idIsIndex) id = id | 0; // convert to integer\r\n\r\n      if (subscript === undefined || (subscript === '[' && matchEnd + 2 === pathLength)) {\r\n        // bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n        addUniform(\r\n          container,\r\n          subscript === undefined\r\n            ? new SingleUniform(id, activeInfo, addr)\r\n            : new PureArrayUniform(id, activeInfo, addr),\r\n        );\r\n        break;\r\n      } else {\r\n        // step into inner node / create it in case it doesn't exist\r\n        const map = container.map;\r\n        let next = map[id];\r\n\r\n        if (next === undefined) {\r\n          next = new StructuredUniform(id);\r\n          addUniform(container, next);\r\n        }\r\n\r\n        container = next;\r\n      }\r\n    }\r\n  } // Root Container\r\n\r\n  function WebGLUniforms(gl, program) {\r\n    this.seq = [];\r\n    this.map = {};\r\n    const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n    for (let i = 0; i < n; ++i) {\r\n      const info = gl.getActiveUniform(program, i),\r\n        addr = gl.getUniformLocation(program, info.name);\r\n      parseUniform(info, addr, this);\r\n    }\r\n  }\r\n\r\n  WebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\r\n    const u = this.map[name];\r\n    if (u !== undefined) u.setValue(gl, value, textures);\r\n  };\r\n\r\n  WebGLUniforms.prototype.setOptional = function (gl, object, name) {\r\n    const v = object[name];\r\n    if (v !== undefined) this.setValue(gl, name, v);\r\n  }; // Static interface\r\n\r\n  WebGLUniforms.upload = function (gl, seq, values, textures) {\r\n    for (let i = 0, n = seq.length; i !== n; ++i) {\r\n      const u = seq[i],\r\n        v = values[u.id];\r\n\r\n      if (v.needsUpdate !== false) {\r\n        // note: always updating when .needsUpdate is undefined\r\n        u.setValue(gl, v.value, textures);\r\n      }\r\n    }\r\n  };\r\n\r\n  WebGLUniforms.seqWithValue = function (seq, values) {\r\n    const r = [];\r\n\r\n    for (let i = 0, n = seq.length; i !== n; ++i) {\r\n      const u = seq[i];\r\n      if (u.id in values) r.push(u);\r\n    }\r\n\r\n    return r;\r\n  };\r\n\r\n  function WebGLShader(gl, type, string) {\r\n    const shader = gl.createShader(type);\r\n    gl.shaderSource(shader, string);\r\n    gl.compileShader(shader);\r\n    return shader;\r\n  }\r\n\r\n  let programIdCount = 0;\r\n\r\n  function addLineNumbers(string) {\r\n    const lines = string.split('\\n');\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      lines[i] = i + 1 + ': ' + lines[i];\r\n    }\r\n\r\n    return lines.join('\\n');\r\n  }\r\n\r\n  function getEncodingComponents(encoding) {\r\n    switch (encoding) {\r\n      case LinearEncoding:\r\n        return ['Linear', '( value )'];\r\n\r\n      case sRGBEncoding:\r\n        return ['sRGB', '( value )'];\r\n\r\n      case RGBEEncoding:\r\n        return ['RGBE', '( value )'];\r\n\r\n      case RGBM7Encoding:\r\n        return ['RGBM', '( value, 7.0 )'];\r\n\r\n      case RGBM16Encoding:\r\n        return ['RGBM', '( value, 16.0 )'];\r\n\r\n      case RGBDEncoding:\r\n        return ['RGBD', '( value, 256.0 )'];\r\n\r\n      case GammaEncoding:\r\n        return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\r\n\r\n      case LogLuvEncoding:\r\n        return ['LogLuv', '( value )'];\r\n\r\n      default:\r\n        console.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\r\n        return ['Linear', '( value )'];\r\n    }\r\n  }\r\n\r\n  function getShaderErrors(gl, shader, type) {\r\n    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    const log = gl.getShaderInfoLog(shader).trim();\r\n    if (status && log === '') return ''; // --enable-privileged-webgl-extension\r\n    // console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n    const source = gl.getShaderSource(shader);\r\n    return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\r\n  }\r\n\r\n  function getTexelDecodingFunction(functionName, encoding) {\r\n    const components = getEncodingComponents(encoding);\r\n    return (\r\n      'vec4 ' +\r\n      functionName +\r\n      '( vec4 value ) { return ' +\r\n      components[0] +\r\n      'ToLinear' +\r\n      components[1] +\r\n      '; }'\r\n    );\r\n  }\r\n\r\n  function getTexelEncodingFunction(functionName, encoding) {\r\n    const components = getEncodingComponents(encoding);\r\n    return (\r\n      'vec4 ' +\r\n      functionName +\r\n      '( vec4 value ) { return LinearTo' +\r\n      components[0] +\r\n      components[1] +\r\n      '; }'\r\n    );\r\n  }\r\n\r\n  function getToneMappingFunction(functionName, toneMapping) {\r\n    let toneMappingName;\r\n\r\n    switch (toneMapping) {\r\n      case LinearToneMapping:\r\n        toneMappingName = 'Linear';\r\n        break;\r\n\r\n      case ReinhardToneMapping:\r\n        toneMappingName = 'Reinhard';\r\n        break;\r\n\r\n      case CineonToneMapping:\r\n        toneMappingName = 'OptimizedCineon';\r\n        break;\r\n\r\n      case ACESFilmicToneMapping:\r\n        toneMappingName = 'ACESFilmic';\r\n        break;\r\n\r\n      case CustomToneMapping:\r\n        toneMappingName = 'Custom';\r\n        break;\r\n\r\n      default:\r\n        console.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\r\n        toneMappingName = 'Linear';\r\n    }\r\n\r\n    return (\r\n      'vec3 ' +\r\n      functionName +\r\n      '( vec3 color ) { return ' +\r\n      toneMappingName +\r\n      'ToneMapping( color ); }'\r\n    );\r\n  }\r\n\r\n  function generateExtensions(parameters) {\r\n    const chunks = [\r\n      parameters.extensionDerivatives ||\r\n      parameters.envMapCubeUV ||\r\n      parameters.bumpMap ||\r\n      parameters.tangentSpaceNormalMap ||\r\n      parameters.clearcoatNormalMap ||\r\n      parameters.flatShading ||\r\n      parameters.shaderID === 'physical'\r\n        ? '#extension GL_OES_standard_derivatives : enable'\r\n        : '',\r\n      (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) &&\r\n      parameters.rendererExtensionFragDepth\r\n        ? '#extension GL_EXT_frag_depth : enable'\r\n        : '',\r\n      parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers\r\n        ? '#extension GL_EXT_draw_buffers : require'\r\n        : '',\r\n      (parameters.extensionShaderTextureLOD ||\r\n        parameters.envMap ||\r\n        parameters.transmission > 0.0) &&\r\n      parameters.rendererExtensionShaderTextureLod\r\n        ? '#extension GL_EXT_shader_texture_lod : enable'\r\n        : '',\r\n    ];\r\n    return chunks.filter(filterEmptyLine).join('\\n');\r\n  }\r\n\r\n  function generateDefines(defines) {\r\n    const chunks = [];\r\n\r\n    for (const name in defines) {\r\n      const value = defines[name];\r\n      if (value === false) continue;\r\n      chunks.push('#define ' + name + ' ' + value);\r\n    }\r\n\r\n    return chunks.join('\\n');\r\n  }\r\n\r\n  function fetchAttributeLocations(gl, program) {\r\n    const attributes = {};\r\n    const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const info = gl.getActiveAttrib(program, i);\r\n      const name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n      attributes[name] = gl.getAttribLocation(program, name);\r\n    }\r\n\r\n    return attributes;\r\n  }\r\n\r\n  function filterEmptyLine(string) {\r\n    return string !== '';\r\n  }\r\n\r\n  function replaceLightNums(string, parameters) {\r\n    return string\r\n      .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)\r\n      .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)\r\n      .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)\r\n      .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)\r\n      .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights)\r\n      .replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows)\r\n      .replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows)\r\n      .replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\r\n  }\r\n\r\n  function replaceClippingPlaneNums(string, parameters) {\r\n    return string\r\n      .replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes)\r\n      .replace(\r\n        /UNION_CLIPPING_PLANES/g,\r\n        parameters.numClippingPlanes - parameters.numClipIntersection,\r\n      );\r\n  } // Resolve Includes\r\n\r\n  const includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\n  function resolveIncludes(string) {\r\n    return string.replace(includePattern, includeReplacer);\r\n  }\r\n\r\n  function includeReplacer(match, include) {\r\n    const string = ShaderChunk[include];\r\n\r\n    if (string === undefined) {\r\n      throw new Error('Can not resolve #include <' + include + '>');\r\n    }\r\n\r\n    return resolveIncludes(string);\r\n  } // Unroll Loops\r\n\r\n  const deprecatedUnrollLoopPattern =\r\n    /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n  const unrollLoopPattern =\r\n    /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\r\n\r\n  function unrollLoops(string) {\r\n    return string\r\n      .replace(unrollLoopPattern, loopReplacer)\r\n      .replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\r\n  }\r\n\r\n  function deprecatedLoopReplacer(match, start, end, snippet) {\r\n    console.warn(\r\n      'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.',\r\n    );\r\n    return loopReplacer(match, start, end, snippet);\r\n  }\r\n\r\n  function loopReplacer(match, start, end, snippet) {\r\n    let string = '';\r\n\r\n    for (let i = parseInt(start); i < parseInt(end); i++) {\r\n      string += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\r\n    }\r\n\r\n    return string;\r\n  } //\r\n\r\n  function generatePrecision(parameters) {\r\n    let precisionstring =\r\n      'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\r\n\r\n    if (parameters.precision === 'highp') {\r\n      precisionstring += '\\n#define HIGH_PRECISION';\r\n    } else if (parameters.precision === 'mediump') {\r\n      precisionstring += '\\n#define MEDIUM_PRECISION';\r\n    } else if (parameters.precision === 'lowp') {\r\n      precisionstring += '\\n#define LOW_PRECISION';\r\n    }\r\n\r\n    return precisionstring;\r\n  }\r\n\r\n  function generateShadowMapTypeDefine(parameters) {\r\n    let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n    if (parameters.shadowMapType === PCFShadowMap) {\r\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n    } else if (parameters.shadowMapType === PCFSoftShadowMap) {\r\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n    } else if (parameters.shadowMapType === VSMShadowMap) {\r\n      shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\r\n    }\r\n\r\n    return shadowMapTypeDefine;\r\n  }\r\n\r\n  function generateEnvMapTypeDefine(parameters) {\r\n    let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\r\n    if (parameters.envMap) {\r\n      switch (parameters.envMapMode) {\r\n        case CubeReflectionMapping:\r\n        case CubeRefractionMapping:\r\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n          break;\r\n\r\n        case CubeUVReflectionMapping:\r\n        case CubeUVRefractionMapping:\r\n          envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n          break;\r\n      }\r\n    }\r\n\r\n    return envMapTypeDefine;\r\n  }\r\n\r\n  function generateEnvMapModeDefine(parameters) {\r\n    let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\r\n    if (parameters.envMap) {\r\n      switch (parameters.envMapMode) {\r\n        case CubeRefractionMapping:\r\n        case CubeUVRefractionMapping:\r\n          envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n          break;\r\n      }\r\n    }\r\n\r\n    return envMapModeDefine;\r\n  }\r\n\r\n  function generateEnvMapBlendingDefine(parameters) {\r\n    let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\r\n\r\n    if (parameters.envMap) {\r\n      switch (parameters.combine) {\r\n        case MultiplyOperation:\r\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n          break;\r\n\r\n        case MixOperation:\r\n          envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n          break;\r\n\r\n        case AddOperation:\r\n          envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n          break;\r\n      }\r\n    }\r\n\r\n    return envMapBlendingDefine;\r\n  }\r\n\r\n  function WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\r\n    const gl = renderer.getContext();\r\n    const defines = parameters.defines;\r\n    let vertexShader = parameters.vertexShader;\r\n    let fragmentShader = parameters.fragmentShader;\r\n    const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\r\n    const envMapTypeDefine = generateEnvMapTypeDefine(parameters);\r\n    const envMapModeDefine = generateEnvMapModeDefine(parameters);\r\n    const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\r\n    const gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\r\n    const customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\r\n    const customDefines = generateDefines(defines);\r\n    const program = gl.createProgram();\r\n    let prefixVertex, prefixFragment;\r\n    let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\r\n\r\n    if (parameters.isRawShaderMaterial) {\r\n      prefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\r\n\r\n      if (prefixVertex.length > 0) {\r\n        prefixVertex += '\\n';\r\n      }\r\n\r\n      prefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\r\n\r\n      if (prefixFragment.length > 0) {\r\n        prefixFragment += '\\n';\r\n      }\r\n    } else {\r\n      prefixVertex = [\r\n        generatePrecision(parameters),\r\n        '#define SHADER_NAME ' + parameters.shaderName,\r\n        customDefines,\r\n        parameters.instancing ? '#define USE_INSTANCING' : '',\r\n        parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\r\n        parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n        '#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n        '#define MAX_BONES ' + parameters.maxBones,\r\n        parameters.useFog && parameters.fog ? '#define USE_FOG' : '',\r\n        parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\r\n        parameters.map ? '#define USE_MAP' : '',\r\n        parameters.envMap ? '#define USE_ENVMAP' : '',\r\n        parameters.envMap ? '#define ' + envMapModeDefine : '',\r\n        parameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n        parameters.aoMap ? '#define USE_AOMAP' : '',\r\n        parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n        parameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n        parameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n        parameters.normalMap && parameters.objectSpaceNormalMap\r\n          ? '#define OBJECTSPACE_NORMALMAP'\r\n          : '',\r\n        parameters.normalMap && parameters.tangentSpaceNormalMap\r\n          ? '#define TANGENTSPACE_NORMALMAP'\r\n          : '',\r\n        parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\r\n        parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\r\n        parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n        parameters.displacementMap && parameters.supportsVertexTextures\r\n          ? '#define USE_DISPLACEMENTMAP'\r\n          : '',\r\n        parameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n        parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n        parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n        parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n        parameters.transmission ? '#define USE_TRANSMISSION' : '',\r\n        parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\r\n        parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\r\n        parameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n        parameters.vertexColors ? '#define USE_COLOR' : '',\r\n        parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\r\n        parameters.vertexUvs ? '#define USE_UV' : '',\r\n        parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n        parameters.flatShading ? '#define FLAT_SHADED' : '',\r\n        parameters.skinning ? '#define USE_SKINNING' : '',\r\n        parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n        parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n        parameters.morphNormals && parameters.flatShading === false\r\n          ? '#define USE_MORPHNORMALS'\r\n          : '',\r\n        parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n        parameters.flipSided ? '#define FLIP_SIDED' : '',\r\n        parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n        parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n        parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n        parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth\r\n          ? '#define USE_LOGDEPTHBUF_EXT'\r\n          : '',\r\n        'uniform mat4 modelMatrix;',\r\n        'uniform mat4 modelViewMatrix;',\r\n        'uniform mat4 projectionMatrix;',\r\n        'uniform mat4 viewMatrix;',\r\n        'uniform mat3 normalMatrix;',\r\n        'uniform vec3 cameraPosition;',\r\n        'uniform bool isOrthographic;',\r\n        '#ifdef USE_INSTANCING',\r\n        '\tattribute mat4 instanceMatrix;',\r\n        '#endif',\r\n        '#ifdef USE_INSTANCING_COLOR',\r\n        '\tattribute vec3 instanceColor;',\r\n        '#endif',\r\n        'attribute vec3 position;',\r\n        'attribute vec3 normal;',\r\n        'attribute vec2 uv;',\r\n        '#ifdef USE_TANGENT',\r\n        '\tattribute vec4 tangent;',\r\n        '#endif',\r\n        '#if defined( USE_COLOR_ALPHA )',\r\n        '\tattribute vec4 color;',\r\n        '#elif defined( USE_COLOR )',\r\n        '\tattribute vec3 color;',\r\n        '#endif',\r\n        '#ifdef USE_MORPHTARGETS',\r\n        '\tattribute vec3 morphTarget0;',\r\n        '\tattribute vec3 morphTarget1;',\r\n        '\tattribute vec3 morphTarget2;',\r\n        '\tattribute vec3 morphTarget3;',\r\n        '\t#ifdef USE_MORPHNORMALS',\r\n        '\t\tattribute vec3 morphNormal0;',\r\n        '\t\tattribute vec3 morphNormal1;',\r\n        '\t\tattribute vec3 morphNormal2;',\r\n        '\t\tattribute vec3 morphNormal3;',\r\n        '\t#else',\r\n        '\t\tattribute vec3 morphTarget4;',\r\n        '\t\tattribute vec3 morphTarget5;',\r\n        '\t\tattribute vec3 morphTarget6;',\r\n        '\t\tattribute vec3 morphTarget7;',\r\n        '\t#endif',\r\n        '#endif',\r\n        '#ifdef USE_SKINNING',\r\n        '\tattribute vec4 skinIndex;',\r\n        '\tattribute vec4 skinWeight;',\r\n        '#endif',\r\n        '\\n',\r\n      ]\r\n        .filter(filterEmptyLine)\r\n        .join('\\n');\r\n      prefixFragment = [\r\n        customExtensions,\r\n        generatePrecision(parameters),\r\n        '#define SHADER_NAME ' + parameters.shaderName,\r\n        customDefines,\r\n        parameters.alphaTest\r\n          ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0')\r\n          : '', // add '.0' if integer\r\n        '#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n        parameters.useFog && parameters.fog ? '#define USE_FOG' : '',\r\n        parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\r\n        parameters.map ? '#define USE_MAP' : '',\r\n        parameters.matcap ? '#define USE_MATCAP' : '',\r\n        parameters.envMap ? '#define USE_ENVMAP' : '',\r\n        parameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n        parameters.envMap ? '#define ' + envMapModeDefine : '',\r\n        parameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n        parameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n        parameters.aoMap ? '#define USE_AOMAP' : '',\r\n        parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n        parameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n        parameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n        parameters.normalMap && parameters.objectSpaceNormalMap\r\n          ? '#define OBJECTSPACE_NORMALMAP'\r\n          : '',\r\n        parameters.normalMap && parameters.tangentSpaceNormalMap\r\n          ? '#define TANGENTSPACE_NORMALMAP'\r\n          : '',\r\n        parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\r\n        parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\r\n        parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n        parameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n        parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n        parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n        parameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n        parameters.sheen ? '#define USE_SHEEN' : '',\r\n        parameters.transmission ? '#define USE_TRANSMISSION' : '',\r\n        parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\r\n        parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\r\n        parameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n        parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\r\n        parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\r\n        parameters.vertexUvs ? '#define USE_UV' : '',\r\n        parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n        parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n        parameters.flatShading ? '#define FLAT_SHADED' : '',\r\n        parameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n        parameters.flipSided ? '#define FLIP_SIDED' : '',\r\n        parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n        parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n        parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n        parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\r\n        parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n        parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth\r\n          ? '#define USE_LOGDEPTHBUF_EXT'\r\n          : '',\r\n        (parameters.extensionShaderTextureLOD || parameters.envMap) &&\r\n        parameters.rendererExtensionShaderTextureLod\r\n          ? '#define TEXTURE_LOD_EXT'\r\n          : '',\r\n        'uniform mat4 viewMatrix;',\r\n        'uniform vec3 cameraPosition;',\r\n        'uniform bool isOrthographic;',\r\n        parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '',\r\n        parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n        parameters.toneMapping !== NoToneMapping\r\n          ? getToneMappingFunction('toneMapping', parameters.toneMapping)\r\n          : '',\r\n        parameters.dithering ? '#define DITHERING' : '',\r\n        ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\r\n        parameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '',\r\n        parameters.matcap\r\n          ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding)\r\n          : '',\r\n        parameters.envMap\r\n          ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding)\r\n          : '',\r\n        parameters.emissiveMap\r\n          ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding)\r\n          : '',\r\n        parameters.lightMap\r\n          ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding)\r\n          : '',\r\n        getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding),\r\n        parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\r\n        '\\n',\r\n      ]\r\n        .filter(filterEmptyLine)\r\n        .join('\\n');\r\n    }\r\n\r\n    vertexShader = resolveIncludes(vertexShader);\r\n    vertexShader = replaceLightNums(vertexShader, parameters);\r\n    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);\r\n    fragmentShader = resolveIncludes(fragmentShader);\r\n    fragmentShader = replaceLightNums(fragmentShader, parameters);\r\n    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\r\n    vertexShader = unrollLoops(vertexShader);\r\n    fragmentShader = unrollLoops(fragmentShader);\r\n\r\n    if (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\r\n      // GLSL 3.0 conversion for built-in materials and ShaderMaterial\r\n      versionString = '#version 300 es\\n';\r\n      prefixVertex =\r\n        ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') +\r\n        '\\n' +\r\n        prefixVertex;\r\n      prefixFragment =\r\n        [\r\n          '#define varying in',\r\n          parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;',\r\n          parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor',\r\n          '#define gl_FragDepthEXT gl_FragDepth',\r\n          '#define texture2D texture',\r\n          '#define textureCube texture',\r\n          '#define texture2DProj textureProj',\r\n          '#define texture2DLodEXT textureLod',\r\n          '#define texture2DProjLodEXT textureProjLod',\r\n          '#define textureCubeLodEXT textureLod',\r\n          '#define texture2DGradEXT textureGrad',\r\n          '#define texture2DProjGradEXT textureProjGrad',\r\n          '#define textureCubeGradEXT textureGrad',\r\n        ].join('\\n') +\r\n        '\\n' +\r\n        prefixFragment;\r\n    }\r\n\r\n    const vertexGlsl = versionString + prefixVertex + vertexShader;\r\n    const fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\r\n    // console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n    const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\r\n    const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\r\n    gl.attachShader(program, glVertexShader);\r\n    gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\r\n\r\n    if (parameters.index0AttributeName !== undefined) {\r\n      gl.bindAttribLocation(program, 0, parameters.index0AttributeName);\r\n    } else if (parameters.morphTargets === true) {\r\n      // programs with morphTargets displace position out of attribute 0\r\n      gl.bindAttribLocation(program, 0, 'position');\r\n    }\r\n\r\n    gl.linkProgram(program); // check for link errors\r\n\r\n    if (renderer.debug.checkShaderErrors) {\r\n      const programLog = gl.getProgramInfoLog(program).trim();\r\n      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\r\n      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\r\n      let runnable = true;\r\n      let haveDiagnostics = true;\r\n\r\n      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\r\n        runnable = false;\r\n        const vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\r\n        const fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\r\n        console.error(\r\n          'THREE.WebGLProgram: shader error: ',\r\n          gl.getError(),\r\n          'gl.VALIDATE_STATUS',\r\n          gl.getProgramParameter(program, gl.VALIDATE_STATUS),\r\n          'gl.getProgramInfoLog',\r\n          programLog,\r\n          vertexErrors,\r\n          fragmentErrors,\r\n        );\r\n      } else if (programLog !== '') {\r\n        console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\r\n      } else if (vertexLog === '' || fragmentLog === '') {\r\n        haveDiagnostics = false;\r\n      }\r\n\r\n      if (haveDiagnostics) {\r\n        this.diagnostics = {\r\n          runnable: runnable,\r\n          programLog: programLog,\r\n          vertexShader: {\r\n            log: vertexLog,\r\n            prefix: prefixVertex,\r\n          },\r\n          fragmentShader: {\r\n            log: fragmentLog,\r\n            prefix: prefixFragment,\r\n          },\r\n        };\r\n      }\r\n    } // Clean up\r\n    // Crashes in iOS9 and iOS10. #18402\r\n    // gl.detachShader( program, glVertexShader );\r\n    // gl.detachShader( program, glFragmentShader );\r\n\r\n    gl.deleteShader(glVertexShader);\r\n    gl.deleteShader(glFragmentShader); // set up caching for uniform locations\r\n\r\n    let cachedUniforms;\r\n\r\n    this.getUniforms = function () {\r\n      if (cachedUniforms === undefined) {\r\n        cachedUniforms = new WebGLUniforms(gl, program);\r\n      }\r\n\r\n      return cachedUniforms;\r\n    }; // set up caching for attribute locations\r\n\r\n    let cachedAttributes;\r\n\r\n    this.getAttributes = function () {\r\n      if (cachedAttributes === undefined) {\r\n        cachedAttributes = fetchAttributeLocations(gl, program);\r\n      }\r\n\r\n      return cachedAttributes;\r\n    }; // free resource\r\n\r\n    this.destroy = function () {\r\n      bindingStates.releaseStatesOfProgram(this);\r\n      gl.deleteProgram(program);\r\n      this.program = undefined;\r\n    }; //\r\n\r\n    this.name = parameters.shaderName;\r\n    this.id = programIdCount++;\r\n    this.cacheKey = cacheKey;\r\n    this.usedTimes = 1;\r\n    this.program = program;\r\n    this.vertexShader = glVertexShader;\r\n    this.fragmentShader = glFragmentShader;\r\n    return this;\r\n  }\r\n\r\n  function WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\r\n    const programs = [];\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n    const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n    const floatVertexTextures = capabilities.floatVertexTextures;\r\n    const maxVertexUniforms = capabilities.maxVertexUniforms;\r\n    const vertexTextures = capabilities.vertexTextures;\r\n    let precision = capabilities.precision;\r\n    const shaderIDs = {\r\n      MeshDepthMaterial: 'depth',\r\n      MeshDistanceMaterial: 'distanceRGBA',\r\n      MeshNormalMaterial: 'normal',\r\n      MeshBasicMaterial: 'basic',\r\n      MeshLambertMaterial: 'lambert',\r\n      MeshPhongMaterial: 'phong',\r\n      MeshToonMaterial: 'toon',\r\n      MeshStandardMaterial: 'physical',\r\n      MeshPhysicalMaterial: 'physical',\r\n      MeshMatcapMaterial: 'matcap',\r\n      LineBasicMaterial: 'basic',\r\n      LineDashedMaterial: 'dashed',\r\n      PointsMaterial: 'points',\r\n      ShadowMaterial: 'shadow',\r\n      SpriteMaterial: 'sprite',\r\n    };\r\n    const parameterNames = [\r\n      'precision',\r\n      'isWebGL2',\r\n      'supportsVertexTextures',\r\n      'outputEncoding',\r\n      'instancing',\r\n      'instancingColor',\r\n      'map',\r\n      'mapEncoding',\r\n      'matcap',\r\n      'matcapEncoding',\r\n      'envMap',\r\n      'envMapMode',\r\n      'envMapEncoding',\r\n      'envMapCubeUV',\r\n      'lightMap',\r\n      'lightMapEncoding',\r\n      'aoMap',\r\n      'emissiveMap',\r\n      'emissiveMapEncoding',\r\n      'bumpMap',\r\n      'normalMap',\r\n      'objectSpaceNormalMap',\r\n      'tangentSpaceNormalMap',\r\n      'clearcoatMap',\r\n      'clearcoatRoughnessMap',\r\n      'clearcoatNormalMap',\r\n      'displacementMap',\r\n      'specularMap',\r\n      'roughnessMap',\r\n      'metalnessMap',\r\n      'gradientMap',\r\n      'alphaMap',\r\n      'combine',\r\n      'vertexColors',\r\n      'vertexAlphas',\r\n      'vertexTangents',\r\n      'vertexUvs',\r\n      'uvsVertexOnly',\r\n      'fog',\r\n      'useFog',\r\n      'fogExp2',\r\n      'flatShading',\r\n      'sizeAttenuation',\r\n      'logarithmicDepthBuffer',\r\n      'skinning',\r\n      'maxBones',\r\n      'useVertexTexture',\r\n      'morphTargets',\r\n      'morphNormals',\r\n      'premultipliedAlpha',\r\n      'numDirLights',\r\n      'numPointLights',\r\n      'numSpotLights',\r\n      'numHemiLights',\r\n      'numRectAreaLights',\r\n      'numDirLightShadows',\r\n      'numPointLightShadows',\r\n      'numSpotLightShadows',\r\n      'shadowMapEnabled',\r\n      'shadowMapType',\r\n      'toneMapping',\r\n      'physicallyCorrectLights',\r\n      'alphaTest',\r\n      'doubleSided',\r\n      'flipSided',\r\n      'numClippingPlanes',\r\n      'numClipIntersection',\r\n      'depthPacking',\r\n      'dithering',\r\n      'sheen',\r\n      'transmission',\r\n      'transmissionMap',\r\n      'thicknessMap',\r\n    ];\r\n\r\n    function getMaxBones(object) {\r\n      const skeleton = object.skeleton;\r\n      const bones = skeleton.bones;\r\n\r\n      if (floatVertexTextures) {\r\n        return 1024;\r\n      } else {\r\n        // default for when object is not specified\r\n        // ( for example when prebuilding shader to be used with multiple objects )\r\n        //\r\n        //\t- leave some extra space for other uniforms\r\n        //\t- limit here is ANGLE's 254 max uniform vectors\r\n        //\t\t(up to 54 should be safe)\r\n        const nVertexUniforms = maxVertexUniforms;\r\n        const nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\r\n        const maxBones = Math.min(nVertexMatrices, bones.length);\r\n\r\n        if (maxBones < bones.length) {\r\n          console.warn(\r\n            'THREE.WebGLRenderer: Skeleton has ' +\r\n              bones.length +\r\n              ' bones. This GPU supports ' +\r\n              maxBones +\r\n              '.',\r\n          );\r\n          return 0;\r\n        }\r\n\r\n        return maxBones;\r\n      }\r\n    }\r\n\r\n    function getTextureEncodingFromMap(map) {\r\n      let encoding;\r\n\r\n      if (map && map.isTexture) {\r\n        encoding = map.encoding;\r\n      } else if (map && map.isWebGLRenderTarget) {\r\n        console.warn(\r\n          \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\",\r\n        );\r\n        encoding = map.texture.encoding;\r\n      } else {\r\n        encoding = LinearEncoding;\r\n      }\r\n\r\n      return encoding;\r\n    }\r\n\r\n    function getParameters(material, lights, shadows, scene, object) {\r\n      const fog = scene.fog;\r\n      const environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n      const envMap = cubemaps.get(material.envMap || environment);\r\n      const shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\r\n      // (not to blow over maxLights budget)\r\n\r\n      const maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\r\n\r\n      if (material.precision !== null) {\r\n        precision = capabilities.getMaxPrecision(material.precision);\r\n\r\n        if (precision !== material.precision) {\r\n          console.warn(\r\n            'THREE.WebGLProgram.getParameters:',\r\n            material.precision,\r\n            'not supported, using',\r\n            precision,\r\n            'instead.',\r\n          );\r\n        }\r\n      }\r\n\r\n      let vertexShader, fragmentShader;\r\n\r\n      if (shaderID) {\r\n        const shader = ShaderLib[shaderID];\r\n        vertexShader = shader.vertexShader;\r\n        fragmentShader = shader.fragmentShader;\r\n      } else {\r\n        vertexShader = material.vertexShader;\r\n        fragmentShader = material.fragmentShader;\r\n      }\r\n\r\n      const currentRenderTarget = renderer.getRenderTarget();\r\n      const parameters = {\r\n        isWebGL2: isWebGL2,\r\n        shaderID: shaderID,\r\n        shaderName: material.type,\r\n        vertexShader: vertexShader,\r\n        fragmentShader: fragmentShader,\r\n        defines: material.defines,\r\n        isRawShaderMaterial: material.isRawShaderMaterial === true,\r\n        glslVersion: material.glslVersion,\r\n        precision: precision,\r\n        instancing: object.isInstancedMesh === true,\r\n        instancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\r\n        supportsVertexTextures: vertexTextures,\r\n        outputEncoding:\r\n          currentRenderTarget !== null\r\n            ? getTextureEncodingFromMap(currentRenderTarget.texture)\r\n            : renderer.outputEncoding,\r\n        map: !!material.map,\r\n        mapEncoding: getTextureEncodingFromMap(material.map),\r\n        matcap: !!material.matcap,\r\n        matcapEncoding: getTextureEncodingFromMap(material.matcap),\r\n        envMap: !!envMap,\r\n        envMapMode: envMap && envMap.mapping,\r\n        envMapEncoding: getTextureEncodingFromMap(envMap),\r\n        envMapCubeUV:\r\n          !!envMap &&\r\n          (envMap.mapping === CubeUVReflectionMapping ||\r\n            envMap.mapping === CubeUVRefractionMapping),\r\n        lightMap: !!material.lightMap,\r\n        lightMapEncoding: getTextureEncodingFromMap(material.lightMap),\r\n        aoMap: !!material.aoMap,\r\n        emissiveMap: !!material.emissiveMap,\r\n        emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\r\n        bumpMap: !!material.bumpMap,\r\n        normalMap: !!material.normalMap,\r\n        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n        tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\r\n        clearcoatMap: !!material.clearcoatMap,\r\n        clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\r\n        clearcoatNormalMap: !!material.clearcoatNormalMap,\r\n        displacementMap: !!material.displacementMap,\r\n        roughnessMap: !!material.roughnessMap,\r\n        metalnessMap: !!material.metalnessMap,\r\n        specularMap: !!material.specularMap,\r\n        alphaMap: !!material.alphaMap,\r\n        gradientMap: !!material.gradientMap,\r\n        sheen: !!material.sheen,\r\n        transmission: !!material.transmission,\r\n        transmissionMap: !!material.transmissionMap,\r\n        thicknessMap: !!material.thicknessMap,\r\n        combine: material.combine,\r\n        vertexTangents: material.normalMap && material.vertexTangents,\r\n        vertexColors: material.vertexColors,\r\n        vertexAlphas:\r\n          material.vertexColors === true &&\r\n          object.geometry &&\r\n          object.geometry.attributes.color &&\r\n          object.geometry.attributes.color.itemSize === 4,\r\n        vertexUvs:\r\n          !!material.map ||\r\n          !!material.bumpMap ||\r\n          !!material.normalMap ||\r\n          !!material.specularMap ||\r\n          !!material.alphaMap ||\r\n          !!material.emissiveMap ||\r\n          !!material.roughnessMap ||\r\n          !!material.metalnessMap ||\r\n          !!material.clearcoatMap ||\r\n          !!material.clearcoatRoughnessMap ||\r\n          !!material.clearcoatNormalMap ||\r\n          !!material.displacementMap ||\r\n          !!material.transmission ||\r\n          !!material.transmissionMap ||\r\n          !!material.thicknessMap,\r\n        uvsVertexOnly:\r\n          !(\r\n            !!material.map ||\r\n            !!material.bumpMap ||\r\n            !!material.normalMap ||\r\n            !!material.specularMap ||\r\n            !!material.alphaMap ||\r\n            !!material.emissiveMap ||\r\n            !!material.roughnessMap ||\r\n            !!material.metalnessMap ||\r\n            !!material.clearcoatNormalMap ||\r\n            !!material.transmission ||\r\n            !!material.transmissionMap ||\r\n            !!material.thicknessMap\r\n          ) && !!material.displacementMap,\r\n        fog: !!fog,\r\n        useFog: material.fog,\r\n        fogExp2: fog && fog.isFogExp2,\r\n        flatShading: !!material.flatShading,\r\n        sizeAttenuation: material.sizeAttenuation,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n        skinning: object.isSkinnedMesh === true && maxBones > 0,\r\n        maxBones: maxBones,\r\n        useVertexTexture: floatVertexTextures,\r\n        morphTargets: material.morphTargets,\r\n        morphNormals: material.morphNormals,\r\n        numDirLights: lights.directional.length,\r\n        numPointLights: lights.point.length,\r\n        numSpotLights: lights.spot.length,\r\n        numRectAreaLights: lights.rectArea.length,\r\n        numHemiLights: lights.hemi.length,\r\n        numDirLightShadows: lights.directionalShadowMap.length,\r\n        numPointLightShadows: lights.pointShadowMap.length,\r\n        numSpotLightShadows: lights.spotShadowMap.length,\r\n        numClippingPlanes: clipping.numPlanes,\r\n        numClipIntersection: clipping.numIntersection,\r\n        dithering: material.dithering,\r\n        shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n        shadowMapType: renderer.shadowMap.type,\r\n        toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\r\n        physicallyCorrectLights: renderer.physicallyCorrectLights,\r\n        premultipliedAlpha: material.premultipliedAlpha,\r\n        alphaTest: material.alphaTest,\r\n        doubleSided: material.side === DoubleSide,\r\n        flipSided: material.side === BackSide,\r\n        depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\r\n        index0AttributeName: material.index0AttributeName,\r\n        extensionDerivatives: material.extensions && material.extensions.derivatives,\r\n        extensionFragDepth: material.extensions && material.extensions.fragDepth,\r\n        extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\r\n        extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\r\n        rendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\r\n        rendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\r\n        rendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\r\n        customProgramCacheKey: material.customProgramCacheKey(),\r\n      };\r\n      return parameters;\r\n    }\r\n\r\n    function getProgramCacheKey(parameters) {\r\n      const array = [];\r\n\r\n      if (parameters.shaderID) {\r\n        array.push(parameters.shaderID);\r\n      } else {\r\n        array.push(parameters.fragmentShader);\r\n        array.push(parameters.vertexShader);\r\n      }\r\n\r\n      if (parameters.defines !== undefined) {\r\n        for (const name in parameters.defines) {\r\n          array.push(name);\r\n          array.push(parameters.defines[name]);\r\n        }\r\n      }\r\n\r\n      if (parameters.isRawShaderMaterial === false) {\r\n        for (let i = 0; i < parameterNames.length; i++) {\r\n          array.push(parameters[parameterNames[i]]);\r\n        }\r\n\r\n        array.push(renderer.outputEncoding);\r\n        array.push(renderer.gammaFactor);\r\n      }\r\n\r\n      array.push(parameters.customProgramCacheKey);\r\n      return array.join();\r\n    }\r\n\r\n    function getUniforms(material) {\r\n      const shaderID = shaderIDs[material.type];\r\n      let uniforms;\r\n\r\n      if (shaderID) {\r\n        const shader = ShaderLib[shaderID];\r\n        uniforms = UniformsUtils.clone(shader.uniforms);\r\n      } else {\r\n        uniforms = material.uniforms;\r\n      }\r\n\r\n      return uniforms;\r\n    }\r\n\r\n    function acquireProgram(parameters, cacheKey) {\r\n      let program; // Check if code has been already compiled\r\n\r\n      for (let p = 0, pl = programs.length; p < pl; p++) {\r\n        const preexistingProgram = programs[p];\r\n\r\n        if (preexistingProgram.cacheKey === cacheKey) {\r\n          program = preexistingProgram;\r\n          ++program.usedTimes;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (program === undefined) {\r\n        program = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\r\n        programs.push(program);\r\n      }\r\n\r\n      return program;\r\n    }\r\n\r\n    function releaseProgram(program) {\r\n      if (--program.usedTimes === 0) {\r\n        // Remove from unordered set\r\n        const i = programs.indexOf(program);\r\n        programs[i] = programs[programs.length - 1];\r\n        programs.pop(); // Free WebGL resources\r\n\r\n        program.destroy();\r\n      }\r\n    }\r\n\r\n    return {\r\n      getParameters: getParameters,\r\n      getProgramCacheKey: getProgramCacheKey,\r\n      getUniforms: getUniforms,\r\n      acquireProgram: acquireProgram,\r\n      releaseProgram: releaseProgram,\r\n      // Exposed for resource monitoring & error feedback via renderer.info:\r\n      programs: programs,\r\n    };\r\n  }\r\n\r\n  function WebGLProperties() {\r\n    let properties = new WeakMap();\r\n\r\n    function get(object) {\r\n      let map = properties.get(object);\r\n\r\n      if (map === undefined) {\r\n        map = {};\r\n        properties.set(object, map);\r\n      }\r\n\r\n      return map;\r\n    }\r\n\r\n    function remove(object) {\r\n      properties.delete(object);\r\n    }\r\n\r\n    function update(object, key, value) {\r\n      properties.get(object)[key] = value;\r\n    }\r\n\r\n    function dispose() {\r\n      properties = new WeakMap();\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      remove: remove,\r\n      update: update,\r\n      dispose: dispose,\r\n    };\r\n  }\r\n\r\n  function painterSortStable(a, b) {\r\n    if (a.groupOrder !== b.groupOrder) {\r\n      return a.groupOrder - b.groupOrder;\r\n    } else if (a.renderOrder !== b.renderOrder) {\r\n      return a.renderOrder - b.renderOrder;\r\n    } else if (a.program !== b.program) {\r\n      return a.program.id - b.program.id;\r\n    } else if (a.material.id !== b.material.id) {\r\n      return a.material.id - b.material.id;\r\n    } else if (a.z !== b.z) {\r\n      return a.z - b.z;\r\n    } else {\r\n      return a.id - b.id;\r\n    }\r\n  }\r\n\r\n  function reversePainterSortStable(a, b) {\r\n    if (a.groupOrder !== b.groupOrder) {\r\n      return a.groupOrder - b.groupOrder;\r\n    } else if (a.renderOrder !== b.renderOrder) {\r\n      return a.renderOrder - b.renderOrder;\r\n    } else if (a.z !== b.z) {\r\n      return b.z - a.z;\r\n    } else {\r\n      return a.id - b.id;\r\n    }\r\n  }\r\n\r\n  function WebGLRenderList(properties) {\r\n    const renderItems = [];\r\n    let renderItemsIndex = 0;\r\n    const opaque = [];\r\n    const transmissive = [];\r\n    const transparent = [];\r\n    const defaultProgram = {\r\n      id: -1,\r\n    };\r\n\r\n    function init() {\r\n      renderItemsIndex = 0;\r\n      opaque.length = 0;\r\n      transmissive.length = 0;\r\n      transparent.length = 0;\r\n    }\r\n\r\n    function getNextRenderItem(object, geometry, material, groupOrder, z, group) {\r\n      let renderItem = renderItems[renderItemsIndex];\r\n      const materialProperties = properties.get(material);\r\n\r\n      if (renderItem === undefined) {\r\n        renderItem = {\r\n          id: object.id,\r\n          object: object,\r\n          geometry: geometry,\r\n          material: material,\r\n          program: materialProperties.program || defaultProgram,\r\n          groupOrder: groupOrder,\r\n          renderOrder: object.renderOrder,\r\n          z: z,\r\n          group: group,\r\n        };\r\n        renderItems[renderItemsIndex] = renderItem;\r\n      } else {\r\n        renderItem.id = object.id;\r\n        renderItem.object = object;\r\n        renderItem.geometry = geometry;\r\n        renderItem.material = material;\r\n        renderItem.program = materialProperties.program || defaultProgram;\r\n        renderItem.groupOrder = groupOrder;\r\n        renderItem.renderOrder = object.renderOrder;\r\n        renderItem.z = z;\r\n        renderItem.group = group;\r\n      }\r\n\r\n      renderItemsIndex++;\r\n      return renderItem;\r\n    }\r\n\r\n    function push(object, geometry, material, groupOrder, z, group) {\r\n      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\r\n\r\n      if (material.transmission > 0.0) {\r\n        transmissive.push(renderItem);\r\n      } else if (material.transparent === true) {\r\n        transparent.push(renderItem);\r\n      } else {\r\n        opaque.push(renderItem);\r\n      }\r\n    }\r\n\r\n    function unshift(object, geometry, material, groupOrder, z, group) {\r\n      const renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\r\n\r\n      if (material.transmission > 0.0) {\r\n        transmissive.unshift(renderItem);\r\n      } else if (material.transparent === true) {\r\n        transparent.unshift(renderItem);\r\n      } else {\r\n        opaque.unshift(renderItem);\r\n      }\r\n    }\r\n\r\n    function sort(customOpaqueSort, customTransparentSort) {\r\n      if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\r\n      if (transmissive.length > 1)\r\n        transmissive.sort(customTransparentSort || reversePainterSortStable);\r\n      if (transparent.length > 1)\r\n        transparent.sort(customTransparentSort || reversePainterSortStable);\r\n    }\r\n\r\n    function finish() {\r\n      // Clear references from inactive renderItems in the list\r\n      for (let i = renderItemsIndex, il = renderItems.length; i < il; i++) {\r\n        const renderItem = renderItems[i];\r\n        if (renderItem.id === null) break;\r\n        renderItem.id = null;\r\n        renderItem.object = null;\r\n        renderItem.geometry = null;\r\n        renderItem.material = null;\r\n        renderItem.program = null;\r\n        renderItem.group = null;\r\n      }\r\n    }\r\n\r\n    return {\r\n      opaque: opaque,\r\n      transmissive: transmissive,\r\n      transparent: transparent,\r\n      init: init,\r\n      push: push,\r\n      unshift: unshift,\r\n      finish: finish,\r\n      sort: sort,\r\n    };\r\n  }\r\n\r\n  function WebGLRenderLists(properties) {\r\n    let lists = new WeakMap();\r\n\r\n    function get(scene, renderCallDepth) {\r\n      let list;\r\n\r\n      if (lists.has(scene) === false) {\r\n        list = new WebGLRenderList(properties);\r\n        lists.set(scene, [list]);\r\n      } else {\r\n        if (renderCallDepth >= lists.get(scene).length) {\r\n          list = new WebGLRenderList(properties);\r\n          lists.get(scene).push(list);\r\n        } else {\r\n          list = lists.get(scene)[renderCallDepth];\r\n        }\r\n      }\r\n\r\n      return list;\r\n    }\r\n\r\n    function dispose() {\r\n      lists = new WeakMap();\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      dispose: dispose,\r\n    };\r\n  }\r\n\r\n  function UniformsCache() {\r\n    const lights = {};\r\n    return {\r\n      get: function (light) {\r\n        if (lights[light.id] !== undefined) {\r\n          return lights[light.id];\r\n        }\r\n\r\n        let uniforms;\r\n\r\n        switch (light.type) {\r\n          case 'DirectionalLight':\r\n            uniforms = {\r\n              direction: new Vector3(),\r\n              color: new Color(),\r\n            };\r\n            break;\r\n\r\n          case 'SpotLight':\r\n            uniforms = {\r\n              position: new Vector3(),\r\n              direction: new Vector3(),\r\n              color: new Color(),\r\n              distance: 0,\r\n              coneCos: 0,\r\n              penumbraCos: 0,\r\n              decay: 0,\r\n            };\r\n            break;\r\n\r\n          case 'PointLight':\r\n            uniforms = {\r\n              position: new Vector3(),\r\n              color: new Color(),\r\n              distance: 0,\r\n              decay: 0,\r\n            };\r\n            break;\r\n\r\n          case 'HemisphereLight':\r\n            uniforms = {\r\n              direction: new Vector3(),\r\n              skyColor: new Color(),\r\n              groundColor: new Color(),\r\n            };\r\n            break;\r\n\r\n          case 'RectAreaLight':\r\n            uniforms = {\r\n              color: new Color(),\r\n              position: new Vector3(),\r\n              halfWidth: new Vector3(),\r\n              halfHeight: new Vector3(),\r\n            };\r\n            break;\r\n        }\r\n\r\n        lights[light.id] = uniforms;\r\n        return uniforms;\r\n      },\r\n    };\r\n  }\r\n\r\n  function ShadowUniformsCache() {\r\n    const lights = {};\r\n    return {\r\n      get: function (light) {\r\n        if (lights[light.id] !== undefined) {\r\n          return lights[light.id];\r\n        }\r\n\r\n        let uniforms;\r\n\r\n        switch (light.type) {\r\n          case 'DirectionalLight':\r\n            uniforms = {\r\n              shadowBias: 0,\r\n              shadowNormalBias: 0,\r\n              shadowRadius: 1,\r\n              shadowMapSize: new Vector2(),\r\n            };\r\n            break;\r\n\r\n          case 'SpotLight':\r\n            uniforms = {\r\n              shadowBias: 0,\r\n              shadowNormalBias: 0,\r\n              shadowRadius: 1,\r\n              shadowMapSize: new Vector2(),\r\n            };\r\n            break;\r\n\r\n          case 'PointLight':\r\n            uniforms = {\r\n              shadowBias: 0,\r\n              shadowNormalBias: 0,\r\n              shadowRadius: 1,\r\n              shadowMapSize: new Vector2(),\r\n              shadowCameraNear: 1,\r\n              shadowCameraFar: 1000,\r\n            };\r\n            break;\r\n          // TODO (abelnation): set RectAreaLight shadow uniforms\r\n        }\r\n\r\n        lights[light.id] = uniforms;\r\n        return uniforms;\r\n      },\r\n    };\r\n  }\r\n\r\n  let nextVersion = 0;\r\n\r\n  function shadowCastingLightsFirst(lightA, lightB) {\r\n    return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\r\n  }\r\n\r\n  function WebGLLights(extensions, capabilities) {\r\n    const cache = new UniformsCache();\r\n    const shadowCache = ShadowUniformsCache();\r\n    const state = {\r\n      version: 0,\r\n      hash: {\r\n        directionalLength: -1,\r\n        pointLength: -1,\r\n        spotLength: -1,\r\n        rectAreaLength: -1,\r\n        hemiLength: -1,\r\n        numDirectionalShadows: -1,\r\n        numPointShadows: -1,\r\n        numSpotShadows: -1,\r\n      },\r\n      ambient: [0, 0, 0],\r\n      probe: [],\r\n      directional: [],\r\n      directionalShadow: [],\r\n      directionalShadowMap: [],\r\n      directionalShadowMatrix: [],\r\n      spot: [],\r\n      spotShadow: [],\r\n      spotShadowMap: [],\r\n      spotShadowMatrix: [],\r\n      rectArea: [],\r\n      rectAreaLTC1: null,\r\n      rectAreaLTC2: null,\r\n      point: [],\r\n      pointShadow: [],\r\n      pointShadowMap: [],\r\n      pointShadowMatrix: [],\r\n      hemi: [],\r\n    };\r\n\r\n    for (let i = 0; i < 9; i++) state.probe.push(new Vector3());\r\n\r\n    const vector3 = new Vector3();\r\n    const matrix4 = new Matrix4();\r\n    const matrix42 = new Matrix4();\r\n\r\n    function setup(lights) {\r\n      let r = 0,\r\n        g = 0,\r\n        b = 0;\r\n\r\n      for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\r\n\r\n      let directionalLength = 0;\r\n      let pointLength = 0;\r\n      let spotLength = 0;\r\n      let rectAreaLength = 0;\r\n      let hemiLength = 0;\r\n      let numDirectionalShadows = 0;\r\n      let numPointShadows = 0;\r\n      let numSpotShadows = 0;\r\n      lights.sort(shadowCastingLightsFirst);\r\n\r\n      for (let i = 0, l = lights.length; i < l; i++) {\r\n        const light = lights[i];\r\n        const color = light.color;\r\n        const intensity = light.intensity;\r\n        const distance = light.distance;\r\n        const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\r\n\r\n        if (light.isAmbientLight) {\r\n          r += color.r * intensity;\r\n          g += color.g * intensity;\r\n          b += color.b * intensity;\r\n        } else if (light.isLightProbe) {\r\n          for (let j = 0; j < 9; j++) {\r\n            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\r\n          }\r\n        } else if (light.isDirectionalLight) {\r\n          const uniforms = cache.get(light);\r\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\r\n\r\n          if (light.castShadow) {\r\n            const shadow = light.shadow;\r\n            const shadowUniforms = shadowCache.get(light);\r\n            shadowUniforms.shadowBias = shadow.bias;\r\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\r\n            shadowUniforms.shadowRadius = shadow.radius;\r\n            shadowUniforms.shadowMapSize = shadow.mapSize;\r\n            state.directionalShadow[directionalLength] = shadowUniforms;\r\n            state.directionalShadowMap[directionalLength] = shadowMap;\r\n            state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\r\n            numDirectionalShadows++;\r\n          }\r\n\r\n          state.directional[directionalLength] = uniforms;\r\n          directionalLength++;\r\n        } else if (light.isSpotLight) {\r\n          const uniforms = cache.get(light);\r\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\r\n          uniforms.color.copy(color).multiplyScalar(intensity);\r\n          uniforms.distance = distance;\r\n          uniforms.coneCos = Math.cos(light.angle);\r\n          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\r\n          uniforms.decay = light.decay;\r\n\r\n          if (light.castShadow) {\r\n            const shadow = light.shadow;\r\n            const shadowUniforms = shadowCache.get(light);\r\n            shadowUniforms.shadowBias = shadow.bias;\r\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\r\n            shadowUniforms.shadowRadius = shadow.radius;\r\n            shadowUniforms.shadowMapSize = shadow.mapSize;\r\n            state.spotShadow[spotLength] = shadowUniforms;\r\n            state.spotShadowMap[spotLength] = shadowMap;\r\n            state.spotShadowMatrix[spotLength] = light.shadow.matrix;\r\n            numSpotShadows++;\r\n          }\r\n\r\n          state.spot[spotLength] = uniforms;\r\n          spotLength++;\r\n        } else if (light.isRectAreaLight) {\r\n          const uniforms = cache.get(light); // (a) intensity is the total visible light emitted\r\n          //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\r\n          // (b) intensity is the brightness of the light\r\n\r\n          uniforms.color.copy(color).multiplyScalar(intensity);\r\n          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\r\n          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\r\n          state.rectArea[rectAreaLength] = uniforms;\r\n          rectAreaLength++;\r\n        } else if (light.isPointLight) {\r\n          const uniforms = cache.get(light);\r\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\r\n          uniforms.distance = light.distance;\r\n          uniforms.decay = light.decay;\r\n\r\n          if (light.castShadow) {\r\n            const shadow = light.shadow;\r\n            const shadowUniforms = shadowCache.get(light);\r\n            shadowUniforms.shadowBias = shadow.bias;\r\n            shadowUniforms.shadowNormalBias = shadow.normalBias;\r\n            shadowUniforms.shadowRadius = shadow.radius;\r\n            shadowUniforms.shadowMapSize = shadow.mapSize;\r\n            shadowUniforms.shadowCameraNear = shadow.camera.near;\r\n            shadowUniforms.shadowCameraFar = shadow.camera.far;\r\n            state.pointShadow[pointLength] = shadowUniforms;\r\n            state.pointShadowMap[pointLength] = shadowMap;\r\n            state.pointShadowMatrix[pointLength] = light.shadow.matrix;\r\n            numPointShadows++;\r\n          }\r\n\r\n          state.point[pointLength] = uniforms;\r\n          pointLength++;\r\n        } else if (light.isHemisphereLight) {\r\n          const uniforms = cache.get(light);\r\n          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\r\n          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\r\n          state.hemi[hemiLength] = uniforms;\r\n          hemiLength++;\r\n        }\r\n      }\r\n\r\n      if (rectAreaLength > 0) {\r\n        if (capabilities.isWebGL2) {\r\n          // WebGL 2\r\n          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\r\n          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\r\n        } else {\r\n          // WebGL 1\r\n          if (extensions.has('OES_texture_float_linear') === true) {\r\n            state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\r\n            state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\r\n          } else if (extensions.has('OES_texture_half_float_linear') === true) {\r\n            state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\r\n            state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\r\n          } else {\r\n            console.error(\r\n              'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.',\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      state.ambient[0] = r;\r\n      state.ambient[1] = g;\r\n      state.ambient[2] = b;\r\n      const hash = state.hash;\r\n\r\n      if (\r\n        hash.directionalLength !== directionalLength ||\r\n        hash.pointLength !== pointLength ||\r\n        hash.spotLength !== spotLength ||\r\n        hash.rectAreaLength !== rectAreaLength ||\r\n        hash.hemiLength !== hemiLength ||\r\n        hash.numDirectionalShadows !== numDirectionalShadows ||\r\n        hash.numPointShadows !== numPointShadows ||\r\n        hash.numSpotShadows !== numSpotShadows\r\n      ) {\r\n        state.directional.length = directionalLength;\r\n        state.spot.length = spotLength;\r\n        state.rectArea.length = rectAreaLength;\r\n        state.point.length = pointLength;\r\n        state.hemi.length = hemiLength;\r\n        state.directionalShadow.length = numDirectionalShadows;\r\n        state.directionalShadowMap.length = numDirectionalShadows;\r\n        state.pointShadow.length = numPointShadows;\r\n        state.pointShadowMap.length = numPointShadows;\r\n        state.spotShadow.length = numSpotShadows;\r\n        state.spotShadowMap.length = numSpotShadows;\r\n        state.directionalShadowMatrix.length = numDirectionalShadows;\r\n        state.pointShadowMatrix.length = numPointShadows;\r\n        state.spotShadowMatrix.length = numSpotShadows;\r\n        hash.directionalLength = directionalLength;\r\n        hash.pointLength = pointLength;\r\n        hash.spotLength = spotLength;\r\n        hash.rectAreaLength = rectAreaLength;\r\n        hash.hemiLength = hemiLength;\r\n        hash.numDirectionalShadows = numDirectionalShadows;\r\n        hash.numPointShadows = numPointShadows;\r\n        hash.numSpotShadows = numSpotShadows;\r\n        state.version = nextVersion++;\r\n      }\r\n    }\r\n\r\n    function setupView(lights, camera) {\r\n      let directionalLength = 0;\r\n      let pointLength = 0;\r\n      let spotLength = 0;\r\n      let rectAreaLength = 0;\r\n      let hemiLength = 0;\r\n      const viewMatrix = camera.matrixWorldInverse;\r\n\r\n      for (let i = 0, l = lights.length; i < l; i++) {\r\n        const light = lights[i];\r\n\r\n        if (light.isDirectionalLight) {\r\n          const uniforms = state.directional[directionalLength];\r\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\r\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\r\n          uniforms.direction.sub(vector3);\r\n          uniforms.direction.transformDirection(viewMatrix);\r\n          directionalLength++;\r\n        } else if (light.isSpotLight) {\r\n          const uniforms = state.spot[spotLength];\r\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\r\n          uniforms.position.applyMatrix4(viewMatrix);\r\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\r\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\r\n          uniforms.direction.sub(vector3);\r\n          uniforms.direction.transformDirection(viewMatrix);\r\n          spotLength++;\r\n        } else if (light.isRectAreaLight) {\r\n          const uniforms = state.rectArea[rectAreaLength];\r\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\r\n          uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\r\n\r\n          matrix42.identity();\r\n          matrix4.copy(light.matrixWorld);\r\n          matrix4.premultiply(viewMatrix);\r\n          matrix42.extractRotation(matrix4);\r\n          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\r\n          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\r\n          uniforms.halfWidth.applyMatrix4(matrix42);\r\n          uniforms.halfHeight.applyMatrix4(matrix42);\r\n          rectAreaLength++;\r\n        } else if (light.isPointLight) {\r\n          const uniforms = state.point[pointLength];\r\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\r\n          uniforms.position.applyMatrix4(viewMatrix);\r\n          pointLength++;\r\n        } else if (light.isHemisphereLight) {\r\n          const uniforms = state.hemi[hemiLength];\r\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\r\n          uniforms.direction.transformDirection(viewMatrix);\r\n          uniforms.direction.normalize();\r\n          hemiLength++;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      setup: setup,\r\n      setupView: setupView,\r\n      state: state,\r\n    };\r\n  }\r\n\r\n  function WebGLRenderState(extensions, capabilities) {\r\n    const lights = new WebGLLights(extensions, capabilities);\r\n    const lightsArray = [];\r\n    const shadowsArray = [];\r\n\r\n    function init() {\r\n      lightsArray.length = 0;\r\n      shadowsArray.length = 0;\r\n    }\r\n\r\n    function pushLight(light) {\r\n      lightsArray.push(light);\r\n    }\r\n\r\n    function pushShadow(shadowLight) {\r\n      shadowsArray.push(shadowLight);\r\n    }\r\n\r\n    function setupLights() {\r\n      lights.setup(lightsArray);\r\n    }\r\n\r\n    function setupLightsView(camera) {\r\n      lights.setupView(lightsArray, camera);\r\n    }\r\n\r\n    const state = {\r\n      lightsArray: lightsArray,\r\n      shadowsArray: shadowsArray,\r\n      lights: lights,\r\n    };\r\n    return {\r\n      init: init,\r\n      state: state,\r\n      setupLights: setupLights,\r\n      setupLightsView: setupLightsView,\r\n      pushLight: pushLight,\r\n      pushShadow: pushShadow,\r\n    };\r\n  }\r\n\r\n  function WebGLRenderStates(extensions, capabilities) {\r\n    let renderStates = new WeakMap();\r\n\r\n    function get(scene, renderCallDepth = 0) {\r\n      let renderState;\r\n\r\n      if (renderStates.has(scene) === false) {\r\n        renderState = new WebGLRenderState(extensions, capabilities);\r\n        renderStates.set(scene, [renderState]);\r\n      } else {\r\n        if (renderCallDepth >= renderStates.get(scene).length) {\r\n          renderState = new WebGLRenderState(extensions, capabilities);\r\n          renderStates.get(scene).push(renderState);\r\n        } else {\r\n          renderState = renderStates.get(scene)[renderCallDepth];\r\n        }\r\n      }\r\n\r\n      return renderState;\r\n    }\r\n\r\n    function dispose() {\r\n      renderStates = new WeakMap();\r\n    }\r\n\r\n    return {\r\n      get: get,\r\n      dispose: dispose,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * parameters = {\r\n   *\r\n   *\topacity: <float>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>\r\n   * }\r\n   */\r\n\r\n  class MeshDepthMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshDepthMaterial';\r\n      this.depthPacking = BasicDepthPacking;\r\n      this.morphTargets = false;\r\n      this.map = null;\r\n      this.alphaMap = null;\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.fog = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.depthPacking = source.depthPacking;\r\n      this.morphTargets = source.morphTargets;\r\n      this.map = source.map;\r\n      this.alphaMap = source.alphaMap;\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\r\n   *\treferencePosition: <float>,\r\n   *\tnearDistance: <float>,\r\n   *\tfarDistance: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>\r\n   *\r\n   * }\r\n   */\r\n\r\n  class MeshDistanceMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshDistanceMaterial';\r\n      this.referencePosition = new Vector3();\r\n      this.nearDistance = 1;\r\n      this.farDistance = 1000;\r\n      this.morphTargets = false;\r\n      this.map = null;\r\n      this.alphaMap = null;\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.fog = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.referencePosition.copy(source.referencePosition);\r\n      this.nearDistance = source.nearDistance;\r\n      this.farDistance = source.farDistance;\r\n      this.morphTargets = source.morphTargets;\r\n      this.map = source.map;\r\n      this.alphaMap = source.alphaMap;\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\r\n\r\n  var vsm_frag =\r\n    'uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}';\r\n\r\n  var vsm_vert = 'void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}';\r\n\r\n  function WebGLShadowMap(_renderer, _objects, _capabilities) {\r\n    let _frustum = new Frustum();\r\n\r\n    const _shadowMapSize = new Vector2(),\r\n      _viewportSize = new Vector2(),\r\n      _viewport = new Vector4(),\r\n      _depthMaterials = [],\r\n      _distanceMaterials = [],\r\n      _materialCache = {},\r\n      _maxTextureSize = _capabilities.maxTextureSize;\r\n\r\n    const shadowSide = {\r\n      0: BackSide,\r\n      1: FrontSide,\r\n      2: DoubleSide,\r\n    };\r\n    const shadowMaterialVertical = new ShaderMaterial({\r\n      defines: {\r\n        SAMPLE_RATE: 2.0 / 8.0,\r\n        HALF_SAMPLE_RATE: 1.0 / 8.0,\r\n      },\r\n      uniforms: {\r\n        shadow_pass: {\r\n          value: null,\r\n        },\r\n        resolution: {\r\n          value: new Vector2(),\r\n        },\r\n        radius: {\r\n          value: 4.0,\r\n        },\r\n      },\r\n      vertexShader: vsm_vert,\r\n      fragmentShader: vsm_frag,\r\n    });\r\n    const shadowMaterialHorizontal = shadowMaterialVertical.clone();\r\n    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\r\n    const fullScreenTri = new BufferGeometry();\r\n    fullScreenTri.setAttribute(\r\n      'position',\r\n      new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3),\r\n    );\r\n    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\r\n    const scope = this;\r\n    this.enabled = false;\r\n    this.autoUpdate = true;\r\n    this.needsUpdate = false;\r\n    this.type = PCFShadowMap;\r\n\r\n    this.render = function (lights, scene, camera) {\r\n      if (scope.enabled === false) return;\r\n      if (scope.autoUpdate === false && scope.needsUpdate === false) return;\r\n      if (lights.length === 0) return;\r\n\r\n      const currentRenderTarget = _renderer.getRenderTarget();\r\n\r\n      const activeCubeFace = _renderer.getActiveCubeFace();\r\n\r\n      const activeMipmapLevel = _renderer.getActiveMipmapLevel();\r\n\r\n      const _state = _renderer.state; // Set GL state for depth map.\r\n\r\n      _state.setBlending(NoBlending);\r\n\r\n      _state.buffers.color.setClear(1, 1, 1, 1);\r\n\r\n      _state.buffers.depth.setTest(true);\r\n\r\n      _state.setScissorTest(false); // render depth map\r\n\r\n      for (let i = 0, il = lights.length; i < il; i++) {\r\n        const light = lights[i];\r\n        const shadow = light.shadow;\r\n\r\n        if (shadow === undefined) {\r\n          console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\r\n          continue;\r\n        }\r\n\r\n        if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\r\n\r\n        _shadowMapSize.copy(shadow.mapSize);\r\n\r\n        const shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n        _shadowMapSize.multiply(shadowFrameExtents);\r\n\r\n        _viewportSize.copy(shadow.mapSize);\r\n\r\n        if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {\r\n          if (_shadowMapSize.x > _maxTextureSize) {\r\n            _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);\r\n            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\r\n            shadow.mapSize.x = _viewportSize.x;\r\n          }\r\n\r\n          if (_shadowMapSize.y > _maxTextureSize) {\r\n            _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);\r\n            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\r\n            shadow.mapSize.y = _viewportSize.y;\r\n          }\r\n        }\r\n\r\n        if (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\r\n          const pars = {\r\n            minFilter: LinearFilter,\r\n            magFilter: LinearFilter,\r\n            format: RGBAFormat,\r\n          };\r\n          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\r\n          shadow.map.texture.name = light.name + '.shadowMap';\r\n          shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\r\n          shadow.camera.updateProjectionMatrix();\r\n        }\r\n\r\n        if (shadow.map === null) {\r\n          const pars = {\r\n            minFilter: NearestFilter,\r\n            magFilter: NearestFilter,\r\n            format: RGBAFormat,\r\n          };\r\n          shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\r\n          shadow.map.texture.name = light.name + '.shadowMap';\r\n          shadow.camera.updateProjectionMatrix();\r\n        }\r\n\r\n        _renderer.setRenderTarget(shadow.map);\r\n\r\n        _renderer.clear();\r\n\r\n        const viewportCount = shadow.getViewportCount();\r\n\r\n        for (let vp = 0; vp < viewportCount; vp++) {\r\n          const viewport = shadow.getViewport(vp);\r\n\r\n          _viewport.set(\r\n            _viewportSize.x * viewport.x,\r\n            _viewportSize.y * viewport.y,\r\n            _viewportSize.x * viewport.z,\r\n            _viewportSize.y * viewport.w,\r\n          );\r\n\r\n          _state.viewport(_viewport);\r\n\r\n          shadow.updateMatrices(light, vp);\r\n          _frustum = shadow.getFrustum();\r\n          renderObject(scene, camera, shadow.camera, light, this.type);\r\n        } // do blur pass for VSM\r\n\r\n        if (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\r\n          VSMPass(shadow, camera);\r\n        }\r\n\r\n        shadow.needsUpdate = false;\r\n      }\r\n\r\n      scope.needsUpdate = false;\r\n\r\n      _renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\r\n    };\r\n\r\n    function VSMPass(shadow, camera) {\r\n      const geometry = _objects.update(fullScreenMesh); // vertical pass\r\n\r\n      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\r\n      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\r\n      shadowMaterialVertical.uniforms.radius.value = shadow.radius;\r\n\r\n      _renderer.setRenderTarget(shadow.mapPass);\r\n\r\n      _renderer.clear();\r\n\r\n      _renderer.renderBufferDirect(\r\n        camera,\r\n        null,\r\n        geometry,\r\n        shadowMaterialVertical,\r\n        fullScreenMesh,\r\n        null,\r\n      ); // horizontal pass\r\n\r\n      shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\r\n      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\r\n      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\r\n\r\n      _renderer.setRenderTarget(shadow.map);\r\n\r\n      _renderer.clear();\r\n\r\n      _renderer.renderBufferDirect(\r\n        camera,\r\n        null,\r\n        geometry,\r\n        shadowMaterialHorizontal,\r\n        fullScreenMesh,\r\n        null,\r\n      );\r\n    }\r\n\r\n    function getDepthMaterialVariant(useMorphing) {\r\n      const index = useMorphing << 0;\r\n      let material = _depthMaterials[index];\r\n\r\n      if (material === undefined) {\r\n        material = new MeshDepthMaterial({\r\n          depthPacking: RGBADepthPacking,\r\n          morphTargets: useMorphing,\r\n        });\r\n        _depthMaterials[index] = material;\r\n      }\r\n\r\n      return material;\r\n    }\r\n\r\n    function getDistanceMaterialVariant(useMorphing) {\r\n      const index = useMorphing << 0;\r\n      let material = _distanceMaterials[index];\r\n\r\n      if (material === undefined) {\r\n        material = new MeshDistanceMaterial({\r\n          morphTargets: useMorphing,\r\n        });\r\n        _distanceMaterials[index] = material;\r\n      }\r\n\r\n      return material;\r\n    }\r\n\r\n    function getDepthMaterial(\r\n      object,\r\n      geometry,\r\n      material,\r\n      light,\r\n      shadowCameraNear,\r\n      shadowCameraFar,\r\n      type,\r\n    ) {\r\n      let result = null;\r\n      let getMaterialVariant = getDepthMaterialVariant;\r\n      let customMaterial = object.customDepthMaterial;\r\n\r\n      if (light.isPointLight === true) {\r\n        getMaterialVariant = getDistanceMaterialVariant;\r\n        customMaterial = object.customDistanceMaterial;\r\n      }\r\n\r\n      if (customMaterial === undefined) {\r\n        let useMorphing = false;\r\n\r\n        if (material.morphTargets === true) {\r\n          useMorphing =\r\n            geometry.morphAttributes &&\r\n            geometry.morphAttributes.position &&\r\n            geometry.morphAttributes.position.length > 0;\r\n        }\r\n\r\n        result = getMaterialVariant(useMorphing);\r\n      } else {\r\n        result = customMaterial;\r\n      }\r\n\r\n      if (\r\n        _renderer.localClippingEnabled &&\r\n        material.clipShadows === true &&\r\n        material.clippingPlanes.length !== 0\r\n      ) {\r\n        // in this case we need a unique material instance reflecting the\r\n        // appropriate state\r\n        const keyA = result.uuid,\r\n          keyB = material.uuid;\r\n        let materialsForVariant = _materialCache[keyA];\r\n\r\n        if (materialsForVariant === undefined) {\r\n          materialsForVariant = {};\r\n          _materialCache[keyA] = materialsForVariant;\r\n        }\r\n\r\n        let cachedMaterial = materialsForVariant[keyB];\r\n\r\n        if (cachedMaterial === undefined) {\r\n          cachedMaterial = result.clone();\r\n          materialsForVariant[keyB] = cachedMaterial;\r\n        }\r\n\r\n        result = cachedMaterial;\r\n      }\r\n\r\n      result.visible = material.visible;\r\n      result.wireframe = material.wireframe;\r\n\r\n      if (type === VSMShadowMap) {\r\n        result.side = material.shadowSide !== null ? material.shadowSide : material.side;\r\n      } else {\r\n        result.side =\r\n          material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\r\n      }\r\n\r\n      result.clipShadows = material.clipShadows;\r\n      result.clippingPlanes = material.clippingPlanes;\r\n      result.clipIntersection = material.clipIntersection;\r\n      result.wireframeLinewidth = material.wireframeLinewidth;\r\n      result.linewidth = material.linewidth;\r\n\r\n      if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\r\n        result.referencePosition.setFromMatrixPosition(light.matrixWorld);\r\n        result.nearDistance = shadowCameraNear;\r\n        result.farDistance = shadowCameraFar;\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function renderObject(object, camera, shadowCamera, light, type) {\r\n      if (object.visible === false) return;\r\n      const visible = object.layers.test(camera.layers);\r\n\r\n      if (visible && (object.isMesh || object.isLine || object.isPoints)) {\r\n        if (\r\n          (object.castShadow || (object.receiveShadow && type === VSMShadowMap)) &&\r\n          (!object.frustumCulled || _frustum.intersectsObject(object))\r\n        ) {\r\n          object.modelViewMatrix.multiplyMatrices(\r\n            shadowCamera.matrixWorldInverse,\r\n            object.matrixWorld,\r\n          );\r\n\r\n          const geometry = _objects.update(object);\r\n\r\n          const material = object.material;\r\n\r\n          if (Array.isArray(material)) {\r\n            const groups = geometry.groups;\r\n\r\n            for (let k = 0, kl = groups.length; k < kl; k++) {\r\n              const group = groups[k];\r\n              const groupMaterial = material[group.materialIndex];\r\n\r\n              if (groupMaterial && groupMaterial.visible) {\r\n                const depthMaterial = getDepthMaterial(\r\n                  object,\r\n                  geometry,\r\n                  groupMaterial,\r\n                  light,\r\n                  shadowCamera.near,\r\n                  shadowCamera.far,\r\n                  type,\r\n                );\r\n\r\n                _renderer.renderBufferDirect(\r\n                  shadowCamera,\r\n                  null,\r\n                  geometry,\r\n                  depthMaterial,\r\n                  object,\r\n                  group,\r\n                );\r\n              }\r\n            }\r\n          } else if (material.visible) {\r\n            const depthMaterial = getDepthMaterial(\r\n              object,\r\n              geometry,\r\n              material,\r\n              light,\r\n              shadowCamera.near,\r\n              shadowCamera.far,\r\n              type,\r\n            );\r\n\r\n            _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\r\n          }\r\n        }\r\n      }\r\n\r\n      const children = object.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        renderObject(children[i], camera, shadowCamera, light, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  function WebGLState(gl, extensions, capabilities) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n\r\n    function ColorBuffer() {\r\n      let locked = false;\r\n      const color = new Vector4();\r\n      let currentColorMask = null;\r\n      const currentColorClear = new Vector4(0, 0, 0, 0);\r\n      return {\r\n        setMask: function (colorMask) {\r\n          if (currentColorMask !== colorMask && !locked) {\r\n            gl.colorMask(colorMask, colorMask, colorMask, colorMask);\r\n            currentColorMask = colorMask;\r\n          }\r\n        },\r\n        setLocked: function (lock) {\r\n          locked = lock;\r\n        },\r\n        setClear: function (r, g, b, a, premultipliedAlpha) {\r\n          if (premultipliedAlpha === true) {\r\n            r *= a;\r\n            g *= a;\r\n            b *= a;\r\n          }\r\n\r\n          color.set(r, g, b, a);\r\n\r\n          if (currentColorClear.equals(color) === false) {\r\n            gl.clearColor(r, g, b, a);\r\n            currentColorClear.copy(color);\r\n          }\r\n        },\r\n        reset: function () {\r\n          locked = false;\r\n          currentColorMask = null;\r\n          currentColorClear.set(-1, 0, 0, 0); // set to invalid state\r\n        },\r\n      };\r\n    }\r\n\r\n    function DepthBuffer() {\r\n      let locked = false;\r\n      let currentDepthMask = null;\r\n      let currentDepthFunc = null;\r\n      let currentDepthClear = null;\r\n      return {\r\n        setTest: function (depthTest) {\r\n          if (depthTest) {\r\n            enable(gl.DEPTH_TEST);\r\n          } else {\r\n            disable(gl.DEPTH_TEST);\r\n          }\r\n        },\r\n        setMask: function (depthMask) {\r\n          if (currentDepthMask !== depthMask && !locked) {\r\n            gl.depthMask(depthMask);\r\n            currentDepthMask = depthMask;\r\n          }\r\n        },\r\n        setFunc: function (depthFunc) {\r\n          if (currentDepthFunc !== depthFunc) {\r\n            if (depthFunc) {\r\n              switch (depthFunc) {\r\n                case NeverDepth:\r\n                  gl.depthFunc(gl.NEVER);\r\n                  break;\r\n\r\n                case AlwaysDepth:\r\n                  gl.depthFunc(gl.ALWAYS);\r\n                  break;\r\n\r\n                case LessDepth:\r\n                  gl.depthFunc(gl.LESS);\r\n                  break;\r\n\r\n                case LessEqualDepth:\r\n                  gl.depthFunc(gl.LEQUAL);\r\n                  break;\r\n\r\n                case EqualDepth:\r\n                  gl.depthFunc(gl.EQUAL);\r\n                  break;\r\n\r\n                case GreaterEqualDepth:\r\n                  gl.depthFunc(gl.GEQUAL);\r\n                  break;\r\n\r\n                case GreaterDepth:\r\n                  gl.depthFunc(gl.GREATER);\r\n                  break;\r\n\r\n                case NotEqualDepth:\r\n                  gl.depthFunc(gl.NOTEQUAL);\r\n                  break;\r\n\r\n                default:\r\n                  gl.depthFunc(gl.LEQUAL);\r\n              }\r\n            } else {\r\n              gl.depthFunc(gl.LEQUAL);\r\n            }\r\n\r\n            currentDepthFunc = depthFunc;\r\n          }\r\n        },\r\n        setLocked: function (lock) {\r\n          locked = lock;\r\n        },\r\n        setClear: function (depth) {\r\n          if (currentDepthClear !== depth) {\r\n            gl.clearDepth(depth);\r\n            currentDepthClear = depth;\r\n          }\r\n        },\r\n        reset: function () {\r\n          locked = false;\r\n          currentDepthMask = null;\r\n          currentDepthFunc = null;\r\n          currentDepthClear = null;\r\n        },\r\n      };\r\n    }\r\n\r\n    function StencilBuffer() {\r\n      let locked = false;\r\n      let currentStencilMask = null;\r\n      let currentStencilFunc = null;\r\n      let currentStencilRef = null;\r\n      let currentStencilFuncMask = null;\r\n      let currentStencilFail = null;\r\n      let currentStencilZFail = null;\r\n      let currentStencilZPass = null;\r\n      let currentStencilClear = null;\r\n      return {\r\n        setTest: function (stencilTest) {\r\n          if (!locked) {\r\n            if (stencilTest) {\r\n              enable(gl.STENCIL_TEST);\r\n            } else {\r\n              disable(gl.STENCIL_TEST);\r\n            }\r\n          }\r\n        },\r\n        setMask: function (stencilMask) {\r\n          if (currentStencilMask !== stencilMask && !locked) {\r\n            gl.stencilMask(stencilMask);\r\n            currentStencilMask = stencilMask;\r\n          }\r\n        },\r\n        setFunc: function (stencilFunc, stencilRef, stencilMask) {\r\n          if (\r\n            currentStencilFunc !== stencilFunc ||\r\n            currentStencilRef !== stencilRef ||\r\n            currentStencilFuncMask !== stencilMask\r\n          ) {\r\n            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\r\n            currentStencilFunc = stencilFunc;\r\n            currentStencilRef = stencilRef;\r\n            currentStencilFuncMask = stencilMask;\r\n          }\r\n        },\r\n        setOp: function (stencilFail, stencilZFail, stencilZPass) {\r\n          if (\r\n            currentStencilFail !== stencilFail ||\r\n            currentStencilZFail !== stencilZFail ||\r\n            currentStencilZPass !== stencilZPass\r\n          ) {\r\n            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\r\n            currentStencilFail = stencilFail;\r\n            currentStencilZFail = stencilZFail;\r\n            currentStencilZPass = stencilZPass;\r\n          }\r\n        },\r\n        setLocked: function (lock) {\r\n          locked = lock;\r\n        },\r\n        setClear: function (stencil) {\r\n          if (currentStencilClear !== stencil) {\r\n            gl.clearStencil(stencil);\r\n            currentStencilClear = stencil;\r\n          }\r\n        },\r\n        reset: function () {\r\n          locked = false;\r\n          currentStencilMask = null;\r\n          currentStencilFunc = null;\r\n          currentStencilRef = null;\r\n          currentStencilFuncMask = null;\r\n          currentStencilFail = null;\r\n          currentStencilZFail = null;\r\n          currentStencilZPass = null;\r\n          currentStencilClear = null;\r\n        },\r\n      };\r\n    } //\r\n\r\n    const colorBuffer = new ColorBuffer();\r\n    const depthBuffer = new DepthBuffer();\r\n    const stencilBuffer = new StencilBuffer();\r\n    let enabledCapabilities = {};\r\n    let xrFramebuffer = null;\r\n    let currentBoundFramebuffers = {};\r\n    let currentProgram = null;\r\n    let currentBlendingEnabled = false;\r\n    let currentBlending = null;\r\n    let currentBlendEquation = null;\r\n    let currentBlendSrc = null;\r\n    let currentBlendDst = null;\r\n    let currentBlendEquationAlpha = null;\r\n    let currentBlendSrcAlpha = null;\r\n    let currentBlendDstAlpha = null;\r\n    let currentPremultipledAlpha = false;\r\n    let currentFlipSided = null;\r\n    let currentCullFace = null;\r\n    let currentLineWidth = null;\r\n    let currentPolygonOffsetFactor = null;\r\n    let currentPolygonOffsetUnits = null;\r\n    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    let lineWidthAvailable = false;\r\n    let version = 0;\r\n    const glVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (glVersion.indexOf('WebGL') !== -1) {\r\n      version = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\r\n      lineWidthAvailable = version >= 1.0;\r\n    } else if (glVersion.indexOf('OpenGL ES') !== -1) {\r\n      version = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\r\n      lineWidthAvailable = version >= 2.0;\r\n    }\r\n\r\n    let currentTextureSlot = null;\r\n    let currentBoundTextures = {};\r\n    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);\r\n    const viewportParam = gl.getParameter(gl.VIEWPORT);\r\n    const currentScissor = new Vector4().fromArray(scissorParam);\r\n    const currentViewport = new Vector4().fromArray(viewportParam);\r\n\r\n    function createTexture(type, target, count) {\r\n      const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\r\n\r\n      const texture = gl.createTexture();\r\n      gl.bindTexture(type, texture);\r\n      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n      for (let i = 0; i < count; i++) {\r\n        gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\r\n      }\r\n\r\n      return texture;\r\n    }\r\n\r\n    const emptyTextures = {};\r\n    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\r\n    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(\r\n      gl.TEXTURE_CUBE_MAP,\r\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X,\r\n      6,\r\n    ); // init\r\n\r\n    colorBuffer.setClear(0, 0, 0, 1);\r\n    depthBuffer.setClear(1);\r\n    stencilBuffer.setClear(0);\r\n    enable(gl.DEPTH_TEST);\r\n    depthBuffer.setFunc(LessEqualDepth);\r\n    setFlipSided(false);\r\n    setCullFace(CullFaceBack);\r\n    enable(gl.CULL_FACE);\r\n    setBlending(NoBlending); //\r\n\r\n    function enable(id) {\r\n      if (enabledCapabilities[id] !== true) {\r\n        gl.enable(id);\r\n        enabledCapabilities[id] = true;\r\n      }\r\n    }\r\n\r\n    function disable(id) {\r\n      if (enabledCapabilities[id] !== false) {\r\n        gl.disable(id);\r\n        enabledCapabilities[id] = false;\r\n      }\r\n    }\r\n\r\n    function bindXRFramebuffer(framebuffer) {\r\n      if (framebuffer !== xrFramebuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        xrFramebuffer = framebuffer;\r\n      }\r\n    }\r\n\r\n    function bindFramebuffer(target, framebuffer) {\r\n      if (framebuffer === null && xrFramebuffer !== null) framebuffer = xrFramebuffer; // use active XR framebuffer if available\r\n\r\n      if (currentBoundFramebuffers[target] !== framebuffer) {\r\n        gl.bindFramebuffer(target, framebuffer);\r\n        currentBoundFramebuffers[target] = framebuffer;\r\n\r\n        if (isWebGL2) {\r\n          // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\r\n          if (target === gl.DRAW_FRAMEBUFFER) {\r\n            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;\r\n          }\r\n\r\n          if (target === gl.FRAMEBUFFER) {\r\n            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    function useProgram(program) {\r\n      if (currentProgram !== program) {\r\n        gl.useProgram(program);\r\n        currentProgram = program;\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    const equationToGL = {\r\n      [AddEquation]: gl.FUNC_ADD,\r\n      [SubtractEquation]: gl.FUNC_SUBTRACT,\r\n      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT,\r\n    };\r\n\r\n    if (isWebGL2) {\r\n      equationToGL[MinEquation] = gl.MIN;\r\n      equationToGL[MaxEquation] = gl.MAX;\r\n    } else {\r\n      const extension = extensions.get('EXT_blend_minmax');\r\n\r\n      if (extension !== null) {\r\n        equationToGL[MinEquation] = extension.MIN_EXT;\r\n        equationToGL[MaxEquation] = extension.MAX_EXT;\r\n      }\r\n    }\r\n\r\n    const factorToGL = {\r\n      [ZeroFactor]: gl.ZERO,\r\n      [OneFactor]: gl.ONE,\r\n      [SrcColorFactor]: gl.SRC_COLOR,\r\n      [SrcAlphaFactor]: gl.SRC_ALPHA,\r\n      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,\r\n      [DstColorFactor]: gl.DST_COLOR,\r\n      [DstAlphaFactor]: gl.DST_ALPHA,\r\n      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,\r\n      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,\r\n      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,\r\n      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,\r\n    };\r\n\r\n    function setBlending(\r\n      blending,\r\n      blendEquation,\r\n      blendSrc,\r\n      blendDst,\r\n      blendEquationAlpha,\r\n      blendSrcAlpha,\r\n      blendDstAlpha,\r\n      premultipliedAlpha,\r\n    ) {\r\n      if (blending === NoBlending) {\r\n        if (currentBlendingEnabled === true) {\r\n          disable(gl.BLEND);\r\n          currentBlendingEnabled = false;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (currentBlendingEnabled === false) {\r\n        enable(gl.BLEND);\r\n        currentBlendingEnabled = true;\r\n      }\r\n\r\n      if (blending !== CustomBlending) {\r\n        if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\r\n          if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            currentBlendEquation = AddEquation;\r\n            currentBlendEquationAlpha = AddEquation;\r\n          }\r\n\r\n          if (premultipliedAlpha) {\r\n            switch (blending) {\r\n              case NormalBlending:\r\n                gl.blendFuncSeparate(\r\n                  gl.ONE,\r\n                  gl.ONE_MINUS_SRC_ALPHA,\r\n                  gl.ONE,\r\n                  gl.ONE_MINUS_SRC_ALPHA,\r\n                );\r\n                break;\r\n\r\n              case AdditiveBlending:\r\n                gl.blendFunc(gl.ONE, gl.ONE);\r\n                break;\r\n\r\n              case SubtractiveBlending:\r\n                gl.blendFuncSeparate(\r\n                  gl.ZERO,\r\n                  gl.ZERO,\r\n                  gl.ONE_MINUS_SRC_COLOR,\r\n                  gl.ONE_MINUS_SRC_ALPHA,\r\n                );\r\n                break;\r\n\r\n              case MultiplyBlending:\r\n                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\r\n                break;\r\n\r\n              default:\r\n                console.error('THREE.WebGLState: Invalid blending: ', blending);\r\n                break;\r\n            }\r\n          } else {\r\n            switch (blending) {\r\n              case NormalBlending:\r\n                gl.blendFuncSeparate(\r\n                  gl.SRC_ALPHA,\r\n                  gl.ONE_MINUS_SRC_ALPHA,\r\n                  gl.ONE,\r\n                  gl.ONE_MINUS_SRC_ALPHA,\r\n                );\r\n                break;\r\n\r\n              case AdditiveBlending:\r\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n                break;\r\n\r\n              case SubtractiveBlending:\r\n                gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\r\n                break;\r\n\r\n              case MultiplyBlending:\r\n                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\r\n                break;\r\n\r\n              default:\r\n                console.error('THREE.WebGLState: Invalid blending: ', blending);\r\n                break;\r\n            }\r\n          }\r\n\r\n          currentBlendSrc = null;\r\n          currentBlendDst = null;\r\n          currentBlendSrcAlpha = null;\r\n          currentBlendDstAlpha = null;\r\n          currentBlending = blending;\r\n          currentPremultipledAlpha = premultipliedAlpha;\r\n        }\r\n\r\n        return;\r\n      } // custom blending\r\n\r\n      blendEquationAlpha = blendEquationAlpha || blendEquation;\r\n      blendSrcAlpha = blendSrcAlpha || blendSrc;\r\n      blendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n      if (\r\n        blendEquation !== currentBlendEquation ||\r\n        blendEquationAlpha !== currentBlendEquationAlpha\r\n      ) {\r\n        gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\r\n        currentBlendEquation = blendEquation;\r\n        currentBlendEquationAlpha = blendEquationAlpha;\r\n      }\r\n\r\n      if (\r\n        blendSrc !== currentBlendSrc ||\r\n        blendDst !== currentBlendDst ||\r\n        blendSrcAlpha !== currentBlendSrcAlpha ||\r\n        blendDstAlpha !== currentBlendDstAlpha\r\n      ) {\r\n        gl.blendFuncSeparate(\r\n          factorToGL[blendSrc],\r\n          factorToGL[blendDst],\r\n          factorToGL[blendSrcAlpha],\r\n          factorToGL[blendDstAlpha],\r\n        );\r\n        currentBlendSrc = blendSrc;\r\n        currentBlendDst = blendDst;\r\n        currentBlendSrcAlpha = blendSrcAlpha;\r\n        currentBlendDstAlpha = blendDstAlpha;\r\n      }\r\n\r\n      currentBlending = blending;\r\n      currentPremultipledAlpha = null;\r\n    }\r\n\r\n    function setMaterial(material, frontFaceCW) {\r\n      material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);\r\n      let flipSided = material.side === BackSide;\r\n      if (frontFaceCW) flipSided = !flipSided;\r\n      setFlipSided(flipSided);\r\n      material.blending === NormalBlending && material.transparent === false\r\n        ? setBlending(NoBlending)\r\n        : setBlending(\r\n            material.blending,\r\n            material.blendEquation,\r\n            material.blendSrc,\r\n            material.blendDst,\r\n            material.blendEquationAlpha,\r\n            material.blendSrcAlpha,\r\n            material.blendDstAlpha,\r\n            material.premultipliedAlpha,\r\n          );\r\n      depthBuffer.setFunc(material.depthFunc);\r\n      depthBuffer.setTest(material.depthTest);\r\n      depthBuffer.setMask(material.depthWrite);\r\n      colorBuffer.setMask(material.colorWrite);\r\n      const stencilWrite = material.stencilWrite;\r\n      stencilBuffer.setTest(stencilWrite);\r\n\r\n      if (stencilWrite) {\r\n        stencilBuffer.setMask(material.stencilWriteMask);\r\n        stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\r\n        stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\r\n      }\r\n\r\n      setPolygonOffset(\r\n        material.polygonOffset,\r\n        material.polygonOffsetFactor,\r\n        material.polygonOffsetUnits,\r\n      );\r\n      material.alphaToCoverage === true\r\n        ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE)\r\n        : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n    } //\r\n\r\n    function setFlipSided(flipSided) {\r\n      if (currentFlipSided !== flipSided) {\r\n        if (flipSided) {\r\n          gl.frontFace(gl.CW);\r\n        } else {\r\n          gl.frontFace(gl.CCW);\r\n        }\r\n\r\n        currentFlipSided = flipSided;\r\n      }\r\n    }\r\n\r\n    function setCullFace(cullFace) {\r\n      if (cullFace !== CullFaceNone) {\r\n        enable(gl.CULL_FACE);\r\n\r\n        if (cullFace !== currentCullFace) {\r\n          if (cullFace === CullFaceBack) {\r\n            gl.cullFace(gl.BACK);\r\n          } else if (cullFace === CullFaceFront) {\r\n            gl.cullFace(gl.FRONT);\r\n          } else {\r\n            gl.cullFace(gl.FRONT_AND_BACK);\r\n          }\r\n        }\r\n      } else {\r\n        disable(gl.CULL_FACE);\r\n      }\r\n\r\n      currentCullFace = cullFace;\r\n    }\r\n\r\n    function setLineWidth(width) {\r\n      if (width !== currentLineWidth) {\r\n        if (lineWidthAvailable) gl.lineWidth(width);\r\n        currentLineWidth = width;\r\n      }\r\n    }\r\n\r\n    function setPolygonOffset(polygonOffset, factor, units) {\r\n      if (polygonOffset) {\r\n        enable(gl.POLYGON_OFFSET_FILL);\r\n\r\n        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\r\n          gl.polygonOffset(factor, units);\r\n          currentPolygonOffsetFactor = factor;\r\n          currentPolygonOffsetUnits = units;\r\n        }\r\n      } else {\r\n        disable(gl.POLYGON_OFFSET_FILL);\r\n      }\r\n    }\r\n\r\n    function setScissorTest(scissorTest) {\r\n      if (scissorTest) {\r\n        enable(gl.SCISSOR_TEST);\r\n      } else {\r\n        disable(gl.SCISSOR_TEST);\r\n      }\r\n    } // texture\r\n\r\n    function activeTexture(webglSlot) {\r\n      if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n      if (currentTextureSlot !== webglSlot) {\r\n        gl.activeTexture(webglSlot);\r\n        currentTextureSlot = webglSlot;\r\n      }\r\n    }\r\n\r\n    function bindTexture(webglType, webglTexture) {\r\n      if (currentTextureSlot === null) {\r\n        activeTexture();\r\n      }\r\n\r\n      let boundTexture = currentBoundTextures[currentTextureSlot];\r\n\r\n      if (boundTexture === undefined) {\r\n        boundTexture = {\r\n          type: undefined,\r\n          texture: undefined,\r\n        };\r\n        currentBoundTextures[currentTextureSlot] = boundTexture;\r\n      }\r\n\r\n      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\r\n        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\r\n        boundTexture.type = webglType;\r\n        boundTexture.texture = webglTexture;\r\n      }\r\n    }\r\n\r\n    function unbindTexture() {\r\n      const boundTexture = currentBoundTextures[currentTextureSlot];\r\n\r\n      if (boundTexture !== undefined && boundTexture.type !== undefined) {\r\n        gl.bindTexture(boundTexture.type, null);\r\n        boundTexture.type = undefined;\r\n        boundTexture.texture = undefined;\r\n      }\r\n    }\r\n\r\n    function compressedTexImage2D() {\r\n      try {\r\n        gl.compressedTexImage2D.apply(gl, arguments);\r\n      } catch (error) {\r\n        console.error('THREE.WebGLState:', error);\r\n      }\r\n    }\r\n\r\n    function texImage2D() {\r\n      try {\r\n        gl.texImage2D.apply(gl, arguments);\r\n      } catch (error) {\r\n        console.error('THREE.WebGLState:', error);\r\n      }\r\n    }\r\n\r\n    function texImage3D() {\r\n      try {\r\n        gl.texImage3D.apply(gl, arguments);\r\n      } catch (error) {\r\n        console.error('THREE.WebGLState:', error);\r\n      }\r\n    } //\r\n\r\n    function scissor(scissor) {\r\n      if (currentScissor.equals(scissor) === false) {\r\n        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\r\n        currentScissor.copy(scissor);\r\n      }\r\n    }\r\n\r\n    function viewport(viewport) {\r\n      if (currentViewport.equals(viewport) === false) {\r\n        gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\r\n        currentViewport.copy(viewport);\r\n      }\r\n    } //\r\n\r\n    function reset() {\r\n      // reset state\r\n      gl.disable(gl.BLEND);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.disable(gl.DEPTH_TEST);\r\n      gl.disable(gl.POLYGON_OFFSET_FILL);\r\n      gl.disable(gl.SCISSOR_TEST);\r\n      gl.disable(gl.STENCIL_TEST);\r\n      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\r\n      gl.blendEquation(gl.FUNC_ADD);\r\n      gl.blendFunc(gl.ONE, gl.ZERO);\r\n      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);\r\n      gl.colorMask(true, true, true, true);\r\n      gl.clearColor(0, 0, 0, 0);\r\n      gl.depthMask(true);\r\n      gl.depthFunc(gl.LESS);\r\n      gl.clearDepth(1);\r\n      gl.stencilMask(0xffffffff);\r\n      gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);\r\n      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\r\n      gl.clearStencil(0);\r\n      gl.cullFace(gl.BACK);\r\n      gl.frontFace(gl.CCW);\r\n      gl.polygonOffset(0, 0);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n      if (isWebGL2 === true) {\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\r\n      }\r\n\r\n      gl.useProgram(null);\r\n      gl.lineWidth(1);\r\n      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\r\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\r\n\r\n      enabledCapabilities = {};\r\n      currentTextureSlot = null;\r\n      currentBoundTextures = {};\r\n      xrFramebuffer = null;\r\n      currentBoundFramebuffers = {};\r\n      currentProgram = null;\r\n      currentBlendingEnabled = false;\r\n      currentBlending = null;\r\n      currentBlendEquation = null;\r\n      currentBlendSrc = null;\r\n      currentBlendDst = null;\r\n      currentBlendEquationAlpha = null;\r\n      currentBlendSrcAlpha = null;\r\n      currentBlendDstAlpha = null;\r\n      currentPremultipledAlpha = false;\r\n      currentFlipSided = null;\r\n      currentCullFace = null;\r\n      currentLineWidth = null;\r\n      currentPolygonOffsetFactor = null;\r\n      currentPolygonOffsetUnits = null;\r\n      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);\r\n      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);\r\n      colorBuffer.reset();\r\n      depthBuffer.reset();\r\n      stencilBuffer.reset();\r\n    }\r\n\r\n    return {\r\n      buffers: {\r\n        color: colorBuffer,\r\n        depth: depthBuffer,\r\n        stencil: stencilBuffer,\r\n      },\r\n      enable: enable,\r\n      disable: disable,\r\n      bindFramebuffer: bindFramebuffer,\r\n      bindXRFramebuffer: bindXRFramebuffer,\r\n      useProgram: useProgram,\r\n      setBlending: setBlending,\r\n      setMaterial: setMaterial,\r\n      setFlipSided: setFlipSided,\r\n      setCullFace: setCullFace,\r\n      setLineWidth: setLineWidth,\r\n      setPolygonOffset: setPolygonOffset,\r\n      setScissorTest: setScissorTest,\r\n      activeTexture: activeTexture,\r\n      bindTexture: bindTexture,\r\n      unbindTexture: unbindTexture,\r\n      compressedTexImage2D: compressedTexImage2D,\r\n      texImage2D: texImage2D,\r\n      texImage3D: texImage3D,\r\n      scissor: scissor,\r\n      viewport: viewport,\r\n      reset: reset,\r\n    };\r\n  }\r\n\r\n  function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n    const maxTextures = capabilities.maxTextures;\r\n    const maxCubemapSize = capabilities.maxCubemapSize;\r\n    const maxTextureSize = capabilities.maxTextureSize;\r\n    const maxSamples = capabilities.maxSamples;\r\n\r\n    const _videoTextures = new WeakMap();\r\n\r\n    let _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n    // also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n    // Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\r\n\r\n    let useOffscreenCanvas = false;\r\n\r\n    try {\r\n      useOffscreenCanvas =\r\n        typeof OffscreenCanvas !== 'undefined' &&\r\n        new OffscreenCanvas(1, 1).getContext('2d') !== null;\r\n    } catch (err) {\r\n      // Ignore any errors\r\n    }\r\n\r\n    function createCanvas(width, height) {\r\n      // Use OffscreenCanvas when available. Specially needed in web workers\r\n      return useOffscreenCanvas\r\n        ? new OffscreenCanvas(width, height)\r\n        : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\r\n    }\r\n\r\n    function resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\r\n      let scale = 1; // handle case if texture exceeds max size\r\n\r\n      if (image.width > maxSize || image.height > maxSize) {\r\n        scale = maxSize / Math.max(image.width, image.height);\r\n      } // only perform resize if necessary\r\n\r\n      if (scale < 1 || needsPowerOfTwo === true) {\r\n        // only perform resize for certain image types\r\n        if (\r\n          (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement) ||\r\n          (typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement) ||\r\n          (typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap)\r\n        ) {\r\n          const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\r\n          const width = floor(scale * image.width);\r\n          const height = floor(scale * image.height);\r\n          if (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\r\n\r\n          const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\r\n          canvas.width = width;\r\n          canvas.height = height;\r\n          const context = canvas.getContext('2d');\r\n          context.drawImage(image, 0, 0, width, height);\r\n          console.warn(\r\n            'THREE.WebGLRenderer: Texture has been resized from (' +\r\n              image.width +\r\n              'x' +\r\n              image.height +\r\n              ') to (' +\r\n              width +\r\n              'x' +\r\n              height +\r\n              ').',\r\n          );\r\n          return canvas;\r\n        } else {\r\n          if ('data' in image) {\r\n            console.warn(\r\n              'THREE.WebGLRenderer: Image in DataTexture is too big (' +\r\n                image.width +\r\n                'x' +\r\n                image.height +\r\n                ').',\r\n            );\r\n          }\r\n\r\n          return image;\r\n        }\r\n      }\r\n\r\n      return image;\r\n    }\r\n\r\n    function isPowerOfTwo$1(image) {\r\n      return isPowerOfTwo(image.width) && isPowerOfTwo(image.height);\r\n    }\r\n\r\n    function textureNeedsPowerOfTwo(texture) {\r\n      if (isWebGL2) return false;\r\n      return (\r\n        texture.wrapS !== ClampToEdgeWrapping ||\r\n        texture.wrapT !== ClampToEdgeWrapping ||\r\n        (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter)\r\n      );\r\n    }\r\n\r\n    function textureNeedsGenerateMipmaps(texture, supportsMips) {\r\n      return (\r\n        texture.generateMipmaps &&\r\n        supportsMips &&\r\n        texture.minFilter !== NearestFilter &&\r\n        texture.minFilter !== LinearFilter\r\n      );\r\n    }\r\n\r\n    function generateMipmap(target, texture, width, height) {\r\n      _gl.generateMipmap(target);\r\n\r\n      const textureProperties = properties.get(texture);\r\n      textureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\r\n    }\r\n\r\n    function getInternalFormat(internalFormatName, glFormat, glType) {\r\n      if (isWebGL2 === false) return glFormat;\r\n\r\n      if (internalFormatName !== null) {\r\n        if (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\r\n        console.warn(\r\n          \"THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '\" +\r\n            internalFormatName +\r\n            \"'\",\r\n        );\r\n      }\r\n\r\n      let internalFormat = glFormat;\r\n\r\n      if (glFormat === _gl.RED) {\r\n        if (glType === _gl.FLOAT) internalFormat = _gl.R32F;\r\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;\r\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;\r\n      }\r\n\r\n      if (glFormat === _gl.RGB) {\r\n        if (glType === _gl.FLOAT) internalFormat = _gl.RGB32F;\r\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGB16F;\r\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGB8;\r\n      }\r\n\r\n      if (glFormat === _gl.RGBA) {\r\n        if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;\r\n        if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;\r\n        if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RGBA8;\r\n      }\r\n\r\n      if (\r\n        internalFormat === _gl.R16F ||\r\n        internalFormat === _gl.R32F ||\r\n        internalFormat === _gl.RGBA16F ||\r\n        internalFormat === _gl.RGBA32F\r\n      ) {\r\n        extensions.get('EXT_color_buffer_float');\r\n      }\r\n\r\n      return internalFormat;\r\n    } // Fallback filters for non-power-of-2 textures\r\n\r\n    function filterFallback(f) {\r\n      if (\r\n        f === NearestFilter ||\r\n        f === NearestMipmapNearestFilter ||\r\n        f === NearestMipmapLinearFilter\r\n      ) {\r\n        return _gl.NEAREST;\r\n      }\r\n\r\n      return _gl.LINEAR;\r\n    } //\r\n\r\n    function onTextureDispose(event) {\r\n      const texture = event.target;\r\n      texture.removeEventListener('dispose', onTextureDispose);\r\n      deallocateTexture(texture);\r\n\r\n      if (texture.isVideoTexture) {\r\n        _videoTextures.delete(texture);\r\n      }\r\n\r\n      info.memory.textures--;\r\n    }\r\n\r\n    function onRenderTargetDispose(event) {\r\n      const renderTarget = event.target;\r\n      renderTarget.removeEventListener('dispose', onRenderTargetDispose);\r\n      deallocateRenderTarget(renderTarget);\r\n    } //\r\n\r\n    function deallocateTexture(texture) {\r\n      const textureProperties = properties.get(texture);\r\n      if (textureProperties.__webglInit === undefined) return;\r\n\r\n      _gl.deleteTexture(textureProperties.__webglTexture);\r\n\r\n      properties.remove(texture);\r\n    }\r\n\r\n    function deallocateRenderTarget(renderTarget) {\r\n      const texture = renderTarget.texture;\r\n      const renderTargetProperties = properties.get(renderTarget);\r\n      const textureProperties = properties.get(texture);\r\n      if (!renderTarget) return;\r\n\r\n      if (textureProperties.__webglTexture !== undefined) {\r\n        _gl.deleteTexture(textureProperties.__webglTexture);\r\n\r\n        info.memory.textures--;\r\n      }\r\n\r\n      if (renderTarget.depthTexture) {\r\n        renderTarget.depthTexture.dispose();\r\n      }\r\n\r\n      if (renderTarget.isWebGLCubeRenderTarget) {\r\n        for (let i = 0; i < 6; i++) {\r\n          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\r\n\r\n          if (renderTargetProperties.__webglDepthbuffer)\r\n            _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\r\n        }\r\n      } else {\r\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\r\n\r\n        if (renderTargetProperties.__webglDepthbuffer)\r\n          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\r\n        if (renderTargetProperties.__webglMultisampledFramebuffer)\r\n          _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\r\n        if (renderTargetProperties.__webglColorRenderbuffer)\r\n          _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\r\n        if (renderTargetProperties.__webglDepthRenderbuffer)\r\n          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\r\n      }\r\n\r\n      if (renderTarget.isWebGLMultipleRenderTargets) {\r\n        for (let i = 0, il = texture.length; i < il; i++) {\r\n          const attachmentProperties = properties.get(texture[i]);\r\n\r\n          if (attachmentProperties.__webglTexture) {\r\n            _gl.deleteTexture(attachmentProperties.__webglTexture);\r\n\r\n            info.memory.textures--;\r\n          }\r\n\r\n          properties.remove(texture[i]);\r\n        }\r\n      }\r\n\r\n      properties.remove(texture);\r\n      properties.remove(renderTarget);\r\n    } //\r\n\r\n    let textureUnits = 0;\r\n\r\n    function resetTextureUnits() {\r\n      textureUnits = 0;\r\n    }\r\n\r\n    function allocateTextureUnit() {\r\n      const textureUnit = textureUnits;\r\n\r\n      if (textureUnit >= maxTextures) {\r\n        console.warn(\r\n          'THREE.WebGLTextures: Trying to use ' +\r\n            textureUnit +\r\n            ' texture units while this GPU supports only ' +\r\n            maxTextures,\r\n        );\r\n      }\r\n\r\n      textureUnits += 1;\r\n      return textureUnit;\r\n    } //\r\n\r\n    function setTexture2D(texture, slot) {\r\n      const textureProperties = properties.get(texture);\r\n      if (texture.isVideoTexture) updateVideoTexture(texture);\r\n\r\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\r\n        const image = texture.image;\r\n\r\n        if (image === undefined) {\r\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\r\n        } else if (image.complete === false) {\r\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\r\n        } else {\r\n          uploadTexture(textureProperties, texture, slot);\r\n          return;\r\n        }\r\n      }\r\n\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\r\n    }\r\n\r\n    function setTexture2DArray(texture, slot) {\r\n      const textureProperties = properties.get(texture);\r\n\r\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\r\n        uploadTexture(textureProperties, texture, slot);\r\n        return;\r\n      }\r\n\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture);\r\n    }\r\n\r\n    function setTexture3D(texture, slot) {\r\n      const textureProperties = properties.get(texture);\r\n\r\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\r\n        uploadTexture(textureProperties, texture, slot);\r\n        return;\r\n      }\r\n\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture);\r\n    }\r\n\r\n    function setTextureCube(texture, slot) {\r\n      const textureProperties = properties.get(texture);\r\n\r\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\r\n        uploadCubeTexture(textureProperties, texture, slot);\r\n        return;\r\n      }\r\n\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\r\n    }\r\n\r\n    const wrappingToGL = {\r\n      [RepeatWrapping]: _gl.REPEAT,\r\n      [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,\r\n      [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT,\r\n    };\r\n    const filterToGL = {\r\n      [NearestFilter]: _gl.NEAREST,\r\n      [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,\r\n      [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,\r\n      [LinearFilter]: _gl.LINEAR,\r\n      [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,\r\n      [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR,\r\n    };\r\n\r\n    function setTextureParameters(textureType, texture, supportsMips) {\r\n      if (supportsMips) {\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[texture.wrapS]);\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[texture.wrapT]);\r\n\r\n        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\r\n          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[texture.wrapR]);\r\n        }\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[texture.magFilter]);\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[texture.minFilter]);\r\n      } else {\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\r\n\r\n        if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {\r\n          _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE);\r\n        }\r\n\r\n        if (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\r\n          console.warn(\r\n            'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.',\r\n          );\r\n        }\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\r\n\r\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\r\n\r\n        if (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\r\n          console.warn(\r\n            'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.',\r\n          );\r\n        }\r\n      }\r\n\r\n      if (extensions.has('EXT_texture_filter_anisotropic') === true) {\r\n        const extension = extensions.get('EXT_texture_filter_anisotropic');\r\n        if (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false)\r\n          return; // verify extension for WebGL 1 and WebGL 2\r\n\r\n        if (\r\n          isWebGL2 === false &&\r\n          texture.type === HalfFloatType &&\r\n          extensions.has('OES_texture_half_float_linear') === false\r\n        )\r\n          return; // verify extension for WebGL 1 only\r\n\r\n        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\r\n          _gl.texParameterf(\r\n            textureType,\r\n            extension.TEXTURE_MAX_ANISOTROPY_EXT,\r\n            Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()),\r\n          );\r\n\r\n          properties.get(texture).__currentAnisotropy = texture.anisotropy;\r\n        }\r\n      }\r\n    }\r\n\r\n    function initTexture(textureProperties, texture) {\r\n      if (textureProperties.__webglInit === undefined) {\r\n        textureProperties.__webglInit = true;\r\n        texture.addEventListener('dispose', onTextureDispose);\r\n        textureProperties.__webglTexture = _gl.createTexture();\r\n        info.memory.textures++;\r\n      }\r\n    }\r\n\r\n    function uploadTexture(textureProperties, texture, slot) {\r\n      let textureType = _gl.TEXTURE_2D;\r\n      if (texture.isDataTexture2DArray) textureType = _gl.TEXTURE_2D_ARRAY;\r\n      if (texture.isDataTexture3D) textureType = _gl.TEXTURE_3D;\r\n      initTexture(textureProperties, texture);\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(textureType, textureProperties.__webglTexture);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\r\n\r\n      const needsPowerOfTwo =\r\n        textureNeedsPowerOfTwo(texture) && isPowerOfTwo$1(texture.image) === false;\r\n      const image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\r\n      const supportsMips = isPowerOfTwo$1(image) || isWebGL2,\r\n        glFormat = utils.convert(texture.format);\r\n      let glType = utils.convert(texture.type),\r\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\r\n      setTextureParameters(textureType, texture, supportsMips);\r\n      let mipmap;\r\n      const mipmaps = texture.mipmaps;\r\n\r\n      if (texture.isDepthTexture) {\r\n        // populate depth texture with dummy data\r\n        glInternalFormat = _gl.DEPTH_COMPONENT;\r\n\r\n        if (isWebGL2) {\r\n          if (texture.type === FloatType) {\r\n            glInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n          } else if (texture.type === UnsignedIntType) {\r\n            glInternalFormat = _gl.DEPTH_COMPONENT24;\r\n          } else if (texture.type === UnsignedInt248Type) {\r\n            glInternalFormat = _gl.DEPTH24_STENCIL8;\r\n          } else {\r\n            glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\r\n          }\r\n        } else {\r\n          if (texture.type === FloatType) {\r\n            console.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\r\n          }\r\n        } // validation checks for WebGL 1\r\n\r\n        if (texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\r\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n          if (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\r\n            console.warn(\r\n              'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.',\r\n            );\r\n            texture.type = UnsignedShortType;\r\n            glType = utils.convert(texture.type);\r\n          }\r\n        }\r\n\r\n        if (texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT) {\r\n          // Depth stencil textures need the DEPTH_STENCIL internal format\r\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n          glInternalFormat = _gl.DEPTH_STENCIL; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\r\n          if (texture.type !== UnsignedInt248Type) {\r\n            console.warn(\r\n              'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.',\r\n            );\r\n            texture.type = UnsignedInt248Type;\r\n            glType = utils.convert(texture.type);\r\n          }\r\n        } //\r\n\r\n        state.texImage2D(\r\n          _gl.TEXTURE_2D,\r\n          0,\r\n          glInternalFormat,\r\n          image.width,\r\n          image.height,\r\n          0,\r\n          glFormat,\r\n          glType,\r\n          null,\r\n        );\r\n      } else if (texture.isDataTexture) {\r\n        // use manually created mipmaps if available\r\n        // if there are no manual mipmaps\r\n        // set 0 level mipmap and then use GL to generate other mipmap levels\r\n        if (mipmaps.length > 0 && supportsMips) {\r\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\r\n            mipmap = mipmaps[i];\r\n            state.texImage2D(\r\n              _gl.TEXTURE_2D,\r\n              i,\r\n              glInternalFormat,\r\n              mipmap.width,\r\n              mipmap.height,\r\n              0,\r\n              glFormat,\r\n              glType,\r\n              mipmap.data,\r\n            );\r\n          }\r\n\r\n          texture.generateMipmaps = false;\r\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\r\n        } else {\r\n          state.texImage2D(\r\n            _gl.TEXTURE_2D,\r\n            0,\r\n            glInternalFormat,\r\n            image.width,\r\n            image.height,\r\n            0,\r\n            glFormat,\r\n            glType,\r\n            image.data,\r\n          );\r\n          textureProperties.__maxMipLevel = 0;\r\n        }\r\n      } else if (texture.isCompressedTexture) {\r\n        for (let i = 0, il = mipmaps.length; i < il; i++) {\r\n          mipmap = mipmaps[i];\r\n\r\n          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\r\n            if (glFormat !== null) {\r\n              state.compressedTexImage2D(\r\n                _gl.TEXTURE_2D,\r\n                i,\r\n                glInternalFormat,\r\n                mipmap.width,\r\n                mipmap.height,\r\n                0,\r\n                mipmap.data,\r\n              );\r\n            } else {\r\n              console.warn(\r\n                'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()',\r\n              );\r\n            }\r\n          } else {\r\n            state.texImage2D(\r\n              _gl.TEXTURE_2D,\r\n              i,\r\n              glInternalFormat,\r\n              mipmap.width,\r\n              mipmap.height,\r\n              0,\r\n              glFormat,\r\n              glType,\r\n              mipmap.data,\r\n            );\r\n          }\r\n        }\r\n\r\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\r\n      } else if (texture.isDataTexture2DArray) {\r\n        state.texImage3D(\r\n          _gl.TEXTURE_2D_ARRAY,\r\n          0,\r\n          glInternalFormat,\r\n          image.width,\r\n          image.height,\r\n          image.depth,\r\n          0,\r\n          glFormat,\r\n          glType,\r\n          image.data,\r\n        );\r\n        textureProperties.__maxMipLevel = 0;\r\n      } else if (texture.isDataTexture3D) {\r\n        state.texImage3D(\r\n          _gl.TEXTURE_3D,\r\n          0,\r\n          glInternalFormat,\r\n          image.width,\r\n          image.height,\r\n          image.depth,\r\n          0,\r\n          glFormat,\r\n          glType,\r\n          image.data,\r\n        );\r\n        textureProperties.__maxMipLevel = 0;\r\n      } else {\r\n        // regular Texture (image, video, canvas)\r\n        // use manually created mipmaps if available\r\n        // if there are no manual mipmaps\r\n        // set 0 level mipmap and then use GL to generate other mipmap levels\r\n        if (mipmaps.length > 0 && supportsMips) {\r\n          for (let i = 0, il = mipmaps.length; i < il; i++) {\r\n            mipmap = mipmaps[i];\r\n            state.texImage2D(_gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap);\r\n          }\r\n\r\n          texture.generateMipmaps = false;\r\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\r\n        } else {\r\n          state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);\r\n          textureProperties.__maxMipLevel = 0;\r\n        }\r\n      }\r\n\r\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\r\n        generateMipmap(textureType, texture, image.width, image.height);\r\n      }\r\n\r\n      textureProperties.__version = texture.version;\r\n      if (texture.onUpdate) texture.onUpdate(texture);\r\n    }\r\n\r\n    function uploadCubeTexture(textureProperties, texture, slot) {\r\n      if (texture.image.length !== 6) return;\r\n      initTexture(textureProperties, texture);\r\n      state.activeTexture(_gl.TEXTURE0 + slot);\r\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE);\r\n\r\n      const isCompressed =\r\n        texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\r\n      const isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\r\n      const cubeImage = [];\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        if (!isCompressed && !isDataTexture) {\r\n          cubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\r\n        } else {\r\n          cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\r\n        }\r\n      }\r\n\r\n      const image = cubeImage[0],\r\n        supportsMips = isPowerOfTwo$1(image) || isWebGL2,\r\n        glFormat = utils.convert(texture.format),\r\n        glType = utils.convert(texture.type),\r\n        glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\r\n      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\r\n      let mipmaps;\r\n\r\n      if (isCompressed) {\r\n        for (let i = 0; i < 6; i++) {\r\n          mipmaps = cubeImage[i].mipmaps;\r\n\r\n          for (let j = 0; j < mipmaps.length; j++) {\r\n            const mipmap = mipmaps[j];\r\n\r\n            if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\r\n              if (glFormat !== null) {\r\n                state.compressedTexImage2D(\r\n                  _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                  j,\r\n                  glInternalFormat,\r\n                  mipmap.width,\r\n                  mipmap.height,\r\n                  0,\r\n                  mipmap.data,\r\n                );\r\n              } else {\r\n                console.warn(\r\n                  'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()',\r\n                );\r\n              }\r\n            } else {\r\n              state.texImage2D(\r\n                _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                j,\r\n                glInternalFormat,\r\n                mipmap.width,\r\n                mipmap.height,\r\n                0,\r\n                glFormat,\r\n                glType,\r\n                mipmap.data,\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\r\n      } else {\r\n        mipmaps = texture.mipmaps;\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n          if (isDataTexture) {\r\n            state.texImage2D(\r\n              _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n              0,\r\n              glInternalFormat,\r\n              cubeImage[i].width,\r\n              cubeImage[i].height,\r\n              0,\r\n              glFormat,\r\n              glType,\r\n              cubeImage[i].data,\r\n            );\r\n\r\n            for (let j = 0; j < mipmaps.length; j++) {\r\n              const mipmap = mipmaps[j];\r\n              const mipmapImage = mipmap.image[i].image;\r\n              state.texImage2D(\r\n                _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                j + 1,\r\n                glInternalFormat,\r\n                mipmapImage.width,\r\n                mipmapImage.height,\r\n                0,\r\n                glFormat,\r\n                glType,\r\n                mipmapImage.data,\r\n              );\r\n            }\r\n          } else {\r\n            state.texImage2D(\r\n              _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n              0,\r\n              glInternalFormat,\r\n              glFormat,\r\n              glType,\r\n              cubeImage[i],\r\n            );\r\n\r\n            for (let j = 0; j < mipmaps.length; j++) {\r\n              const mipmap = mipmaps[j];\r\n              state.texImage2D(\r\n                _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n                j + 1,\r\n                glInternalFormat,\r\n                glFormat,\r\n                glType,\r\n                mipmap.image[i],\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        textureProperties.__maxMipLevel = mipmaps.length;\r\n      }\r\n\r\n      if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\r\n        // We assume images for cube map have the same size.\r\n        generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, image.width, image.height);\r\n      }\r\n\r\n      textureProperties.__version = texture.version;\r\n      if (texture.onUpdate) texture.onUpdate(texture);\r\n    } // Render targets\r\n    // Setup storage for target texture and bind it to correct framebuffer\r\n\r\n    function setupFrameBufferTexture(\r\n      framebuffer,\r\n      renderTarget,\r\n      texture,\r\n      attachment,\r\n      textureTarget,\r\n    ) {\r\n      const glFormat = utils.convert(texture.format);\r\n      const glType = utils.convert(texture.type);\r\n      const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\r\n\r\n      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {\r\n        state.texImage3D(\r\n          textureTarget,\r\n          0,\r\n          glInternalFormat,\r\n          renderTarget.width,\r\n          renderTarget.height,\r\n          renderTarget.depth,\r\n          0,\r\n          glFormat,\r\n          glType,\r\n          null,\r\n        );\r\n      } else {\r\n        state.texImage2D(\r\n          textureTarget,\r\n          0,\r\n          glInternalFormat,\r\n          renderTarget.width,\r\n          renderTarget.height,\r\n          0,\r\n          glFormat,\r\n          glType,\r\n          null,\r\n        );\r\n      }\r\n\r\n      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\r\n\r\n      _gl.framebufferTexture2D(\r\n        _gl.FRAMEBUFFER,\r\n        attachment,\r\n        textureTarget,\r\n        properties.get(texture).__webglTexture,\r\n        0,\r\n      );\r\n\r\n      state.bindFramebuffer(_gl.FRAMEBUFFER, null);\r\n    } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\r\n    function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\r\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\r\n\r\n      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\r\n        let glInternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n        if (isMultisample) {\r\n          const depthTexture = renderTarget.depthTexture;\r\n\r\n          if (depthTexture && depthTexture.isDepthTexture) {\r\n            if (depthTexture.type === FloatType) {\r\n              glInternalFormat = _gl.DEPTH_COMPONENT32F;\r\n            } else if (depthTexture.type === UnsignedIntType) {\r\n              glInternalFormat = _gl.DEPTH_COMPONENT24;\r\n            }\r\n          }\r\n\r\n          const samples = getRenderTargetSamples(renderTarget);\r\n\r\n          _gl.renderbufferStorageMultisample(\r\n            _gl.RENDERBUFFER,\r\n            samples,\r\n            glInternalFormat,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        } else {\r\n          _gl.renderbufferStorage(\r\n            _gl.RENDERBUFFER,\r\n            glInternalFormat,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        }\r\n\r\n        _gl.framebufferRenderbuffer(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.DEPTH_ATTACHMENT,\r\n          _gl.RENDERBUFFER,\r\n          renderbuffer,\r\n        );\r\n      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\r\n        if (isMultisample) {\r\n          const samples = getRenderTargetSamples(renderTarget);\r\n\r\n          _gl.renderbufferStorageMultisample(\r\n            _gl.RENDERBUFFER,\r\n            samples,\r\n            _gl.DEPTH24_STENCIL8,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        } else {\r\n          _gl.renderbufferStorage(\r\n            _gl.RENDERBUFFER,\r\n            _gl.DEPTH_STENCIL,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        }\r\n\r\n        _gl.framebufferRenderbuffer(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.DEPTH_STENCIL_ATTACHMENT,\r\n          _gl.RENDERBUFFER,\r\n          renderbuffer,\r\n        );\r\n      } else {\r\n        // Use the first texture for MRT so far\r\n        const texture =\r\n          renderTarget.isWebGLMultipleRenderTargets === true\r\n            ? renderTarget.texture[0]\r\n            : renderTarget.texture;\r\n        const glFormat = utils.convert(texture.format);\r\n        const glType = utils.convert(texture.type);\r\n        const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\r\n\r\n        if (isMultisample) {\r\n          const samples = getRenderTargetSamples(renderTarget);\r\n\r\n          _gl.renderbufferStorageMultisample(\r\n            _gl.RENDERBUFFER,\r\n            samples,\r\n            glInternalFormat,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        } else {\r\n          _gl.renderbufferStorage(\r\n            _gl.RENDERBUFFER,\r\n            glInternalFormat,\r\n            renderTarget.width,\r\n            renderTarget.height,\r\n          );\r\n        }\r\n      }\r\n\r\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\r\n    } // Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\r\n    function setupDepthTexture(framebuffer, renderTarget) {\r\n      const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\r\n      if (isCube) throw new Error('Depth Texture with cube render targets is not supported');\r\n      state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\r\n\r\n      if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\r\n        throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\r\n      } // upload an empty depth texture with framebuffer size\r\n\r\n      if (\r\n        !properties.get(renderTarget.depthTexture).__webglTexture ||\r\n        renderTarget.depthTexture.image.width !== renderTarget.width ||\r\n        renderTarget.depthTexture.image.height !== renderTarget.height\r\n      ) {\r\n        renderTarget.depthTexture.image.width = renderTarget.width;\r\n        renderTarget.depthTexture.image.height = renderTarget.height;\r\n        renderTarget.depthTexture.needsUpdate = true;\r\n      }\r\n\r\n      setTexture2D(renderTarget.depthTexture, 0);\r\n\r\n      const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\r\n\r\n      if (renderTarget.depthTexture.format === DepthFormat) {\r\n        _gl.framebufferTexture2D(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.DEPTH_ATTACHMENT,\r\n          _gl.TEXTURE_2D,\r\n          webglDepthTexture,\r\n          0,\r\n        );\r\n      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\r\n        _gl.framebufferTexture2D(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.DEPTH_STENCIL_ATTACHMENT,\r\n          _gl.TEXTURE_2D,\r\n          webglDepthTexture,\r\n          0,\r\n        );\r\n      } else {\r\n        throw new Error('Unknown depthTexture format');\r\n      }\r\n    } // Setup GL resources for a non-texture depth buffer\r\n\r\n    function setupDepthRenderbuffer(renderTarget) {\r\n      const renderTargetProperties = properties.get(renderTarget);\r\n      const isCube = renderTarget.isWebGLCubeRenderTarget === true;\r\n\r\n      if (renderTarget.depthTexture) {\r\n        if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\r\n        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\r\n      } else {\r\n        if (isCube) {\r\n          renderTargetProperties.__webglDepthbuffer = [];\r\n\r\n          for (let i = 0; i < 6; i++) {\r\n            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\r\n            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\r\n            setupRenderBufferStorage(\r\n              renderTargetProperties.__webglDepthbuffer[i],\r\n              renderTarget,\r\n              false,\r\n            );\r\n          }\r\n        } else {\r\n          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\r\n          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\r\n        }\r\n      }\r\n\r\n      state.bindFramebuffer(_gl.FRAMEBUFFER, null);\r\n    } // Set up GL resources for the render target\r\n\r\n    function setupRenderTarget(renderTarget) {\r\n      const texture = renderTarget.texture;\r\n      const renderTargetProperties = properties.get(renderTarget);\r\n      const textureProperties = properties.get(texture);\r\n      renderTarget.addEventListener('dispose', onRenderTargetDispose);\r\n\r\n      if (renderTarget.isWebGLMultipleRenderTargets !== true) {\r\n        textureProperties.__webglTexture = _gl.createTexture();\r\n        textureProperties.__version = texture.version;\r\n        info.memory.textures++;\r\n      }\r\n\r\n      const isCube = renderTarget.isWebGLCubeRenderTarget === true;\r\n      const isMultipleRenderTargets = renderTarget.isWebGLMultipleRenderTargets === true;\r\n      const isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\r\n      const isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\r\n      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\r\n\r\n      if (\r\n        isWebGL2 &&\r\n        texture.format === RGBFormat &&\r\n        (texture.type === FloatType || texture.type === HalfFloatType)\r\n      ) {\r\n        texture.format = RGBAFormat;\r\n        console.warn(\r\n          'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.',\r\n        );\r\n      } // Setup framebuffer\r\n\r\n      if (isCube) {\r\n        renderTargetProperties.__webglFramebuffer = [];\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\r\n        }\r\n      } else {\r\n        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n        if (isMultipleRenderTargets) {\r\n          if (capabilities.drawBuffers) {\r\n            const textures = renderTarget.texture;\r\n\r\n            for (let i = 0, il = textures.length; i < il; i++) {\r\n              const attachmentProperties = properties.get(textures[i]);\r\n\r\n              if (attachmentProperties.__webglTexture === undefined) {\r\n                attachmentProperties.__webglTexture = _gl.createTexture();\r\n                info.memory.textures++;\r\n              }\r\n            }\r\n          } else {\r\n            console.warn(\r\n              'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.',\r\n            );\r\n          }\r\n        } else if (isMultisample) {\r\n          if (isWebGL2) {\r\n            renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n            renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\r\n\r\n            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer);\r\n\r\n            const glFormat = utils.convert(texture.format);\r\n            const glType = utils.convert(texture.type);\r\n            const glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\r\n            const samples = getRenderTargetSamples(renderTarget);\r\n\r\n            _gl.renderbufferStorageMultisample(\r\n              _gl.RENDERBUFFER,\r\n              samples,\r\n              glInternalFormat,\r\n              renderTarget.width,\r\n              renderTarget.height,\r\n            );\r\n\r\n            state.bindFramebuffer(\r\n              _gl.FRAMEBUFFER,\r\n              renderTargetProperties.__webglMultisampledFramebuffer,\r\n            );\r\n\r\n            _gl.framebufferRenderbuffer(\r\n              _gl.FRAMEBUFFER,\r\n              _gl.COLOR_ATTACHMENT0,\r\n              _gl.RENDERBUFFER,\r\n              renderTargetProperties.__webglColorRenderbuffer,\r\n            );\r\n\r\n            _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\r\n\r\n            if (renderTarget.depthBuffer) {\r\n              renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n              setupRenderBufferStorage(\r\n                renderTargetProperties.__webglDepthRenderbuffer,\r\n                renderTarget,\r\n                true,\r\n              );\r\n            }\r\n\r\n            state.bindFramebuffer(_gl.FRAMEBUFFER, null);\r\n          } else {\r\n            console.warn(\r\n              'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.',\r\n            );\r\n          }\r\n        }\r\n      } // Setup color buffer\r\n\r\n      if (isCube) {\r\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\r\n        setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, supportsMips);\r\n\r\n        for (let i = 0; i < 6; i++) {\r\n          setupFrameBufferTexture(\r\n            renderTargetProperties.__webglFramebuffer[i],\r\n            renderTarget,\r\n            texture,\r\n            _gl.COLOR_ATTACHMENT0,\r\n            _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n          );\r\n        }\r\n\r\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\r\n          generateMipmap(_gl.TEXTURE_CUBE_MAP, texture, renderTarget.width, renderTarget.height);\r\n        }\r\n\r\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\r\n      } else if (isMultipleRenderTargets) {\r\n        const textures = renderTarget.texture;\r\n\r\n        for (let i = 0, il = textures.length; i < il; i++) {\r\n          const attachment = textures[i];\r\n          const attachmentProperties = properties.get(attachment);\r\n          state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);\r\n          setTextureParameters(_gl.TEXTURE_2D, attachment, supportsMips);\r\n          setupFrameBufferTexture(\r\n            renderTargetProperties.__webglFramebuffer,\r\n            renderTarget,\r\n            attachment,\r\n            _gl.COLOR_ATTACHMENT0 + i,\r\n            _gl.TEXTURE_2D,\r\n          );\r\n\r\n          if (textureNeedsGenerateMipmaps(attachment, supportsMips)) {\r\n            generateMipmap(_gl.TEXTURE_2D, attachment, renderTarget.width, renderTarget.height);\r\n          }\r\n        }\r\n\r\n        state.bindTexture(_gl.TEXTURE_2D, null);\r\n      } else {\r\n        let glTextureType = _gl.TEXTURE_2D;\r\n\r\n        if (isRenderTarget3D) {\r\n          // Render targets containing layers, i.e: Texture 3D and 2d arrays\r\n          if (isWebGL2) {\r\n            const isTexture3D = texture.isDataTexture3D;\r\n            glTextureType = isTexture3D ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\r\n          } else {\r\n            console.warn(\r\n              'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.',\r\n            );\r\n          }\r\n        }\r\n\r\n        state.bindTexture(glTextureType, textureProperties.__webglTexture);\r\n        setTextureParameters(glTextureType, texture, supportsMips);\r\n        setupFrameBufferTexture(\r\n          renderTargetProperties.__webglFramebuffer,\r\n          renderTarget,\r\n          texture,\r\n          _gl.COLOR_ATTACHMENT0,\r\n          glTextureType,\r\n        );\r\n\r\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\r\n          generateMipmap(_gl.TEXTURE_2D, texture, renderTarget.width, renderTarget.height);\r\n        }\r\n\r\n        state.bindTexture(_gl.TEXTURE_2D, null);\r\n      } // Setup depth and stencil buffers\r\n\r\n      if (renderTarget.depthBuffer) {\r\n        setupDepthRenderbuffer(renderTarget);\r\n      }\r\n    }\r\n\r\n    function updateRenderTargetMipmap(renderTarget) {\r\n      const supportsMips = isPowerOfTwo$1(renderTarget) || isWebGL2;\r\n      const textures =\r\n        renderTarget.isWebGLMultipleRenderTargets === true\r\n          ? renderTarget.texture\r\n          : [renderTarget.texture];\r\n\r\n      for (let i = 0, il = textures.length; i < il; i++) {\r\n        const texture = textures[i];\r\n\r\n        if (textureNeedsGenerateMipmaps(texture, supportsMips)) {\r\n          const target = renderTarget.isWebGLCubeRenderTarget\r\n            ? _gl.TEXTURE_CUBE_MAP\r\n            : _gl.TEXTURE_2D;\r\n\r\n          const webglTexture = properties.get(texture).__webglTexture;\r\n\r\n          state.bindTexture(target, webglTexture);\r\n          generateMipmap(target, texture, renderTarget.width, renderTarget.height);\r\n          state.bindTexture(target, null);\r\n        }\r\n      }\r\n    }\r\n\r\n    function updateMultisampleRenderTarget(renderTarget) {\r\n      if (renderTarget.isWebGLMultisampleRenderTarget) {\r\n        if (isWebGL2) {\r\n          const width = renderTarget.width;\r\n          const height = renderTarget.height;\r\n          let mask = _gl.COLOR_BUFFER_BIT;\r\n          if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;\r\n          if (renderTarget.stencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;\r\n          const renderTargetProperties = properties.get(renderTarget);\r\n          state.bindFramebuffer(\r\n            _gl.READ_FRAMEBUFFER,\r\n            renderTargetProperties.__webglMultisampledFramebuffer,\r\n          );\r\n          state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\r\n\r\n          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);\r\n\r\n          state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);\r\n          state.bindFramebuffer(\r\n            _gl.DRAW_FRAMEBUFFER,\r\n            renderTargetProperties.__webglMultisampledFramebuffer,\r\n          );\r\n        } else {\r\n          console.warn(\r\n            'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    function getRenderTargetSamples(renderTarget) {\r\n      return isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget\r\n        ? Math.min(maxSamples, renderTarget.samples)\r\n        : 0;\r\n    }\r\n\r\n    function updateVideoTexture(texture) {\r\n      const frame = info.render.frame; // Check the last frame we updated the VideoTexture\r\n\r\n      if (_videoTextures.get(texture) !== frame) {\r\n        _videoTextures.set(texture, frame);\r\n\r\n        texture.update();\r\n      }\r\n    } // backwards compatibility\r\n\r\n    let warnedTexture2D = false;\r\n    let warnedTextureCube = false;\r\n\r\n    function safeSetTexture2D(texture, slot) {\r\n      if (texture && texture.isWebGLRenderTarget) {\r\n        if (warnedTexture2D === false) {\r\n          console.warn(\r\n            \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\",\r\n          );\r\n          warnedTexture2D = true;\r\n        }\r\n\r\n        texture = texture.texture;\r\n      }\r\n\r\n      setTexture2D(texture, slot);\r\n    }\r\n\r\n    function safeSetTextureCube(texture, slot) {\r\n      if (texture && texture.isWebGLCubeRenderTarget) {\r\n        if (warnedTextureCube === false) {\r\n          console.warn(\r\n            \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\",\r\n          );\r\n          warnedTextureCube = true;\r\n        }\r\n\r\n        texture = texture.texture;\r\n      }\r\n\r\n      setTextureCube(texture, slot);\r\n    } //\r\n\r\n    this.allocateTextureUnit = allocateTextureUnit;\r\n    this.resetTextureUnits = resetTextureUnits;\r\n    this.setTexture2D = setTexture2D;\r\n    this.setTexture2DArray = setTexture2DArray;\r\n    this.setTexture3D = setTexture3D;\r\n    this.setTextureCube = setTextureCube;\r\n    this.setupRenderTarget = setupRenderTarget;\r\n    this.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n    this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n    this.safeSetTexture2D = safeSetTexture2D;\r\n    this.safeSetTextureCube = safeSetTextureCube;\r\n  }\r\n\r\n  function WebGLUtils(gl, extensions, capabilities) {\r\n    const isWebGL2 = capabilities.isWebGL2;\r\n\r\n    function convert(p) {\r\n      let extension;\r\n      if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\r\n      if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\r\n      if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\r\n      if (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\r\n      if (p === ByteType) return gl.BYTE;\r\n      if (p === ShortType) return gl.SHORT;\r\n      if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\r\n      if (p === IntType) return gl.INT;\r\n      if (p === UnsignedIntType) return gl.UNSIGNED_INT;\r\n      if (p === FloatType) return gl.FLOAT;\r\n\r\n      if (p === HalfFloatType) {\r\n        if (isWebGL2) return gl.HALF_FLOAT;\r\n        extension = extensions.get('OES_texture_half_float');\r\n\r\n        if (extension !== null) {\r\n          return extension.HALF_FLOAT_OES;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (p === AlphaFormat) return gl.ALPHA;\r\n      if (p === RGBFormat) return gl.RGB;\r\n      if (p === RGBAFormat) return gl.RGBA;\r\n      if (p === LuminanceFormat) return gl.LUMINANCE;\r\n      if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\r\n      if (p === DepthFormat) return gl.DEPTH_COMPONENT;\r\n      if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\r\n      if (p === RedFormat) return gl.RED; // WebGL2 formats.\r\n\r\n      if (p === RedIntegerFormat) return gl.RED_INTEGER;\r\n      if (p === RGFormat) return gl.RG;\r\n      if (p === RGIntegerFormat) return gl.RG_INTEGER;\r\n      if (p === RGBIntegerFormat) return gl.RGB_INTEGER;\r\n      if (p === RGBAIntegerFormat) return gl.RGBA_INTEGER;\r\n\r\n      if (\r\n        p === RGB_S3TC_DXT1_Format ||\r\n        p === RGBA_S3TC_DXT1_Format ||\r\n        p === RGBA_S3TC_DXT3_Format ||\r\n        p === RGBA_S3TC_DXT5_Format\r\n      ) {\r\n        extension = extensions.get('WEBGL_compressed_texture_s3tc');\r\n\r\n        if (extension !== null) {\r\n          if (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n          if (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n          if (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n          if (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (\r\n        p === RGB_PVRTC_4BPPV1_Format ||\r\n        p === RGB_PVRTC_2BPPV1_Format ||\r\n        p === RGBA_PVRTC_4BPPV1_Format ||\r\n        p === RGBA_PVRTC_2BPPV1_Format\r\n      ) {\r\n        extension = extensions.get('WEBGL_compressed_texture_pvrtc');\r\n\r\n        if (extension !== null) {\r\n          if (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n          if (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n          if (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n          if (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (p === RGB_ETC1_Format) {\r\n        extension = extensions.get('WEBGL_compressed_texture_etc1');\r\n\r\n        if (extension !== null) {\r\n          return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\r\n        extension = extensions.get('WEBGL_compressed_texture_etc');\r\n\r\n        if (extension !== null) {\r\n          if (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\r\n          if (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\r\n        }\r\n      }\r\n\r\n      if (\r\n        p === RGBA_ASTC_4x4_Format ||\r\n        p === RGBA_ASTC_5x4_Format ||\r\n        p === RGBA_ASTC_5x5_Format ||\r\n        p === RGBA_ASTC_6x5_Format ||\r\n        p === RGBA_ASTC_6x6_Format ||\r\n        p === RGBA_ASTC_8x5_Format ||\r\n        p === RGBA_ASTC_8x6_Format ||\r\n        p === RGBA_ASTC_8x8_Format ||\r\n        p === RGBA_ASTC_10x5_Format ||\r\n        p === RGBA_ASTC_10x6_Format ||\r\n        p === RGBA_ASTC_10x8_Format ||\r\n        p === RGBA_ASTC_10x10_Format ||\r\n        p === RGBA_ASTC_12x10_Format ||\r\n        p === RGBA_ASTC_12x12_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_4x4_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_5x4_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_5x5_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_6x5_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_6x6_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_8x5_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_8x6_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_8x8_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_10x5_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_10x6_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_10x8_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_10x10_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_12x10_Format ||\r\n        p === SRGB8_ALPHA8_ASTC_12x12_Format\r\n      ) {\r\n        extension = extensions.get('WEBGL_compressed_texture_astc');\r\n\r\n        if (extension !== null) {\r\n          // TODO Complete?\r\n          return p;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (p === RGBA_BPTC_Format) {\r\n        extension = extensions.get('EXT_texture_compression_bptc');\r\n\r\n        if (extension !== null) {\r\n          // TODO Complete?\r\n          return p;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      if (p === UnsignedInt248Type) {\r\n        if (isWebGL2) return gl.UNSIGNED_INT_24_8;\r\n        extension = extensions.get('WEBGL_depth_texture');\r\n\r\n        if (extension !== null) {\r\n          return extension.UNSIGNED_INT_24_8_WEBGL;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      convert: convert,\r\n    };\r\n  }\r\n\r\n  class ArrayCamera extends PerspectiveCamera {\r\n    constructor(array = []) {\r\n      super();\r\n      this.cameras = array;\r\n    }\r\n  }\r\n\r\n  ArrayCamera.prototype.isArrayCamera = true;\r\n\r\n  class Group extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this.type = 'Group';\r\n    }\r\n  }\r\n\r\n  Group.prototype.isGroup = true;\r\n\r\n  const _moveEvent = {\r\n    type: 'move',\r\n  };\r\n\r\n  class WebXRController {\r\n    constructor() {\r\n      this._targetRay = null;\r\n      this._grip = null;\r\n      this._hand = null;\r\n    }\r\n\r\n    getHandSpace() {\r\n      if (this._hand === null) {\r\n        this._hand = new Group();\r\n        this._hand.matrixAutoUpdate = false;\r\n        this._hand.visible = false;\r\n        this._hand.joints = {};\r\n        this._hand.inputState = {\r\n          pinching: false,\r\n        };\r\n      }\r\n\r\n      return this._hand;\r\n    }\r\n\r\n    getTargetRaySpace() {\r\n      if (this._targetRay === null) {\r\n        this._targetRay = new Group();\r\n        this._targetRay.matrixAutoUpdate = false;\r\n        this._targetRay.visible = false;\r\n        this._targetRay.hasLinearVelocity = false;\r\n        this._targetRay.linearVelocity = new Vector3();\r\n        this._targetRay.hasAngularVelocity = false;\r\n        this._targetRay.angularVelocity = new Vector3();\r\n      }\r\n\r\n      return this._targetRay;\r\n    }\r\n\r\n    getGripSpace() {\r\n      if (this._grip === null) {\r\n        this._grip = new Group();\r\n        this._grip.matrixAutoUpdate = false;\r\n        this._grip.visible = false;\r\n        this._grip.hasLinearVelocity = false;\r\n        this._grip.linearVelocity = new Vector3();\r\n        this._grip.hasAngularVelocity = false;\r\n        this._grip.angularVelocity = new Vector3();\r\n      }\r\n\r\n      return this._grip;\r\n    }\r\n\r\n    dispatchEvent(event) {\r\n      if (this._targetRay !== null) {\r\n        this._targetRay.dispatchEvent(event);\r\n      }\r\n\r\n      if (this._grip !== null) {\r\n        this._grip.dispatchEvent(event);\r\n      }\r\n\r\n      if (this._hand !== null) {\r\n        this._hand.dispatchEvent(event);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    disconnect(inputSource) {\r\n      this.dispatchEvent({\r\n        type: 'disconnected',\r\n        data: inputSource,\r\n      });\r\n\r\n      if (this._targetRay !== null) {\r\n        this._targetRay.visible = false;\r\n      }\r\n\r\n      if (this._grip !== null) {\r\n        this._grip.visible = false;\r\n      }\r\n\r\n      if (this._hand !== null) {\r\n        this._hand.visible = false;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    update(inputSource, frame, referenceSpace) {\r\n      let inputPose = null;\r\n      let gripPose = null;\r\n      let handPose = null;\r\n      const targetRay = this._targetRay;\r\n      const grip = this._grip;\r\n      const hand = this._hand;\r\n\r\n      if (inputSource && frame.session.visibilityState !== 'visible-blurred') {\r\n        if (targetRay !== null) {\r\n          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\r\n\r\n          if (inputPose !== null) {\r\n            targetRay.matrix.fromArray(inputPose.transform.matrix);\r\n            targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\r\n\r\n            if (inputPose.linearVelocity) {\r\n              targetRay.hasLinearVelocity = true;\r\n              targetRay.linearVelocity.copy(inputPose.linearVelocity);\r\n            } else {\r\n              targetRay.hasLinearVelocity = false;\r\n            }\r\n\r\n            if (inputPose.angularVelocity) {\r\n              targetRay.hasAngularVelocity = true;\r\n              targetRay.angularVelocity.copy(inputPose.angularVelocity);\r\n            } else {\r\n              targetRay.hasAngularVelocity = false;\r\n            }\r\n\r\n            this.dispatchEvent(_moveEvent);\r\n          }\r\n        }\r\n\r\n        if (hand && inputSource.hand) {\r\n          handPose = true;\r\n\r\n          for (const inputjoint of inputSource.hand.values()) {\r\n            // Update the joints groups with the XRJoint poses\r\n            const jointPose = frame.getJointPose(inputjoint, referenceSpace);\r\n\r\n            if (hand.joints[inputjoint.jointName] === undefined) {\r\n              // The transform of this joint will be updated with the joint pose on each frame\r\n              const joint = new Group();\r\n              joint.matrixAutoUpdate = false;\r\n              joint.visible = false;\r\n              hand.joints[inputjoint.jointName] = joint; // ??\r\n\r\n              hand.add(joint);\r\n            }\r\n\r\n            const joint = hand.joints[inputjoint.jointName];\r\n\r\n            if (jointPose !== null) {\r\n              joint.matrix.fromArray(jointPose.transform.matrix);\r\n              joint.matrix.decompose(joint.position, joint.rotation, joint.scale);\r\n              joint.jointRadius = jointPose.radius;\r\n            }\r\n\r\n            joint.visible = jointPose !== null;\r\n          } // Custom events\r\n          // Check pinchz\r\n\r\n          const indexTip = hand.joints['index-finger-tip'];\r\n          const thumbTip = hand.joints['thumb-tip'];\r\n          const distance = indexTip.position.distanceTo(thumbTip.position);\r\n          const distanceToPinch = 0.02;\r\n          const threshold = 0.005;\r\n\r\n          if (hand.inputState.pinching && distance > distanceToPinch + threshold) {\r\n            hand.inputState.pinching = false;\r\n            this.dispatchEvent({\r\n              type: 'pinchend',\r\n              handedness: inputSource.handedness,\r\n              target: this,\r\n            });\r\n          } else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\r\n            hand.inputState.pinching = true;\r\n            this.dispatchEvent({\r\n              type: 'pinchstart',\r\n              handedness: inputSource.handedness,\r\n              target: this,\r\n            });\r\n          }\r\n        } else {\r\n          if (grip !== null && inputSource.gripSpace) {\r\n            gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\r\n\r\n            if (gripPose !== null) {\r\n              grip.matrix.fromArray(gripPose.transform.matrix);\r\n              grip.matrix.decompose(grip.position, grip.rotation, grip.scale);\r\n\r\n              if (gripPose.linearVelocity) {\r\n                grip.hasLinearVelocity = true;\r\n                grip.linearVelocity.copy(gripPose.linearVelocity);\r\n              } else {\r\n                grip.hasLinearVelocity = false;\r\n              }\r\n\r\n              if (gripPose.angularVelocity) {\r\n                grip.hasAngularVelocity = true;\r\n                grip.angularVelocity.copy(gripPose.angularVelocity);\r\n              } else {\r\n                grip.hasAngularVelocity = false;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (targetRay !== null) {\r\n        targetRay.visible = inputPose !== null;\r\n      }\r\n\r\n      if (grip !== null) {\r\n        grip.visible = gripPose !== null;\r\n      }\r\n\r\n      if (hand !== null) {\r\n        hand.visible = handPose !== null;\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class WebXRManager extends EventDispatcher {\r\n    constructor(renderer, gl) {\r\n      super();\r\n      const scope = this;\r\n      const state = renderer.state;\r\n      let session = null;\r\n      let framebufferScaleFactor = 1.0;\r\n      let referenceSpace = null;\r\n      let referenceSpaceType = 'local-floor';\r\n      let pose = null;\r\n      const controllers = [];\r\n      const inputSourcesMap = new Map(); //\r\n\r\n      const cameraL = new PerspectiveCamera();\r\n      cameraL.layers.enable(1);\r\n      cameraL.viewport = new Vector4();\r\n      const cameraR = new PerspectiveCamera();\r\n      cameraR.layers.enable(2);\r\n      cameraR.viewport = new Vector4();\r\n      const cameras = [cameraL, cameraR];\r\n      const cameraVR = new ArrayCamera();\r\n      cameraVR.layers.enable(1);\r\n      cameraVR.layers.enable(2);\r\n      let _currentDepthNear = null;\r\n      let _currentDepthFar = null; //\r\n\r\n      this.cameraAutoUpdate = true;\r\n      this.enabled = false;\r\n      this.isPresenting = false;\r\n\r\n      this.getController = function (index) {\r\n        let controller = controllers[index];\r\n\r\n        if (controller === undefined) {\r\n          controller = new WebXRController();\r\n          controllers[index] = controller;\r\n        }\r\n\r\n        return controller.getTargetRaySpace();\r\n      };\r\n\r\n      this.getControllerGrip = function (index) {\r\n        let controller = controllers[index];\r\n\r\n        if (controller === undefined) {\r\n          controller = new WebXRController();\r\n          controllers[index] = controller;\r\n        }\r\n\r\n        return controller.getGripSpace();\r\n      };\r\n\r\n      this.getHand = function (index) {\r\n        let controller = controllers[index];\r\n\r\n        if (controller === undefined) {\r\n          controller = new WebXRController();\r\n          controllers[index] = controller;\r\n        }\r\n\r\n        return controller.getHandSpace();\r\n      }; //\r\n\r\n      function onSessionEvent(event) {\r\n        const controller = inputSourcesMap.get(event.inputSource);\r\n\r\n        if (controller) {\r\n          controller.dispatchEvent({\r\n            type: event.type,\r\n            data: event.inputSource,\r\n          });\r\n        }\r\n      }\r\n\r\n      function onSessionEnd() {\r\n        inputSourcesMap.forEach(function (controller, inputSource) {\r\n          controller.disconnect(inputSource);\r\n        });\r\n        inputSourcesMap.clear();\r\n        _currentDepthNear = null;\r\n        _currentDepthFar = null; // restore framebuffer/rendering state\r\n\r\n        state.bindXRFramebuffer(null);\r\n        renderer.setRenderTarget(renderer.getRenderTarget()); //\r\n\r\n        animation.stop();\r\n        scope.isPresenting = false;\r\n        scope.dispatchEvent({\r\n          type: 'sessionend',\r\n        });\r\n      }\r\n\r\n      this.setFramebufferScaleFactor = function (value) {\r\n        framebufferScaleFactor = value;\r\n\r\n        if (scope.isPresenting === true) {\r\n          console.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\r\n        }\r\n      };\r\n\r\n      this.setReferenceSpaceType = function (value) {\r\n        referenceSpaceType = value;\r\n\r\n        if (scope.isPresenting === true) {\r\n          console.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\r\n        }\r\n      };\r\n\r\n      this.getReferenceSpace = function () {\r\n        return referenceSpace;\r\n      };\r\n\r\n      this.getSession = function () {\r\n        return session;\r\n      };\r\n\r\n      this.setSession = async function (value) {\r\n        session = value;\r\n\r\n        if (session !== null) {\r\n          session.addEventListener('select', onSessionEvent);\r\n          session.addEventListener('selectstart', onSessionEvent);\r\n          session.addEventListener('selectend', onSessionEvent);\r\n          session.addEventListener('squeeze', onSessionEvent);\r\n          session.addEventListener('squeezestart', onSessionEvent);\r\n          session.addEventListener('squeezeend', onSessionEvent);\r\n          session.addEventListener('end', onSessionEnd);\r\n          session.addEventListener('inputsourceschange', onInputSourcesChange);\r\n          const attributes = gl.getContextAttributes();\r\n\r\n          if (attributes.xrCompatible !== true) {\r\n            await gl.makeXRCompatible();\r\n          }\r\n\r\n          const layerInit = {\r\n            antialias: attributes.antialias,\r\n            alpha: attributes.alpha,\r\n            depth: attributes.depth,\r\n            stencil: attributes.stencil,\r\n            framebufferScaleFactor: framebufferScaleFactor,\r\n          }; // eslint-disable-next-line no-undef\r\n\r\n          const baseLayer = new XRWebGLLayer(session, gl, layerInit);\r\n          session.updateRenderState({\r\n            baseLayer: baseLayer,\r\n          });\r\n          referenceSpace = await session.requestReferenceSpace(referenceSpaceType);\r\n          animation.setContext(session);\r\n          animation.start();\r\n          scope.isPresenting = true;\r\n          scope.dispatchEvent({\r\n            type: 'sessionstart',\r\n          });\r\n        }\r\n      };\r\n\r\n      function onInputSourcesChange(event) {\r\n        const inputSources = session.inputSources; // Assign inputSources to available controllers\r\n\r\n        for (let i = 0; i < controllers.length; i++) {\r\n          inputSourcesMap.set(inputSources[i], controllers[i]);\r\n        } // Notify disconnected\r\n\r\n        for (let i = 0; i < event.removed.length; i++) {\r\n          const inputSource = event.removed[i];\r\n          const controller = inputSourcesMap.get(inputSource);\r\n\r\n          if (controller) {\r\n            controller.dispatchEvent({\r\n              type: 'disconnected',\r\n              data: inputSource,\r\n            });\r\n            inputSourcesMap.delete(inputSource);\r\n          }\r\n        } // Notify connected\r\n\r\n        for (let i = 0; i < event.added.length; i++) {\r\n          const inputSource = event.added[i];\r\n          const controller = inputSourcesMap.get(inputSource);\r\n\r\n          if (controller) {\r\n            controller.dispatchEvent({\r\n              type: 'connected',\r\n              data: inputSource,\r\n            });\r\n          }\r\n        }\r\n      } //\r\n\r\n      const cameraLPos = new Vector3();\r\n      const cameraRPos = new Vector3();\r\n      /**\r\n       * Assumes 2 cameras that are parallel and share an X-axis, and that\r\n       * the cameras' projection and world matrices have already been set.\r\n       * And that near and far planes are identical for both cameras.\r\n       * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\r\n       */\r\n\r\n      function setProjectionFromUnion(camera, cameraL, cameraR) {\r\n        cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\r\n        cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\r\n        const ipd = cameraLPos.distanceTo(cameraRPos);\r\n        const projL = cameraL.projectionMatrix.elements;\r\n        const projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\r\n        // most likely identical top and bottom frustum extents.\r\n        // Use the left camera for these values.\r\n\r\n        const near = projL[14] / (projL[10] - 1);\r\n        const far = projL[14] / (projL[10] + 1);\r\n        const topFov = (projL[9] + 1) / projL[5];\r\n        const bottomFov = (projL[9] - 1) / projL[5];\r\n        const leftFov = (projL[8] - 1) / projL[0];\r\n        const rightFov = (projR[8] + 1) / projR[0];\r\n        const left = near * leftFov;\r\n        const right = near * rightFov; // Calculate the new camera's position offset from the\r\n        // left camera. xOffset should be roughly half `ipd`.\r\n\r\n        const zOffset = ipd / (-leftFov + rightFov);\r\n        const xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\r\n\r\n        cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\r\n        camera.translateX(xOffset);\r\n        camera.translateZ(zOffset);\r\n        camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\r\n        camera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\r\n        // the values so that the near plane's position does not change in world space,\r\n        // although must now be relative to the new union camera.\r\n\r\n        const near2 = near + zOffset;\r\n        const far2 = far + zOffset;\r\n        const left2 = left - xOffset;\r\n        const right2 = right + (ipd - xOffset);\r\n        const top2 = ((topFov * far) / far2) * near2;\r\n        const bottom2 = ((bottomFov * far) / far2) * near2;\r\n        camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\r\n      }\r\n\r\n      function updateCamera(camera, parent) {\r\n        if (parent === null) {\r\n          camera.matrixWorld.copy(camera.matrix);\r\n        } else {\r\n          camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\r\n        }\r\n\r\n        camera.matrixWorldInverse.copy(camera.matrixWorld).invert();\r\n      }\r\n\r\n      this.updateCamera = function (camera) {\r\n        if (session === null) return;\r\n        cameraVR.near = cameraR.near = cameraL.near = camera.near;\r\n        cameraVR.far = cameraR.far = cameraL.far = camera.far;\r\n\r\n        if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\r\n          // Note that the new renderState won't apply until the next frame. See #18320\r\n          session.updateRenderState({\r\n            depthNear: cameraVR.near,\r\n            depthFar: cameraVR.far,\r\n          });\r\n          _currentDepthNear = cameraVR.near;\r\n          _currentDepthFar = cameraVR.far;\r\n        }\r\n\r\n        const parent = camera.parent;\r\n        const cameras = cameraVR.cameras;\r\n        updateCamera(cameraVR, parent);\r\n\r\n        for (let i = 0; i < cameras.length; i++) {\r\n          updateCamera(cameras[i], parent);\r\n        } // update camera and its children\r\n\r\n        camera.matrixWorld.copy(cameraVR.matrixWorld);\r\n        camera.matrix.copy(cameraVR.matrix);\r\n        camera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\r\n        const children = camera.children;\r\n\r\n        for (let i = 0, l = children.length; i < l; i++) {\r\n          children[i].updateMatrixWorld(true);\r\n        } // update projection matrix for proper view frustum culling\r\n\r\n        if (cameras.length === 2) {\r\n          setProjectionFromUnion(cameraVR, cameraL, cameraR);\r\n        } else {\r\n          // assume single camera setup (AR)\r\n          cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\r\n        }\r\n      };\r\n\r\n      this.getCamera = function () {\r\n        return cameraVR;\r\n      }; // Animation Loop\r\n\r\n      let onAnimationFrameCallback = null;\r\n\r\n      function onAnimationFrame(time, frame) {\r\n        pose = frame.getViewerPose(referenceSpace);\r\n\r\n        if (pose !== null) {\r\n          const views = pose.views;\r\n          const baseLayer = session.renderState.baseLayer;\r\n          state.bindXRFramebuffer(baseLayer.framebuffer);\r\n          let cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\r\n\r\n          if (views.length !== cameraVR.cameras.length) {\r\n            cameraVR.cameras.length = 0;\r\n            cameraVRNeedsUpdate = true;\r\n          }\r\n\r\n          for (let i = 0; i < views.length; i++) {\r\n            const view = views[i];\r\n            const viewport = baseLayer.getViewport(view);\r\n            const camera = cameras[i];\r\n            camera.matrix.fromArray(view.transform.matrix);\r\n            camera.projectionMatrix.fromArray(view.projectionMatrix);\r\n            camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\r\n\r\n            if (i === 0) {\r\n              cameraVR.matrix.copy(camera.matrix);\r\n            }\r\n\r\n            if (cameraVRNeedsUpdate === true) {\r\n              cameraVR.cameras.push(camera);\r\n            }\r\n          }\r\n        } //\r\n\r\n        const inputSources = session.inputSources;\r\n\r\n        for (let i = 0; i < controllers.length; i++) {\r\n          const controller = controllers[i];\r\n          const inputSource = inputSources[i];\r\n          controller.update(inputSource, frame, referenceSpace);\r\n        }\r\n\r\n        if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\r\n      }\r\n\r\n      const animation = new WebGLAnimation();\r\n      animation.setAnimationLoop(onAnimationFrame);\r\n\r\n      this.setAnimationLoop = function (callback) {\r\n        onAnimationFrameCallback = callback;\r\n      };\r\n\r\n      this.dispose = function () {};\r\n    }\r\n  }\r\n\r\n  function WebGLMaterials(properties) {\r\n    function refreshFogUniforms(uniforms, fog) {\r\n      uniforms.fogColor.value.copy(fog.color);\r\n\r\n      if (fog.isFog) {\r\n        uniforms.fogNear.value = fog.near;\r\n        uniforms.fogFar.value = fog.far;\r\n      } else if (fog.isFogExp2) {\r\n        uniforms.fogDensity.value = fog.density;\r\n      }\r\n    }\r\n\r\n    function refreshMaterialUniforms(\r\n      uniforms,\r\n      material,\r\n      pixelRatio,\r\n      height,\r\n      transmissionRenderTarget,\r\n    ) {\r\n      if (material.isMeshBasicMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n      } else if (material.isMeshLambertMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsLambert(uniforms, material);\r\n      } else if (material.isMeshToonMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsToon(uniforms, material);\r\n      } else if (material.isMeshPhongMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsPhong(uniforms, material);\r\n      } else if (material.isMeshStandardMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n\r\n        if (material.isMeshPhysicalMaterial) {\r\n          refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);\r\n        } else {\r\n          refreshUniformsStandard(uniforms, material);\r\n        }\r\n      } else if (material.isMeshMatcapMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsMatcap(uniforms, material);\r\n      } else if (material.isMeshDepthMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsDepth(uniforms, material);\r\n      } else if (material.isMeshDistanceMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsDistance(uniforms, material);\r\n      } else if (material.isMeshNormalMaterial) {\r\n        refreshUniformsCommon(uniforms, material);\r\n        refreshUniformsNormal(uniforms, material);\r\n      } else if (material.isLineBasicMaterial) {\r\n        refreshUniformsLine(uniforms, material);\r\n\r\n        if (material.isLineDashedMaterial) {\r\n          refreshUniformsDash(uniforms, material);\r\n        }\r\n      } else if (material.isPointsMaterial) {\r\n        refreshUniformsPoints(uniforms, material, pixelRatio, height);\r\n      } else if (material.isSpriteMaterial) {\r\n        refreshUniformsSprites(uniforms, material);\r\n      } else if (material.isShadowMaterial) {\r\n        uniforms.color.value.copy(material.color);\r\n        uniforms.opacity.value = material.opacity;\r\n      } else if (material.isShaderMaterial) {\r\n        material.uniformsNeedUpdate = false; // #15581\r\n      }\r\n    }\r\n\r\n    function refreshUniformsCommon(uniforms, material) {\r\n      uniforms.opacity.value = material.opacity;\r\n\r\n      if (material.color) {\r\n        uniforms.diffuse.value.copy(material.color);\r\n      }\r\n\r\n      if (material.emissive) {\r\n        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\r\n      }\r\n\r\n      if (material.map) {\r\n        uniforms.map.value = material.map;\r\n      }\r\n\r\n      if (material.alphaMap) {\r\n        uniforms.alphaMap.value = material.alphaMap;\r\n      }\r\n\r\n      if (material.specularMap) {\r\n        uniforms.specularMap.value = material.specularMap;\r\n      }\r\n\r\n      const envMap = properties.get(material).envMap;\r\n\r\n      if (envMap) {\r\n        uniforms.envMap.value = envMap;\r\n        uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\r\n        uniforms.reflectivity.value = material.reflectivity;\r\n        uniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n        const maxMipLevel = properties.get(envMap).__maxMipLevel;\r\n\r\n        if (maxMipLevel !== undefined) {\r\n          uniforms.maxMipLevel.value = maxMipLevel;\r\n        }\r\n      }\r\n\r\n      if (material.lightMap) {\r\n        uniforms.lightMap.value = material.lightMap;\r\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n      }\r\n\r\n      if (material.aoMap) {\r\n        uniforms.aoMap.value = material.aoMap;\r\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n      } // uv repeat and offset setting priorities\r\n      // 1. color map\r\n      // 2. specular map\r\n      // 3. displacementMap map\r\n      // 4. normal map\r\n      // 5. bump map\r\n      // 6. roughnessMap map\r\n      // 7. metalnessMap map\r\n      // 8. alphaMap map\r\n      // 9. emissiveMap map\r\n      // 10. clearcoat map\r\n      // 11. clearcoat normal map\r\n      // 12. clearcoat roughnessMap map\r\n\r\n      let uvScaleMap;\r\n\r\n      if (material.map) {\r\n        uvScaleMap = material.map;\r\n      } else if (material.specularMap) {\r\n        uvScaleMap = material.specularMap;\r\n      } else if (material.displacementMap) {\r\n        uvScaleMap = material.displacementMap;\r\n      } else if (material.normalMap) {\r\n        uvScaleMap = material.normalMap;\r\n      } else if (material.bumpMap) {\r\n        uvScaleMap = material.bumpMap;\r\n      } else if (material.roughnessMap) {\r\n        uvScaleMap = material.roughnessMap;\r\n      } else if (material.metalnessMap) {\r\n        uvScaleMap = material.metalnessMap;\r\n      } else if (material.alphaMap) {\r\n        uvScaleMap = material.alphaMap;\r\n      } else if (material.emissiveMap) {\r\n        uvScaleMap = material.emissiveMap;\r\n      } else if (material.clearcoatMap) {\r\n        uvScaleMap = material.clearcoatMap;\r\n      } else if (material.clearcoatNormalMap) {\r\n        uvScaleMap = material.clearcoatNormalMap;\r\n      } else if (material.clearcoatRoughnessMap) {\r\n        uvScaleMap = material.clearcoatRoughnessMap;\r\n      }\r\n\r\n      if (uvScaleMap !== undefined) {\r\n        // backwards compatibility\r\n        if (uvScaleMap.isWebGLRenderTarget) {\r\n          uvScaleMap = uvScaleMap.texture;\r\n        }\r\n\r\n        if (uvScaleMap.matrixAutoUpdate === true) {\r\n          uvScaleMap.updateMatrix();\r\n        }\r\n\r\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\r\n      } // uv repeat and offset setting priorities for uv2\r\n      // 1. ao map\r\n      // 2. light map\r\n\r\n      let uv2ScaleMap;\r\n\r\n      if (material.aoMap) {\r\n        uv2ScaleMap = material.aoMap;\r\n      } else if (material.lightMap) {\r\n        uv2ScaleMap = material.lightMap;\r\n      }\r\n\r\n      if (uv2ScaleMap !== undefined) {\r\n        // backwards compatibility\r\n        if (uv2ScaleMap.isWebGLRenderTarget) {\r\n          uv2ScaleMap = uv2ScaleMap.texture;\r\n        }\r\n\r\n        if (uv2ScaleMap.matrixAutoUpdate === true) {\r\n          uv2ScaleMap.updateMatrix();\r\n        }\r\n\r\n        uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\r\n      }\r\n    }\r\n\r\n    function refreshUniformsLine(uniforms, material) {\r\n      uniforms.diffuse.value.copy(material.color);\r\n      uniforms.opacity.value = material.opacity;\r\n    }\r\n\r\n    function refreshUniformsDash(uniforms, material) {\r\n      uniforms.dashSize.value = material.dashSize;\r\n      uniforms.totalSize.value = material.dashSize + material.gapSize;\r\n      uniforms.scale.value = material.scale;\r\n    }\r\n\r\n    function refreshUniformsPoints(uniforms, material, pixelRatio, height) {\r\n      uniforms.diffuse.value.copy(material.color);\r\n      uniforms.opacity.value = material.opacity;\r\n      uniforms.size.value = material.size * pixelRatio;\r\n      uniforms.scale.value = height * 0.5;\r\n\r\n      if (material.map) {\r\n        uniforms.map.value = material.map;\r\n      }\r\n\r\n      if (material.alphaMap) {\r\n        uniforms.alphaMap.value = material.alphaMap;\r\n      } // uv repeat and offset setting priorities\r\n      // 1. color map\r\n      // 2. alpha map\r\n\r\n      let uvScaleMap;\r\n\r\n      if (material.map) {\r\n        uvScaleMap = material.map;\r\n      } else if (material.alphaMap) {\r\n        uvScaleMap = material.alphaMap;\r\n      }\r\n\r\n      if (uvScaleMap !== undefined) {\r\n        if (uvScaleMap.matrixAutoUpdate === true) {\r\n          uvScaleMap.updateMatrix();\r\n        }\r\n\r\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\r\n      }\r\n    }\r\n\r\n    function refreshUniformsSprites(uniforms, material) {\r\n      uniforms.diffuse.value.copy(material.color);\r\n      uniforms.opacity.value = material.opacity;\r\n      uniforms.rotation.value = material.rotation;\r\n\r\n      if (material.map) {\r\n        uniforms.map.value = material.map;\r\n      }\r\n\r\n      if (material.alphaMap) {\r\n        uniforms.alphaMap.value = material.alphaMap;\r\n      } // uv repeat and offset setting priorities\r\n      // 1. color map\r\n      // 2. alpha map\r\n\r\n      let uvScaleMap;\r\n\r\n      if (material.map) {\r\n        uvScaleMap = material.map;\r\n      } else if (material.alphaMap) {\r\n        uvScaleMap = material.alphaMap;\r\n      }\r\n\r\n      if (uvScaleMap !== undefined) {\r\n        if (uvScaleMap.matrixAutoUpdate === true) {\r\n          uvScaleMap.updateMatrix();\r\n        }\r\n\r\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\r\n      }\r\n    }\r\n\r\n    function refreshUniformsLambert(uniforms, material) {\r\n      if (material.emissiveMap) {\r\n        uniforms.emissiveMap.value = material.emissiveMap;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsPhong(uniforms, material) {\r\n      uniforms.specular.value.copy(material.specular);\r\n      uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\r\n\r\n      if (material.emissiveMap) {\r\n        uniforms.emissiveMap.value = material.emissiveMap;\r\n      }\r\n\r\n      if (material.bumpMap) {\r\n        uniforms.bumpMap.value = material.bumpMap;\r\n        uniforms.bumpScale.value = material.bumpScale;\r\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\r\n      }\r\n\r\n      if (material.normalMap) {\r\n        uniforms.normalMap.value = material.normalMap;\r\n        uniforms.normalScale.value.copy(material.normalScale);\r\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\r\n      }\r\n\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsToon(uniforms, material) {\r\n      if (material.gradientMap) {\r\n        uniforms.gradientMap.value = material.gradientMap;\r\n      }\r\n\r\n      if (material.emissiveMap) {\r\n        uniforms.emissiveMap.value = material.emissiveMap;\r\n      }\r\n\r\n      if (material.bumpMap) {\r\n        uniforms.bumpMap.value = material.bumpMap;\r\n        uniforms.bumpScale.value = material.bumpScale;\r\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\r\n      }\r\n\r\n      if (material.normalMap) {\r\n        uniforms.normalMap.value = material.normalMap;\r\n        uniforms.normalScale.value.copy(material.normalScale);\r\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\r\n      }\r\n\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsStandard(uniforms, material) {\r\n      uniforms.roughness.value = material.roughness;\r\n      uniforms.metalness.value = material.metalness;\r\n\r\n      if (material.roughnessMap) {\r\n        uniforms.roughnessMap.value = material.roughnessMap;\r\n      }\r\n\r\n      if (material.metalnessMap) {\r\n        uniforms.metalnessMap.value = material.metalnessMap;\r\n      }\r\n\r\n      if (material.emissiveMap) {\r\n        uniforms.emissiveMap.value = material.emissiveMap;\r\n      }\r\n\r\n      if (material.bumpMap) {\r\n        uniforms.bumpMap.value = material.bumpMap;\r\n        uniforms.bumpScale.value = material.bumpScale;\r\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\r\n      }\r\n\r\n      if (material.normalMap) {\r\n        uniforms.normalMap.value = material.normalMap;\r\n        uniforms.normalScale.value.copy(material.normalScale);\r\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\r\n      }\r\n\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n\r\n      const envMap = properties.get(material).envMap;\r\n\r\n      if (envMap) {\r\n        //uniforms.envMap.value = material.envMap; // part of uniforms common\r\n        uniforms.envMapIntensity.value = material.envMapIntensity;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {\r\n      refreshUniformsStandard(uniforms, material);\r\n      uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\r\n\r\n      uniforms.clearcoat.value = material.clearcoat;\r\n      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n      if (material.sheen) uniforms.sheen.value.copy(material.sheen);\r\n\r\n      if (material.clearcoatMap) {\r\n        uniforms.clearcoatMap.value = material.clearcoatMap;\r\n      }\r\n\r\n      if (material.clearcoatRoughnessMap) {\r\n        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\r\n      }\r\n\r\n      if (material.clearcoatNormalMap) {\r\n        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\r\n        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n        if (material.side === BackSide) {\r\n          uniforms.clearcoatNormalScale.value.negate();\r\n        }\r\n      }\r\n\r\n      uniforms.transmission.value = material.transmission;\r\n\r\n      if (material.transmissionMap) {\r\n        uniforms.transmissionMap.value = material.transmissionMap;\r\n      }\r\n\r\n      if (material.transmission > 0.0) {\r\n        uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\r\n        uniforms.transmissionSamplerSize.value.set(\r\n          transmissionRenderTarget.width,\r\n          transmissionRenderTarget.height,\r\n        );\r\n      }\r\n\r\n      uniforms.thickness.value = material.thickness;\r\n\r\n      if (material.thicknessMap) {\r\n        uniforms.thicknessMap.value = material.thicknessMap;\r\n      }\r\n\r\n      uniforms.attenuationDistance.value = material.attenuationDistance;\r\n      uniforms.attenuationColor.value.copy(material.attenuationColor);\r\n    }\r\n\r\n    function refreshUniformsMatcap(uniforms, material) {\r\n      if (material.matcap) {\r\n        uniforms.matcap.value = material.matcap;\r\n      }\r\n\r\n      if (material.bumpMap) {\r\n        uniforms.bumpMap.value = material.bumpMap;\r\n        uniforms.bumpScale.value = material.bumpScale;\r\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\r\n      }\r\n\r\n      if (material.normalMap) {\r\n        uniforms.normalMap.value = material.normalMap;\r\n        uniforms.normalScale.value.copy(material.normalScale);\r\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\r\n      }\r\n\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsDepth(uniforms, material) {\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n    }\r\n\r\n    function refreshUniformsDistance(uniforms, material) {\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n\r\n      uniforms.referencePosition.value.copy(material.referencePosition);\r\n      uniforms.nearDistance.value = material.nearDistance;\r\n      uniforms.farDistance.value = material.farDistance;\r\n    }\r\n\r\n    function refreshUniformsNormal(uniforms, material) {\r\n      if (material.bumpMap) {\r\n        uniforms.bumpMap.value = material.bumpMap;\r\n        uniforms.bumpScale.value = material.bumpScale;\r\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\r\n      }\r\n\r\n      if (material.normalMap) {\r\n        uniforms.normalMap.value = material.normalMap;\r\n        uniforms.normalScale.value.copy(material.normalScale);\r\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\r\n      }\r\n\r\n      if (material.displacementMap) {\r\n        uniforms.displacementMap.value = material.displacementMap;\r\n        uniforms.displacementScale.value = material.displacementScale;\r\n        uniforms.displacementBias.value = material.displacementBias;\r\n      }\r\n    }\r\n\r\n    return {\r\n      refreshFogUniforms: refreshFogUniforms,\r\n      refreshMaterialUniforms: refreshMaterialUniforms,\r\n    };\r\n  }\r\n\r\n  function createCanvasElement() {\r\n    const canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\r\n    canvas.style.display = 'block';\r\n    return canvas;\r\n  }\r\n\r\n  function WebGLRenderer(parameters) {\r\n    parameters = parameters || {};\r\n\r\n    const _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\r\n      _context = parameters.context !== undefined ? parameters.context : null,\r\n      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n      _depth = parameters.depth !== undefined ? parameters.depth : true,\r\n      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n      _premultipliedAlpha =\r\n        parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n      _preserveDrawingBuffer =\r\n        parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n      _powerPreference =\r\n        parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\r\n      _failIfMajorPerformanceCaveat =\r\n        parameters.failIfMajorPerformanceCaveat !== undefined\r\n          ? parameters.failIfMajorPerformanceCaveat\r\n          : false;\r\n\r\n    let currentRenderList = null;\r\n    let currentRenderState = null; // render() can be called from within a callback triggered by another render.\r\n    // We track this so that the nested render call gets its list and state isolated from the parent render call.\r\n\r\n    const renderListStack = [];\r\n    const renderStateStack = []; // public properties\r\n\r\n    this.domElement = _canvas; // Debug configuration container\r\n\r\n    this.debug = {\r\n      /**\r\n       * Enables error checking and reporting when shader programs are being compiled\r\n       * @type {boolean}\r\n       */\r\n      checkShaderErrors: true,\r\n    }; // clearing\r\n\r\n    this.autoClear = true;\r\n    this.autoClearColor = true;\r\n    this.autoClearDepth = true;\r\n    this.autoClearStencil = true; // scene graph\r\n\r\n    this.sortObjects = true; // user-defined clipping\r\n\r\n    this.clippingPlanes = [];\r\n    this.localClippingEnabled = false; // physically based shading\r\n\r\n    this.gammaFactor = 2.0; // for backwards compatibility\r\n\r\n    this.outputEncoding = LinearEncoding; // physical lights\r\n\r\n    this.physicallyCorrectLights = false; // tone mapping\r\n\r\n    this.toneMapping = NoToneMapping;\r\n    this.toneMappingExposure = 1.0; // internal properties\r\n\r\n    const _this = this;\r\n\r\n    let _isContextLost = false; // internal state cache\r\n\r\n    let _currentActiveCubeFace = 0;\r\n    let _currentActiveMipmapLevel = 0;\r\n    let _currentRenderTarget = null;\r\n\r\n    let _currentMaterialId = -1;\r\n\r\n    let _currentCamera = null;\r\n\r\n    const _currentViewport = new Vector4();\r\n\r\n    const _currentScissor = new Vector4();\r\n\r\n    let _currentScissorTest = null; //\r\n\r\n    let _width = _canvas.width;\r\n    let _height = _canvas.height;\r\n    let _pixelRatio = 1;\r\n    let _opaqueSort = null;\r\n    let _transparentSort = null;\r\n\r\n    const _viewport = new Vector4(0, 0, _width, _height);\r\n\r\n    const _scissor = new Vector4(0, 0, _width, _height);\r\n\r\n    let _scissorTest = false; //\r\n\r\n    const _currentDrawBuffers = []; // frustum\r\n\r\n    const _frustum = new Frustum(); // clipping\r\n\r\n    let _clippingEnabled = false;\r\n    let _localClippingEnabled = false; // transmission\r\n\r\n    let _transmissionRenderTarget = null; // camera matrices cache\r\n\r\n    const _projScreenMatrix = new Matrix4();\r\n\r\n    const _vector3 = new Vector3();\r\n\r\n    const _emptyScene = {\r\n      background: null,\r\n      fog: null,\r\n      environment: null,\r\n      overrideMaterial: null,\r\n      isScene: true,\r\n    };\r\n\r\n    function getTargetPixelRatio() {\r\n      return _currentRenderTarget === null ? _pixelRatio : 1;\r\n    } // initialize\r\n\r\n    let _gl = _context;\r\n\r\n    function getContext(contextNames, contextAttributes) {\r\n      for (let i = 0; i < contextNames.length; i++) {\r\n        const contextName = contextNames[i];\r\n\r\n        const context = _canvas.getContext(contextName, contextAttributes);\r\n\r\n        if (context !== null) return context;\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const contextAttributes = {\r\n        alpha: _alpha,\r\n        depth: _depth,\r\n        stencil: _stencil,\r\n        antialias: _antialias,\r\n        premultipliedAlpha: _premultipliedAlpha,\r\n        preserveDrawingBuffer: _preserveDrawingBuffer,\r\n        powerPreference: _powerPreference,\r\n        failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\r\n      }; // event listeners must be registered before WebGL context is created, see #12753\r\n\r\n      _canvas.addEventListener('webglcontextlost', onContextLost, false);\r\n\r\n      _canvas.addEventListener('webglcontextrestored', onContextRestore, false);\r\n\r\n      if (_gl === null) {\r\n        const contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\r\n\r\n        if (_this.isWebGL1Renderer === true) {\r\n          contextNames.shift();\r\n        }\r\n\r\n        _gl = getContext(contextNames, contextAttributes);\r\n\r\n        if (_gl === null) {\r\n          if (getContext(contextNames)) {\r\n            throw new Error('Error creating WebGL context with your selected attributes.');\r\n          } else {\r\n            throw new Error('Error creating WebGL context.');\r\n          }\r\n        }\r\n      } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n      if (_gl.getShaderPrecisionFormat === undefined) {\r\n        _gl.getShaderPrecisionFormat = function () {\r\n          return {\r\n            rangeMin: 1,\r\n            rangeMax: 1,\r\n            precision: 1,\r\n          };\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('THREE.WebGLRenderer: ' + error.message);\r\n      throw error;\r\n    }\r\n\r\n    let extensions, capabilities, state, info;\r\n    let properties, textures, cubemaps, attributes, geometries, objects;\r\n    let programCache, materials, renderLists, renderStates, clipping, shadowMap;\r\n    let background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n    let utils, bindingStates;\r\n\r\n    function initGLContext() {\r\n      extensions = new WebGLExtensions(_gl);\r\n      capabilities = new WebGLCapabilities(_gl, extensions, parameters);\r\n      extensions.init(capabilities);\r\n      utils = new WebGLUtils(_gl, extensions, capabilities);\r\n      state = new WebGLState(_gl, extensions, capabilities);\r\n      _currentDrawBuffers[0] = _gl.BACK;\r\n      info = new WebGLInfo(_gl);\r\n      properties = new WebGLProperties();\r\n      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\r\n      cubemaps = new WebGLCubeMaps(_this);\r\n      attributes = new WebGLAttributes(_gl, capabilities);\r\n      bindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\r\n      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\r\n      objects = new WebGLObjects(_gl, geometries, attributes, info);\r\n      morphtargets = new WebGLMorphtargets(_gl);\r\n      clipping = new WebGLClipping(properties);\r\n      programCache = new WebGLPrograms(\r\n        _this,\r\n        cubemaps,\r\n        extensions,\r\n        capabilities,\r\n        bindingStates,\r\n        clipping,\r\n      );\r\n      materials = new WebGLMaterials(properties);\r\n      renderLists = new WebGLRenderLists(properties);\r\n      renderStates = new WebGLRenderStates(extensions, capabilities);\r\n      background = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\r\n      shadowMap = new WebGLShadowMap(_this, objects, capabilities);\r\n      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\r\n      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\r\n      info.programs = programCache.programs;\r\n      _this.capabilities = capabilities;\r\n      _this.extensions = extensions;\r\n      _this.properties = properties;\r\n      _this.renderLists = renderLists;\r\n      _this.shadowMap = shadowMap;\r\n      _this.state = state;\r\n      _this.info = info;\r\n    }\r\n\r\n    initGLContext(); // xr\r\n\r\n    const xr = new WebXRManager(_this, _gl);\r\n    this.xr = xr; // API\r\n\r\n    this.getContext = function () {\r\n      return _gl;\r\n    };\r\n\r\n    this.getContextAttributes = function () {\r\n      return _gl.getContextAttributes();\r\n    };\r\n\r\n    this.forceContextLoss = function () {\r\n      const extension = extensions.get('WEBGL_lose_context');\r\n      if (extension) extension.loseContext();\r\n    };\r\n\r\n    this.forceContextRestore = function () {\r\n      const extension = extensions.get('WEBGL_lose_context');\r\n      if (extension) extension.restoreContext();\r\n    };\r\n\r\n    this.getPixelRatio = function () {\r\n      return _pixelRatio;\r\n    };\r\n\r\n    this.setPixelRatio = function (value) {\r\n      if (value === undefined) return;\r\n      _pixelRatio = value;\r\n      this.setSize(_width, _height, false);\r\n    };\r\n\r\n    this.getSize = function (target) {\r\n      if (target === undefined) {\r\n        console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\r\n        target = new Vector2();\r\n      }\r\n\r\n      return target.set(_width, _height);\r\n    };\r\n\r\n    this.setSize = function (width, height, updateStyle) {\r\n      if (xr.isPresenting) {\r\n        console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\");\r\n        return;\r\n      }\r\n\r\n      _width = width;\r\n      _height = height;\r\n      _canvas.width = Math.floor(width * _pixelRatio);\r\n      _canvas.height = Math.floor(height * _pixelRatio);\r\n\r\n      if (updateStyle !== false) {\r\n        _canvas.style.width = width + 'px';\r\n        _canvas.style.height = height + 'px';\r\n      }\r\n\r\n      this.setViewport(0, 0, width, height);\r\n    };\r\n\r\n    this.getDrawingBufferSize = function (target) {\r\n      if (target === undefined) {\r\n        console.warn(\r\n          'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument',\r\n        );\r\n        target = new Vector2();\r\n      }\r\n\r\n      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\r\n    };\r\n\r\n    this.setDrawingBufferSize = function (width, height, pixelRatio) {\r\n      _width = width;\r\n      _height = height;\r\n      _pixelRatio = pixelRatio;\r\n      _canvas.width = Math.floor(width * pixelRatio);\r\n      _canvas.height = Math.floor(height * pixelRatio);\r\n      this.setViewport(0, 0, width, height);\r\n    };\r\n\r\n    this.getCurrentViewport = function (target) {\r\n      if (target === undefined) {\r\n        console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\r\n        target = new Vector4();\r\n      }\r\n\r\n      return target.copy(_currentViewport);\r\n    };\r\n\r\n    this.getViewport = function (target) {\r\n      return target.copy(_viewport);\r\n    };\r\n\r\n    this.setViewport = function (x, y, width, height) {\r\n      if (x.isVector4) {\r\n        _viewport.set(x.x, x.y, x.z, x.w);\r\n      } else {\r\n        _viewport.set(x, y, width, height);\r\n      }\r\n\r\n      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\r\n    };\r\n\r\n    this.getScissor = function (target) {\r\n      return target.copy(_scissor);\r\n    };\r\n\r\n    this.setScissor = function (x, y, width, height) {\r\n      if (x.isVector4) {\r\n        _scissor.set(x.x, x.y, x.z, x.w);\r\n      } else {\r\n        _scissor.set(x, y, width, height);\r\n      }\r\n\r\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\r\n    };\r\n\r\n    this.getScissorTest = function () {\r\n      return _scissorTest;\r\n    };\r\n\r\n    this.setScissorTest = function (boolean) {\r\n      state.setScissorTest((_scissorTest = boolean));\r\n    };\r\n\r\n    this.setOpaqueSort = function (method) {\r\n      _opaqueSort = method;\r\n    };\r\n\r\n    this.setTransparentSort = function (method) {\r\n      _transparentSort = method;\r\n    }; // Clearing\r\n\r\n    this.getClearColor = function (target) {\r\n      if (target === undefined) {\r\n        console.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\r\n        target = new Color();\r\n      }\r\n\r\n      return target.copy(background.getClearColor());\r\n    };\r\n\r\n    this.setClearColor = function () {\r\n      background.setClearColor.apply(background, arguments);\r\n    };\r\n\r\n    this.getClearAlpha = function () {\r\n      return background.getClearAlpha();\r\n    };\r\n\r\n    this.setClearAlpha = function () {\r\n      background.setClearAlpha.apply(background, arguments);\r\n    };\r\n\r\n    this.clear = function (color, depth, stencil) {\r\n      let bits = 0;\r\n      if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\r\n      if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\r\n      if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n      _gl.clear(bits);\r\n    };\r\n\r\n    this.clearColor = function () {\r\n      this.clear(true, false, false);\r\n    };\r\n\r\n    this.clearDepth = function () {\r\n      this.clear(false, true, false);\r\n    };\r\n\r\n    this.clearStencil = function () {\r\n      this.clear(false, false, true);\r\n    }; //\r\n\r\n    this.dispose = function () {\r\n      _canvas.removeEventListener('webglcontextlost', onContextLost, false);\r\n\r\n      _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\r\n\r\n      renderLists.dispose();\r\n      renderStates.dispose();\r\n      properties.dispose();\r\n      cubemaps.dispose();\r\n      objects.dispose();\r\n      bindingStates.dispose();\r\n      xr.dispose();\r\n      xr.removeEventListener('sessionstart', onXRSessionStart);\r\n      xr.removeEventListener('sessionend', onXRSessionEnd);\r\n\r\n      if (_transmissionRenderTarget) {\r\n        _transmissionRenderTarget.dispose();\r\n\r\n        _transmissionRenderTarget = null;\r\n      }\r\n\r\n      animation.stop();\r\n    }; // Events\r\n\r\n    function onContextLost(event) {\r\n      event.preventDefault();\r\n      console.log('THREE.WebGLRenderer: Context Lost.');\r\n      _isContextLost = true;\r\n    }\r\n\r\n    function onContextRestore() {\r\n      /* event */\r\n      console.log('THREE.WebGLRenderer: Context Restored.');\r\n      _isContextLost = false;\r\n      const infoAutoReset = info.autoReset;\r\n      const shadowMapEnabled = shadowMap.enabled;\r\n      const shadowMapAutoUpdate = shadowMap.autoUpdate;\r\n      const shadowMapNeedsUpdate = shadowMap.needsUpdate;\r\n      const shadowMapType = shadowMap.type;\r\n      initGLContext();\r\n      info.autoReset = infoAutoReset;\r\n      shadowMap.enabled = shadowMapEnabled;\r\n      shadowMap.autoUpdate = shadowMapAutoUpdate;\r\n      shadowMap.needsUpdate = shadowMapNeedsUpdate;\r\n      shadowMap.type = shadowMapType;\r\n    }\r\n\r\n    function onMaterialDispose(event) {\r\n      const material = event.target;\r\n      material.removeEventListener('dispose', onMaterialDispose);\r\n      deallocateMaterial(material);\r\n    } // Buffer deallocation\r\n\r\n    function deallocateMaterial(material) {\r\n      releaseMaterialProgramReferences(material);\r\n      properties.remove(material);\r\n    }\r\n\r\n    function releaseMaterialProgramReferences(material) {\r\n      const programs = properties.get(material).programs;\r\n\r\n      if (programs !== undefined) {\r\n        programs.forEach(function (program) {\r\n          programCache.releaseProgram(program);\r\n        });\r\n      }\r\n    } // Buffer rendering\r\n\r\n    function renderObjectImmediate(object, program) {\r\n      object.render(function (object) {\r\n        _this.renderBufferImmediate(object, program);\r\n      });\r\n    }\r\n\r\n    this.renderBufferImmediate = function (object, program) {\r\n      bindingStates.initAttributes();\r\n      const buffers = properties.get(object);\r\n      if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\r\n      if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\r\n      if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\r\n      if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\r\n      const programAttributes = program.getAttributes();\r\n\r\n      if (object.hasPositions) {\r\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\r\n\r\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\r\n\r\n        bindingStates.enableAttribute(programAttributes.position);\r\n\r\n        _gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\r\n      }\r\n\r\n      if (object.hasNormals) {\r\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\r\n\r\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\r\n\r\n        bindingStates.enableAttribute(programAttributes.normal);\r\n\r\n        _gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\r\n      }\r\n\r\n      if (object.hasUvs) {\r\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\r\n\r\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\r\n\r\n        bindingStates.enableAttribute(programAttributes.uv);\r\n\r\n        _gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\r\n      }\r\n\r\n      if (object.hasColors) {\r\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\r\n\r\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\r\n\r\n        bindingStates.enableAttribute(programAttributes.color);\r\n\r\n        _gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\r\n      }\r\n\r\n      bindingStates.disableUnusedAttributes();\r\n\r\n      _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\r\n\r\n      object.count = 0;\r\n    };\r\n\r\n    this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\r\n      if (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\r\n\r\n      const frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\r\n      const program = setProgram(camera, scene, material, object);\r\n      state.setMaterial(material, frontFaceCW); //\r\n\r\n      let index = geometry.index;\r\n      const position = geometry.attributes.position; //\r\n\r\n      if (index === null) {\r\n        if (position === undefined || position.count === 0) return;\r\n      } else if (index.count === 0) {\r\n        return;\r\n      } //\r\n\r\n      let rangeFactor = 1;\r\n\r\n      if (material.wireframe === true) {\r\n        index = geometries.getWireframeAttribute(geometry);\r\n        rangeFactor = 2;\r\n      }\r\n\r\n      if (material.morphTargets || material.morphNormals) {\r\n        morphtargets.update(object, geometry, material, program);\r\n      }\r\n\r\n      bindingStates.setup(object, material, program, geometry, index);\r\n      let attribute;\r\n      let renderer = bufferRenderer;\r\n\r\n      if (index !== null) {\r\n        attribute = attributes.get(index);\r\n        renderer = indexedBufferRenderer;\r\n        renderer.setIndex(attribute);\r\n      } //\r\n\r\n      const dataCount = index !== null ? index.count : position.count;\r\n      const rangeStart = geometry.drawRange.start * rangeFactor;\r\n      const rangeCount = geometry.drawRange.count * rangeFactor;\r\n      const groupStart = group !== null ? group.start * rangeFactor : 0;\r\n      const groupCount = group !== null ? group.count * rangeFactor : Infinity;\r\n      const drawStart = Math.max(rangeStart, groupStart);\r\n      const drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\r\n      const drawCount = Math.max(0, drawEnd - drawStart + 1);\r\n      if (drawCount === 0) return; //\r\n\r\n      if (object.isMesh) {\r\n        if (material.wireframe === true) {\r\n          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\r\n          renderer.setMode(_gl.LINES);\r\n        } else {\r\n          renderer.setMode(_gl.TRIANGLES);\r\n        }\r\n      } else if (object.isLine) {\r\n        let lineWidth = material.linewidth;\r\n        if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\r\n\r\n        state.setLineWidth(lineWidth * getTargetPixelRatio());\r\n\r\n        if (object.isLineSegments) {\r\n          renderer.setMode(_gl.LINES);\r\n        } else if (object.isLineLoop) {\r\n          renderer.setMode(_gl.LINE_LOOP);\r\n        } else {\r\n          renderer.setMode(_gl.LINE_STRIP);\r\n        }\r\n      } else if (object.isPoints) {\r\n        renderer.setMode(_gl.POINTS);\r\n      } else if (object.isSprite) {\r\n        renderer.setMode(_gl.TRIANGLES);\r\n      }\r\n\r\n      if (object.isInstancedMesh) {\r\n        renderer.renderInstances(drawStart, drawCount, object.count);\r\n      } else if (geometry.isInstancedBufferGeometry) {\r\n        const instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\r\n        renderer.renderInstances(drawStart, drawCount, instanceCount);\r\n      } else {\r\n        renderer.render(drawStart, drawCount);\r\n      }\r\n    }; // Compile\r\n\r\n    this.compile = function (scene, camera) {\r\n      currentRenderState = renderStates.get(scene);\r\n      currentRenderState.init();\r\n      scene.traverseVisible(function (object) {\r\n        if (object.isLight && object.layers.test(camera.layers)) {\r\n          currentRenderState.pushLight(object);\r\n\r\n          if (object.castShadow) {\r\n            currentRenderState.pushShadow(object);\r\n          }\r\n        }\r\n      });\r\n      currentRenderState.setupLights();\r\n      scene.traverse(function (object) {\r\n        const material = object.material;\r\n\r\n        if (material) {\r\n          if (Array.isArray(material)) {\r\n            for (let i = 0; i < material.length; i++) {\r\n              const material2 = material[i];\r\n              getProgram(material2, scene, object);\r\n            }\r\n          } else {\r\n            getProgram(material, scene, object);\r\n          }\r\n        }\r\n      });\r\n    }; // Animation Loop\r\n\r\n    let onAnimationFrameCallback = null;\r\n\r\n    function onAnimationFrame(time) {\r\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time);\r\n    }\r\n\r\n    function onXRSessionStart() {\r\n      animation.stop();\r\n    }\r\n\r\n    function onXRSessionEnd() {\r\n      animation.start();\r\n    }\r\n\r\n    const animation = new WebGLAnimation();\r\n    animation.setAnimationLoop(onAnimationFrame);\r\n    if (typeof window !== 'undefined') animation.setContext(window);\r\n\r\n    this.setAnimationLoop = function (callback) {\r\n      onAnimationFrameCallback = callback;\r\n      xr.setAnimationLoop(callback);\r\n      callback === null ? animation.stop() : animation.start();\r\n    };\r\n\r\n    xr.addEventListener('sessionstart', onXRSessionStart);\r\n    xr.addEventListener('sessionend', onXRSessionEnd); // Rendering\r\n\r\n    this.render = function (scene, camera) {\r\n      if (camera !== undefined && camera.isCamera !== true) {\r\n        console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\r\n        return;\r\n      }\r\n\r\n      if (_isContextLost === true) return; // update scene graph\r\n\r\n      if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\r\n\r\n      if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n      if (xr.enabled === true && xr.isPresenting === true) {\r\n        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera);\r\n        camera = xr.getCamera(); // use XR camera for rendering\r\n      } //\r\n\r\n      if (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, _currentRenderTarget);\r\n      currentRenderState = renderStates.get(scene, renderStateStack.length);\r\n      currentRenderState.init();\r\n      renderStateStack.push(currentRenderState);\r\n\r\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n\r\n      _frustum.setFromProjectionMatrix(_projScreenMatrix);\r\n\r\n      _localClippingEnabled = this.localClippingEnabled;\r\n      _clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\r\n      currentRenderList = renderLists.get(scene, renderListStack.length);\r\n      currentRenderList.init();\r\n      renderListStack.push(currentRenderList);\r\n      projectObject(scene, camera, 0, _this.sortObjects);\r\n      currentRenderList.finish();\r\n\r\n      if (_this.sortObjects === true) {\r\n        currentRenderList.sort(_opaqueSort, _transparentSort);\r\n      } //\r\n\r\n      if (_clippingEnabled === true) clipping.beginShadows();\r\n      const shadowsArray = currentRenderState.state.shadowsArray;\r\n      shadowMap.render(shadowsArray, scene, camera);\r\n      currentRenderState.setupLights();\r\n      currentRenderState.setupLightsView(camera);\r\n      if (_clippingEnabled === true) clipping.endShadows(); //\r\n\r\n      if (this.info.autoReset === true) this.info.reset(); //\r\n\r\n      background.render(currentRenderList, scene); // render scene\r\n\r\n      const opaqueObjects = currentRenderList.opaque;\r\n      const transmissiveObjects = currentRenderList.transmissive;\r\n      const transparentObjects = currentRenderList.transparent;\r\n      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\r\n      if (transmissiveObjects.length > 0)\r\n        renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera);\r\n      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\r\n\r\n      if (_currentRenderTarget !== null) {\r\n        // Generate mipmap if we're using any kind of mipmap filtering\r\n        textures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\r\n\r\n        textures.updateMultisampleRenderTarget(_currentRenderTarget);\r\n      } //\r\n\r\n      if (scene.isScene === true) scene.onAfterRender(_this, scene, camera); // Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n      state.buffers.depth.setTest(true);\r\n      state.buffers.depth.setMask(true);\r\n      state.buffers.color.setMask(true);\r\n      state.setPolygonOffset(false); // _gl.finish();\r\n\r\n      bindingStates.resetDefaultState();\r\n      _currentMaterialId = -1;\r\n      _currentCamera = null;\r\n      renderStateStack.pop();\r\n\r\n      if (renderStateStack.length > 0) {\r\n        currentRenderState = renderStateStack[renderStateStack.length - 1];\r\n      } else {\r\n        currentRenderState = null;\r\n      }\r\n\r\n      renderListStack.pop();\r\n\r\n      if (renderListStack.length > 0) {\r\n        currentRenderList = renderListStack[renderListStack.length - 1];\r\n      } else {\r\n        currentRenderList = null;\r\n      }\r\n    };\r\n\r\n    function projectObject(object, camera, groupOrder, sortObjects) {\r\n      if (object.visible === false) return;\r\n      const visible = object.layers.test(camera.layers);\r\n\r\n      if (visible) {\r\n        if (object.isGroup) {\r\n          groupOrder = object.renderOrder;\r\n        } else if (object.isLOD) {\r\n          if (object.autoUpdate === true) object.update(camera);\r\n        } else if (object.isLight) {\r\n          currentRenderState.pushLight(object);\r\n\r\n          if (object.castShadow) {\r\n            currentRenderState.pushShadow(object);\r\n          }\r\n        } else if (object.isSprite) {\r\n          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\r\n            if (sortObjects) {\r\n              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\r\n            }\r\n\r\n            const geometry = objects.update(object);\r\n            const material = object.material;\r\n\r\n            if (material.visible) {\r\n              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\r\n            }\r\n          }\r\n        } else if (object.isImmediateRenderObject) {\r\n          if (sortObjects) {\r\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\r\n          }\r\n\r\n          currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\r\n        } else if (object.isMesh || object.isLine || object.isPoints) {\r\n          if (object.isSkinnedMesh) {\r\n            // update skeleton only once in a frame\r\n            if (object.skeleton.frame !== info.render.frame) {\r\n              object.skeleton.update();\r\n              object.skeleton.frame = info.render.frame;\r\n            }\r\n          }\r\n\r\n          if (!object.frustumCulled || _frustum.intersectsObject(object)) {\r\n            if (sortObjects) {\r\n              _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\r\n            }\r\n\r\n            const geometry = objects.update(object);\r\n            const material = object.material;\r\n\r\n            if (Array.isArray(material)) {\r\n              const groups = geometry.groups;\r\n\r\n              for (let i = 0, l = groups.length; i < l; i++) {\r\n                const group = groups[i];\r\n                const groupMaterial = material[group.materialIndex];\r\n\r\n                if (groupMaterial && groupMaterial.visible) {\r\n                  currentRenderList.push(\r\n                    object,\r\n                    geometry,\r\n                    groupMaterial,\r\n                    groupOrder,\r\n                    _vector3.z,\r\n                    group,\r\n                  );\r\n                }\r\n              }\r\n            } else if (material.visible) {\r\n              currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const children = object.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        projectObject(children[i], camera, groupOrder, sortObjects);\r\n      }\r\n    }\r\n\r\n    function renderTransmissiveObjects(opaqueObjects, transmissiveObjects, scene, camera) {\r\n      if (_transmissionRenderTarget === null) {\r\n        _transmissionRenderTarget = new WebGLRenderTarget(1024, 1024, {\r\n          generateMipmaps: true,\r\n          minFilter: LinearMipmapLinearFilter,\r\n          magFilter: NearestFilter,\r\n          wrapS: ClampToEdgeWrapping,\r\n          wrapT: ClampToEdgeWrapping,\r\n        });\r\n      }\r\n\r\n      const currentRenderTarget = _this.getRenderTarget();\r\n\r\n      _this.setRenderTarget(_transmissionRenderTarget);\r\n\r\n      _this.clear();\r\n\r\n      renderObjects(opaqueObjects, scene, camera);\r\n      textures.updateRenderTargetMipmap(_transmissionRenderTarget);\r\n\r\n      _this.setRenderTarget(currentRenderTarget);\r\n\r\n      renderObjects(transmissiveObjects, scene, camera);\r\n    }\r\n\r\n    function renderObjects(renderList, scene, camera) {\r\n      const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\r\n\r\n      for (let i = 0, l = renderList.length; i < l; i++) {\r\n        const renderItem = renderList[i];\r\n        const object = renderItem.object;\r\n        const geometry = renderItem.geometry;\r\n        const material = overrideMaterial === null ? renderItem.material : overrideMaterial;\r\n        const group = renderItem.group;\r\n\r\n        if (camera.isArrayCamera) {\r\n          const cameras = camera.cameras;\r\n\r\n          for (let j = 0, jl = cameras.length; j < jl; j++) {\r\n            const camera2 = cameras[j];\r\n\r\n            if (object.layers.test(camera2.layers)) {\r\n              state.viewport(_currentViewport.copy(camera2.viewport));\r\n              currentRenderState.setupLightsView(camera2);\r\n              renderObject(object, scene, camera2, geometry, material, group);\r\n            }\r\n          }\r\n        } else {\r\n          renderObject(object, scene, camera, geometry, material, group);\r\n        }\r\n      }\r\n    }\r\n\r\n    function renderObject(object, scene, camera, geometry, material, group) {\r\n      object.onBeforeRender(_this, scene, camera, geometry, material, group);\r\n      object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\r\n      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\r\n\r\n      if (object.isImmediateRenderObject) {\r\n        const program = setProgram(camera, scene, material, object);\r\n        state.setMaterial(material);\r\n        bindingStates.reset();\r\n        renderObjectImmediate(object, program);\r\n      } else {\r\n        _this.renderBufferDirect(camera, scene, geometry, material, object, group);\r\n      }\r\n\r\n      object.onAfterRender(_this, scene, camera, geometry, material, group);\r\n    }\r\n\r\n    function getProgram(material, scene, object) {\r\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\r\n\r\n      const materialProperties = properties.get(material);\r\n      const lights = currentRenderState.state.lights;\r\n      const shadowsArray = currentRenderState.state.shadowsArray;\r\n      const lightsStateVersion = lights.state.version;\r\n      const parameters = programCache.getParameters(\r\n        material,\r\n        lights.state,\r\n        shadowsArray,\r\n        scene,\r\n        object,\r\n      );\r\n      const programCacheKey = programCache.getProgramCacheKey(parameters);\r\n      let programs = materialProperties.programs; // always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\r\n\r\n      materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n      materialProperties.fog = scene.fog;\r\n      materialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\r\n\r\n      if (programs === undefined) {\r\n        // new material\r\n        material.addEventListener('dispose', onMaterialDispose);\r\n        programs = new Map();\r\n        materialProperties.programs = programs;\r\n      }\r\n\r\n      let program = programs.get(programCacheKey);\r\n\r\n      if (program !== undefined) {\r\n        // early out if program and light state is identical\r\n        if (\r\n          materialProperties.currentProgram === program &&\r\n          materialProperties.lightsStateVersion === lightsStateVersion\r\n        ) {\r\n          updateCommonMaterialProperties(material, parameters);\r\n          return program;\r\n        }\r\n      } else {\r\n        parameters.uniforms = programCache.getUniforms(material);\r\n        material.onBuild(parameters, _this);\r\n        material.onBeforeCompile(parameters, _this);\r\n        program = programCache.acquireProgram(parameters, programCacheKey);\r\n        programs.set(programCacheKey, program);\r\n        materialProperties.uniforms = parameters.uniforms;\r\n      }\r\n\r\n      const uniforms = materialProperties.uniforms;\r\n\r\n      if (\r\n        (!material.isShaderMaterial && !material.isRawShaderMaterial) ||\r\n        material.clipping === true\r\n      ) {\r\n        uniforms.clippingPlanes = clipping.uniform;\r\n      }\r\n\r\n      updateCommonMaterialProperties(material, parameters); // store the light setup it was created for\r\n\r\n      materialProperties.needsLights = materialNeedsLights(material);\r\n      materialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n      if (materialProperties.needsLights) {\r\n        // wire up the material to this renderer's lighting state\r\n        uniforms.ambientLightColor.value = lights.state.ambient;\r\n        uniforms.lightProbe.value = lights.state.probe;\r\n        uniforms.directionalLights.value = lights.state.directional;\r\n        uniforms.directionalLightShadows.value = lights.state.directionalShadow;\r\n        uniforms.spotLights.value = lights.state.spot;\r\n        uniforms.spotLightShadows.value = lights.state.spotShadow;\r\n        uniforms.rectAreaLights.value = lights.state.rectArea;\r\n        uniforms.ltc_1.value = lights.state.rectAreaLTC1;\r\n        uniforms.ltc_2.value = lights.state.rectAreaLTC2;\r\n        uniforms.pointLights.value = lights.state.point;\r\n        uniforms.pointLightShadows.value = lights.state.pointShadow;\r\n        uniforms.hemisphereLights.value = lights.state.hemi;\r\n        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n        uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n        uniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\r\n        uniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\r\n      }\r\n\r\n      const progUniforms = program.getUniforms();\r\n      const uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\r\n      materialProperties.currentProgram = program;\r\n      materialProperties.uniformsList = uniformsList;\r\n      return program;\r\n    }\r\n\r\n    function updateCommonMaterialProperties(material, parameters) {\r\n      const materialProperties = properties.get(material);\r\n      materialProperties.outputEncoding = parameters.outputEncoding;\r\n      materialProperties.instancing = parameters.instancing;\r\n      materialProperties.skinning = parameters.skinning;\r\n      materialProperties.numClippingPlanes = parameters.numClippingPlanes;\r\n      materialProperties.numIntersection = parameters.numClipIntersection;\r\n      materialProperties.vertexAlphas = parameters.vertexAlphas;\r\n    }\r\n\r\n    function setProgram(camera, scene, material, object) {\r\n      if (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\r\n\r\n      textures.resetTextureUnits();\r\n      const fog = scene.fog;\r\n      const environment = material.isMeshStandardMaterial ? scene.environment : null;\r\n      const encoding =\r\n        _currentRenderTarget === null\r\n          ? _this.outputEncoding\r\n          : _currentRenderTarget.texture.encoding;\r\n      const envMap = cubemaps.get(material.envMap || environment);\r\n      const vertexAlphas =\r\n        material.vertexColors === true &&\r\n        object.geometry &&\r\n        object.geometry.attributes.color &&\r\n        object.geometry.attributes.color.itemSize === 4;\r\n      const materialProperties = properties.get(material);\r\n      const lights = currentRenderState.state.lights;\r\n\r\n      if (_clippingEnabled === true) {\r\n        if (_localClippingEnabled === true || camera !== _currentCamera) {\r\n          const useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\r\n          // object instead of the material, once it becomes feasible\r\n          // (#8465, #8379)\r\n\r\n          clipping.setState(material, camera, useCache);\r\n        }\r\n      } //\r\n\r\n      let needsProgramChange = false;\r\n\r\n      if (material.version === materialProperties.__version) {\r\n        if (\r\n          materialProperties.needsLights &&\r\n          materialProperties.lightsStateVersion !== lights.state.version\r\n        ) {\r\n          needsProgramChange = true;\r\n        } else if (materialProperties.outputEncoding !== encoding) {\r\n          needsProgramChange = true;\r\n        } else if (object.isInstancedMesh && materialProperties.instancing === false) {\r\n          needsProgramChange = true;\r\n        } else if (!object.isInstancedMesh && materialProperties.instancing === true) {\r\n          needsProgramChange = true;\r\n        } else if (object.isSkinnedMesh && materialProperties.skinning === false) {\r\n          needsProgramChange = true;\r\n        } else if (!object.isSkinnedMesh && materialProperties.skinning === true) {\r\n          needsProgramChange = true;\r\n        } else if (materialProperties.envMap !== envMap) {\r\n          needsProgramChange = true;\r\n        } else if (material.fog && materialProperties.fog !== fog) {\r\n          needsProgramChange = true;\r\n        } else if (\r\n          materialProperties.numClippingPlanes !== undefined &&\r\n          (materialProperties.numClippingPlanes !== clipping.numPlanes ||\r\n            materialProperties.numIntersection !== clipping.numIntersection)\r\n        ) {\r\n          needsProgramChange = true;\r\n        } else if (materialProperties.vertexAlphas !== vertexAlphas) {\r\n          needsProgramChange = true;\r\n        }\r\n      } else {\r\n        needsProgramChange = true;\r\n        materialProperties.__version = material.version;\r\n      } //\r\n\r\n      let program = materialProperties.currentProgram;\r\n\r\n      if (needsProgramChange === true) {\r\n        program = getProgram(material, scene, object);\r\n      }\r\n\r\n      let refreshProgram = false;\r\n      let refreshMaterial = false;\r\n      let refreshLights = false;\r\n      const p_uniforms = program.getUniforms(),\r\n        m_uniforms = materialProperties.uniforms;\r\n\r\n      if (state.useProgram(program.program)) {\r\n        refreshProgram = true;\r\n        refreshMaterial = true;\r\n        refreshLights = true;\r\n      }\r\n\r\n      if (material.id !== _currentMaterialId) {\r\n        _currentMaterialId = material.id;\r\n        refreshMaterial = true;\r\n      }\r\n\r\n      if (refreshProgram || _currentCamera !== camera) {\r\n        p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\r\n\r\n        if (capabilities.logarithmicDepthBuffer) {\r\n          p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\r\n        }\r\n\r\n        if (_currentCamera !== camera) {\r\n          _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\r\n          // now, in case this material supports lights - or later, when\r\n          // the next material that does gets activated:\r\n\r\n          refreshMaterial = true; // set to true on material change\r\n\r\n          refreshLights = true; // remains set until update done\r\n        } // load material specific uniforms\r\n        // (shader material also gets them for the sake of genericity)\r\n\r\n        if (\r\n          material.isShaderMaterial ||\r\n          material.isMeshPhongMaterial ||\r\n          material.isMeshToonMaterial ||\r\n          material.isMeshStandardMaterial ||\r\n          material.envMap\r\n        ) {\r\n          const uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n          if (uCamPos !== undefined) {\r\n            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\r\n          }\r\n        }\r\n\r\n        if (\r\n          material.isMeshPhongMaterial ||\r\n          material.isMeshToonMaterial ||\r\n          material.isMeshLambertMaterial ||\r\n          material.isMeshBasicMaterial ||\r\n          material.isMeshStandardMaterial ||\r\n          material.isShaderMaterial\r\n        ) {\r\n          p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\r\n        }\r\n\r\n        if (\r\n          material.isMeshPhongMaterial ||\r\n          material.isMeshToonMaterial ||\r\n          material.isMeshLambertMaterial ||\r\n          material.isMeshBasicMaterial ||\r\n          material.isMeshStandardMaterial ||\r\n          material.isShaderMaterial ||\r\n          material.isShadowMaterial ||\r\n          object.isSkinnedMesh\r\n        ) {\r\n          p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\r\n        }\r\n      } // skinning uniforms must be set even if material didn't change\r\n      // auto-setting of texture unit for bone texture must go before other textures\r\n      // otherwise textures used for skinning can take over texture units reserved for other material textures\r\n\r\n      if (object.isSkinnedMesh) {\r\n        p_uniforms.setOptional(_gl, object, 'bindMatrix');\r\n        p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\r\n        const skeleton = object.skeleton;\r\n\r\n        if (skeleton) {\r\n          if (capabilities.floatVertexTextures) {\r\n            if (skeleton.boneTexture === null) skeleton.computeBoneTexture();\r\n            p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\r\n            p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\r\n          } else {\r\n            p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\r\n          }\r\n        }\r\n      }\r\n\r\n      if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\r\n        materialProperties.receiveShadow = object.receiveShadow;\r\n        p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\r\n      }\r\n\r\n      if (refreshMaterial) {\r\n        p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\r\n\r\n        if (materialProperties.needsLights) {\r\n          // the current material requires lighting info\r\n          // note: all lighting uniforms are always set correctly\r\n          // they simply reference the renderer's state for their\r\n          // values\r\n          //\r\n          // use the current material's .needsUpdate flags to set\r\n          // the GL state when required\r\n          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\r\n        } // refresh uniforms common to several materials\r\n\r\n        if (fog && material.fog) {\r\n          materials.refreshFogUniforms(m_uniforms, fog);\r\n        }\r\n\r\n        materials.refreshMaterialUniforms(\r\n          m_uniforms,\r\n          material,\r\n          _pixelRatio,\r\n          _height,\r\n          _transmissionRenderTarget,\r\n        );\r\n        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\r\n      }\r\n\r\n      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\r\n        WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\r\n        material.uniformsNeedUpdate = false;\r\n      }\r\n\r\n      if (material.isSpriteMaterial) {\r\n        p_uniforms.setValue(_gl, 'center', object.center);\r\n      } // common matrices\r\n\r\n      p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\r\n      p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\r\n      p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\r\n      return program;\r\n    } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\r\n      uniforms.ambientLightColor.needsUpdate = value;\r\n      uniforms.lightProbe.needsUpdate = value;\r\n      uniforms.directionalLights.needsUpdate = value;\r\n      uniforms.directionalLightShadows.needsUpdate = value;\r\n      uniforms.pointLights.needsUpdate = value;\r\n      uniforms.pointLightShadows.needsUpdate = value;\r\n      uniforms.spotLights.needsUpdate = value;\r\n      uniforms.spotLightShadows.needsUpdate = value;\r\n      uniforms.rectAreaLights.needsUpdate = value;\r\n      uniforms.hemisphereLights.needsUpdate = value;\r\n    }\r\n\r\n    function materialNeedsLights(material) {\r\n      return (\r\n        material.isMeshLambertMaterial ||\r\n        material.isMeshToonMaterial ||\r\n        material.isMeshPhongMaterial ||\r\n        material.isMeshStandardMaterial ||\r\n        material.isShadowMaterial ||\r\n        (material.isShaderMaterial && material.lights === true)\r\n      );\r\n    }\r\n\r\n    this.getActiveCubeFace = function () {\r\n      return _currentActiveCubeFace;\r\n    };\r\n\r\n    this.getActiveMipmapLevel = function () {\r\n      return _currentActiveMipmapLevel;\r\n    };\r\n\r\n    this.getRenderTarget = function () {\r\n      return _currentRenderTarget;\r\n    };\r\n\r\n    this.setRenderTarget = function (renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {\r\n      _currentRenderTarget = renderTarget;\r\n      _currentActiveCubeFace = activeCubeFace;\r\n      _currentActiveMipmapLevel = activeMipmapLevel;\r\n\r\n      if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\r\n        textures.setupRenderTarget(renderTarget);\r\n      }\r\n\r\n      let framebuffer = null;\r\n      let isCube = false;\r\n      let isRenderTarget3D = false;\r\n\r\n      if (renderTarget) {\r\n        const texture = renderTarget.texture;\r\n\r\n        if (texture.isDataTexture3D || texture.isDataTexture2DArray) {\r\n          isRenderTarget3D = true;\r\n        }\r\n\r\n        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\r\n\r\n        if (renderTarget.isWebGLCubeRenderTarget) {\r\n          framebuffer = __webglFramebuffer[activeCubeFace];\r\n          isCube = true;\r\n        } else if (renderTarget.isWebGLMultisampleRenderTarget) {\r\n          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\r\n        } else {\r\n          framebuffer = __webglFramebuffer;\r\n        }\r\n\r\n        _currentViewport.copy(renderTarget.viewport);\r\n\r\n        _currentScissor.copy(renderTarget.scissor);\r\n\r\n        _currentScissorTest = renderTarget.scissorTest;\r\n      } else {\r\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\r\n\r\n        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\r\n\r\n        _currentScissorTest = _scissorTest;\r\n      }\r\n\r\n      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\r\n\r\n      if (framebufferBound && capabilities.drawBuffers) {\r\n        let needsUpdate = false;\r\n\r\n        if (renderTarget) {\r\n          if (renderTarget.isWebGLMultipleRenderTargets) {\r\n            const textures = renderTarget.texture;\r\n\r\n            if (\r\n              _currentDrawBuffers.length !== textures.length ||\r\n              _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0\r\n            ) {\r\n              for (let i = 0, il = textures.length; i < il; i++) {\r\n                _currentDrawBuffers[i] = _gl.COLOR_ATTACHMENT0 + i;\r\n              }\r\n\r\n              _currentDrawBuffers.length = textures.length;\r\n              needsUpdate = true;\r\n            }\r\n          } else {\r\n            if (\r\n              _currentDrawBuffers.length !== 1 ||\r\n              _currentDrawBuffers[0] !== _gl.COLOR_ATTACHMENT0\r\n            ) {\r\n              _currentDrawBuffers[0] = _gl.COLOR_ATTACHMENT0;\r\n              _currentDrawBuffers.length = 1;\r\n              needsUpdate = true;\r\n            }\r\n          }\r\n        } else {\r\n          if (_currentDrawBuffers.length !== 1 || _currentDrawBuffers[0] !== _gl.BACK) {\r\n            _currentDrawBuffers[0] = _gl.BACK;\r\n            _currentDrawBuffers.length = 1;\r\n            needsUpdate = true;\r\n          }\r\n        }\r\n\r\n        if (needsUpdate) {\r\n          if (capabilities.isWebGL2) {\r\n            _gl.drawBuffers(_currentDrawBuffers);\r\n          } else {\r\n            extensions.get('WEBGL_draw_buffers').drawBuffersWEBGL(_currentDrawBuffers);\r\n          }\r\n        }\r\n      }\r\n\r\n      state.viewport(_currentViewport);\r\n      state.scissor(_currentScissor);\r\n      state.setScissorTest(_currentScissorTest);\r\n\r\n      if (isCube) {\r\n        const textureProperties = properties.get(renderTarget.texture);\r\n\r\n        _gl.framebufferTexture2D(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.COLOR_ATTACHMENT0,\r\n          _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace,\r\n          textureProperties.__webglTexture,\r\n          activeMipmapLevel,\r\n        );\r\n      } else if (isRenderTarget3D) {\r\n        const textureProperties = properties.get(renderTarget.texture);\r\n        const layer = activeCubeFace || 0;\r\n\r\n        _gl.framebufferTextureLayer(\r\n          _gl.FRAMEBUFFER,\r\n          _gl.COLOR_ATTACHMENT0,\r\n          textureProperties.__webglTexture,\r\n          activeMipmapLevel || 0,\r\n          layer,\r\n        );\r\n      }\r\n    };\r\n\r\n    this.readRenderTargetPixels = function (\r\n      renderTarget,\r\n      x,\r\n      y,\r\n      width,\r\n      height,\r\n      buffer,\r\n      activeCubeFaceIndex,\r\n    ) {\r\n      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\r\n        console.error(\r\n          'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.',\r\n        );\r\n        return;\r\n      }\r\n\r\n      let framebuffer = properties.get(renderTarget).__webglFramebuffer;\r\n\r\n      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\r\n        framebuffer = framebuffer[activeCubeFaceIndex];\r\n      }\r\n\r\n      if (framebuffer) {\r\n        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\r\n\r\n        try {\r\n          const texture = renderTarget.texture;\r\n          const textureFormat = texture.format;\r\n          const textureType = texture.type;\r\n\r\n          if (\r\n            textureFormat !== RGBAFormat &&\r\n            utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)\r\n          ) {\r\n            console.error(\r\n              'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.',\r\n            );\r\n            return;\r\n          }\r\n\r\n          const halfFloatSupportedByExt =\r\n            textureType === HalfFloatType &&\r\n            (extensions.has('EXT_color_buffer_half_float') ||\r\n              (capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float')));\r\n\r\n          if (\r\n            textureType !== UnsignedByteType &&\r\n            utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)\r\n            !(\r\n              textureType === FloatType &&\r\n              (capabilities.isWebGL2 ||\r\n                extensions.has('OES_texture_float') ||\r\n                extensions.has('WEBGL_color_buffer_float'))\r\n            ) && // Chrome Mac >= 52 and Firefox\r\n            !halfFloatSupportedByExt\r\n          ) {\r\n            console.error(\r\n              'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.',\r\n            );\r\n            return;\r\n          }\r\n\r\n          if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\r\n            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n            if (\r\n              x >= 0 &&\r\n              x <= renderTarget.width - width &&\r\n              y >= 0 &&\r\n              y <= renderTarget.height - height\r\n            ) {\r\n              _gl.readPixels(\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                utils.convert(textureFormat),\r\n                utils.convert(textureType),\r\n                buffer,\r\n              );\r\n            }\r\n          } else {\r\n            console.error(\r\n              'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.',\r\n            );\r\n          }\r\n        } finally {\r\n          // restore framebuffer of current render target if necessary\r\n          const framebuffer =\r\n            _currentRenderTarget !== null\r\n              ? properties.get(_currentRenderTarget).__webglFramebuffer\r\n              : null;\r\n          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.copyFramebufferToTexture = function (position, texture, level = 0) {\r\n      const levelScale = Math.pow(2, -level);\r\n      const width = Math.floor(texture.image.width * levelScale);\r\n      const height = Math.floor(texture.image.height * levelScale);\r\n      let glFormat = utils.convert(texture.format);\r\n\r\n      if (capabilities.isWebGL2) {\r\n        // Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\r\n        if (glFormat === _gl.RGB) glFormat = _gl.RGB8;\r\n        if (glFormat === _gl.RGBA) glFormat = _gl.RGBA8;\r\n      }\r\n\r\n      textures.setTexture2D(texture, 0);\r\n\r\n      _gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\r\n\r\n      state.unbindTexture();\r\n    };\r\n\r\n    this.copyTextureToTexture = function (position, srcTexture, dstTexture, level = 0) {\r\n      const width = srcTexture.image.width;\r\n      const height = srcTexture.image.height;\r\n      const glFormat = utils.convert(dstTexture.format);\r\n      const glType = utils.convert(dstTexture.type);\r\n      textures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\r\n      // parameters, make sure they are correct for the dstTexture\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\r\n\r\n      if (srcTexture.isDataTexture) {\r\n        _gl.texSubImage2D(\r\n          _gl.TEXTURE_2D,\r\n          level,\r\n          position.x,\r\n          position.y,\r\n          width,\r\n          height,\r\n          glFormat,\r\n          glType,\r\n          srcTexture.image.data,\r\n        );\r\n      } else {\r\n        if (srcTexture.isCompressedTexture) {\r\n          _gl.compressedTexSubImage2D(\r\n            _gl.TEXTURE_2D,\r\n            level,\r\n            position.x,\r\n            position.y,\r\n            srcTexture.mipmaps[0].width,\r\n            srcTexture.mipmaps[0].height,\r\n            glFormat,\r\n            srcTexture.mipmaps[0].data,\r\n          );\r\n        } else {\r\n          _gl.texSubImage2D(\r\n            _gl.TEXTURE_2D,\r\n            level,\r\n            position.x,\r\n            position.y,\r\n            glFormat,\r\n            glType,\r\n            srcTexture.image,\r\n          );\r\n        }\r\n      } // Generate mipmaps only when copying level 0\r\n\r\n      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);\r\n      state.unbindTexture();\r\n    };\r\n\r\n    this.copyTextureToTexture3D = function (\r\n      sourceBox,\r\n      position,\r\n      srcTexture,\r\n      dstTexture,\r\n      level = 0,\r\n    ) {\r\n      if (_this.isWebGL1Renderer) {\r\n        console.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\r\n        return;\r\n      }\r\n\r\n      const { width, height, data } = srcTexture.image;\r\n      const glFormat = utils.convert(dstTexture.format);\r\n      const glType = utils.convert(dstTexture.type);\r\n      let glTarget;\r\n\r\n      if (dstTexture.isDataTexture3D) {\r\n        textures.setTexture3D(dstTexture, 0);\r\n        glTarget = _gl.TEXTURE_3D;\r\n      } else if (dstTexture.isDataTexture2DArray) {\r\n        textures.setTexture2DArray(dstTexture, 0);\r\n        glTarget = _gl.TEXTURE_2D_ARRAY;\r\n      } else {\r\n        console.warn(\r\n          'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.',\r\n        );\r\n        return;\r\n      }\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);\r\n\r\n      const unpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);\r\n\r\n      const unpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);\r\n\r\n      const unpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);\r\n\r\n      const unpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);\r\n\r\n      const unpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, width);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, height);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, sourceBox.min.x);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, sourceBox.min.y);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, sourceBox.min.z);\r\n\r\n      _gl.texSubImage3D(\r\n        glTarget,\r\n        level,\r\n        position.x,\r\n        position.y,\r\n        position.z,\r\n        sourceBox.max.x - sourceBox.min.x + 1,\r\n        sourceBox.max.y - sourceBox.min.y + 1,\r\n        sourceBox.max.z - sourceBox.min.z + 1,\r\n        glFormat,\r\n        glType,\r\n        data,\r\n      );\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, unpackRowLen);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, unpackSkipPixels);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, unpackSkipRows);\r\n\r\n      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, unpackSkipImages); // Generate mipmaps only when copying level 0\r\n\r\n      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\r\n      state.unbindTexture();\r\n    };\r\n\r\n    this.initTexture = function (texture) {\r\n      textures.setTexture2D(texture, 0);\r\n      state.unbindTexture();\r\n    };\r\n\r\n    this.resetState = function () {\r\n      _currentActiveCubeFace = 0;\r\n      _currentActiveMipmapLevel = 0;\r\n      _currentRenderTarget = null;\r\n      state.reset();\r\n      bindingStates.reset();\r\n    };\r\n\r\n    if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\r\n      __THREE_DEVTOOLS__.dispatchEvent(\r\n        new CustomEvent('observe', {\r\n          detail: this,\r\n        }),\r\n      ); // eslint-disable-line no-undef\r\n    }\r\n  }\r\n\r\n  class WebGL1Renderer extends WebGLRenderer {}\r\n\r\n  WebGL1Renderer.prototype.isWebGL1Renderer = true;\r\n\r\n  class FogExp2 {\r\n    constructor(color, density = 0.00025) {\r\n      this.name = '';\r\n      this.color = new Color(color);\r\n      this.density = density;\r\n    }\r\n\r\n    clone() {\r\n      return new FogExp2(this.color, this.density);\r\n    }\r\n\r\n    toJSON() /* meta */\r\n    {\r\n      return {\r\n        type: 'FogExp2',\r\n        color: this.color.getHex(),\r\n        density: this.density,\r\n      };\r\n    }\r\n  }\r\n\r\n  FogExp2.prototype.isFogExp2 = true;\r\n\r\n  class Fog {\r\n    constructor(color, near = 1, far = 1000) {\r\n      this.name = '';\r\n      this.color = new Color(color);\r\n      this.near = near;\r\n      this.far = far;\r\n    }\r\n\r\n    clone() {\r\n      return new Fog(this.color, this.near, this.far);\r\n    }\r\n\r\n    toJSON() /* meta */\r\n    {\r\n      return {\r\n        type: 'Fog',\r\n        color: this.color.getHex(),\r\n        near: this.near,\r\n        far: this.far,\r\n      };\r\n    }\r\n  }\r\n\r\n  Fog.prototype.isFog = true;\r\n\r\n  class Scene extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this.type = 'Scene';\r\n      this.background = null;\r\n      this.environment = null;\r\n      this.fog = null;\r\n      this.overrideMaterial = null;\r\n      this.autoUpdate = true; // checked by the renderer\r\n\r\n      if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\r\n        __THREE_DEVTOOLS__.dispatchEvent(\r\n          new CustomEvent('observe', {\r\n            detail: this,\r\n          }),\r\n        ); // eslint-disable-line no-undef\r\n      }\r\n    }\r\n\r\n    copy(source, recursive) {\r\n      super.copy(source, recursive);\r\n      if (source.background !== null) this.background = source.background.clone();\r\n      if (source.environment !== null) this.environment = source.environment.clone();\r\n      if (source.fog !== null) this.fog = source.fog.clone();\r\n      if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\r\n      this.autoUpdate = source.autoUpdate;\r\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      if (this.background !== null) data.object.background = this.background.toJSON(meta);\r\n      if (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\r\n      if (this.fog !== null) data.object.fog = this.fog.toJSON();\r\n      return data;\r\n    }\r\n  }\r\n\r\n  Scene.prototype.isScene = true;\r\n\r\n  class InterleavedBuffer {\r\n    constructor(array, stride) {\r\n      this.array = array;\r\n      this.stride = stride;\r\n      this.count = array !== undefined ? array.length / stride : 0;\r\n      this.usage = StaticDrawUsage;\r\n      this.updateRange = {\r\n        offset: 0,\r\n        count: -1,\r\n      };\r\n      this.version = 0;\r\n      this.uuid = generateUUID();\r\n    }\r\n\r\n    onUploadCallback() {}\r\n\r\n    set needsUpdate(value) {\r\n      if (value === true) this.version++;\r\n    }\r\n\r\n    setUsage(value) {\r\n      this.usage = value;\r\n      return this;\r\n    }\r\n\r\n    copy(source) {\r\n      this.array = new source.array.constructor(source.array);\r\n      this.count = source.count;\r\n      this.stride = source.stride;\r\n      this.usage = source.usage;\r\n      return this;\r\n    }\r\n\r\n    copyAt(index1, attribute, index2) {\r\n      index1 *= this.stride;\r\n      index2 *= attribute.stride;\r\n\r\n      for (let i = 0, l = this.stride; i < l; i++) {\r\n        this.array[index1 + i] = attribute.array[index2 + i];\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    set(value, offset = 0) {\r\n      this.array.set(value, offset);\r\n      return this;\r\n    }\r\n\r\n    clone(data) {\r\n      if (data.arrayBuffers === undefined) {\r\n        data.arrayBuffers = {};\r\n      }\r\n\r\n      if (this.array.buffer._uuid === undefined) {\r\n        this.array.buffer._uuid = generateUUID();\r\n      }\r\n\r\n      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\r\n        data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\r\n      }\r\n\r\n      const array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\r\n      const ib = new this.constructor(array, this.stride);\r\n      ib.setUsage(this.usage);\r\n      return ib;\r\n    }\r\n\r\n    onUpload(callback) {\r\n      this.onUploadCallback = callback;\r\n      return this;\r\n    }\r\n\r\n    toJSON(data) {\r\n      if (data.arrayBuffers === undefined) {\r\n        data.arrayBuffers = {};\r\n      } // generate UUID for array buffer if necessary\r\n\r\n      if (this.array.buffer._uuid === undefined) {\r\n        this.array.buffer._uuid = generateUUID();\r\n      }\r\n\r\n      if (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\r\n        data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(\r\n          new Uint32Array(this.array.buffer),\r\n        );\r\n      } //\r\n\r\n      return {\r\n        uuid: this.uuid,\r\n        buffer: this.array.buffer._uuid,\r\n        type: this.array.constructor.name,\r\n        stride: this.stride,\r\n      };\r\n    }\r\n  }\r\n\r\n  InterleavedBuffer.prototype.isInterleavedBuffer = true;\r\n\r\n  const _vector$6 = /*@__PURE__*/ new Vector3();\r\n\r\n  class InterleavedBufferAttribute {\r\n    constructor(interleavedBuffer, itemSize, offset, normalized) {\r\n      this.name = '';\r\n      this.data = interleavedBuffer;\r\n      this.itemSize = itemSize;\r\n      this.offset = offset;\r\n      this.normalized = normalized === true;\r\n    }\r\n\r\n    get count() {\r\n      return this.data.count;\r\n    }\r\n\r\n    get array() {\r\n      return this.data.array;\r\n    }\r\n\r\n    set needsUpdate(value) {\r\n      this.data.needsUpdate = value;\r\n    }\r\n\r\n    applyMatrix4(m) {\r\n      for (let i = 0, l = this.data.count; i < l; i++) {\r\n        _vector$6.x = this.getX(i);\r\n        _vector$6.y = this.getY(i);\r\n        _vector$6.z = this.getZ(i);\r\n\r\n        _vector$6.applyMatrix4(m);\r\n\r\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    applyNormalMatrix(m) {\r\n      for (let i = 0, l = this.count; i < l; i++) {\r\n        _vector$6.x = this.getX(i);\r\n        _vector$6.y = this.getY(i);\r\n        _vector$6.z = this.getZ(i);\r\n\r\n        _vector$6.applyNormalMatrix(m);\r\n\r\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    transformDirection(m) {\r\n      for (let i = 0, l = this.count; i < l; i++) {\r\n        _vector$6.x = this.getX(i);\r\n        _vector$6.y = this.getY(i);\r\n        _vector$6.z = this.getZ(i);\r\n\r\n        _vector$6.transformDirection(m);\r\n\r\n        this.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setX(index, x) {\r\n      this.data.array[index * this.data.stride + this.offset] = x;\r\n      return this;\r\n    }\r\n\r\n    setY(index, y) {\r\n      this.data.array[index * this.data.stride + this.offset + 1] = y;\r\n      return this;\r\n    }\r\n\r\n    setZ(index, z) {\r\n      this.data.array[index * this.data.stride + this.offset + 2] = z;\r\n      return this;\r\n    }\r\n\r\n    setW(index, w) {\r\n      this.data.array[index * this.data.stride + this.offset + 3] = w;\r\n      return this;\r\n    }\r\n\r\n    getX(index) {\r\n      return this.data.array[index * this.data.stride + this.offset];\r\n    }\r\n\r\n    getY(index) {\r\n      return this.data.array[index * this.data.stride + this.offset + 1];\r\n    }\r\n\r\n    getZ(index) {\r\n      return this.data.array[index * this.data.stride + this.offset + 2];\r\n    }\r\n\r\n    getW(index) {\r\n      return this.data.array[index * this.data.stride + this.offset + 3];\r\n    }\r\n\r\n    setXY(index, x, y) {\r\n      index = index * this.data.stride + this.offset;\r\n      this.data.array[index + 0] = x;\r\n      this.data.array[index + 1] = y;\r\n      return this;\r\n    }\r\n\r\n    setXYZ(index, x, y, z) {\r\n      index = index * this.data.stride + this.offset;\r\n      this.data.array[index + 0] = x;\r\n      this.data.array[index + 1] = y;\r\n      this.data.array[index + 2] = z;\r\n      return this;\r\n    }\r\n\r\n    setXYZW(index, x, y, z, w) {\r\n      index = index * this.data.stride + this.offset;\r\n      this.data.array[index + 0] = x;\r\n      this.data.array[index + 1] = y;\r\n      this.data.array[index + 2] = z;\r\n      this.data.array[index + 3] = w;\r\n      return this;\r\n    }\r\n\r\n    clone(data) {\r\n      if (data === undefined) {\r\n        console.log(\r\n          'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.',\r\n        );\r\n        const array = [];\r\n\r\n        for (let i = 0; i < this.count; i++) {\r\n          const index = i * this.data.stride + this.offset;\r\n\r\n          for (let j = 0; j < this.itemSize; j++) {\r\n            array.push(this.data.array[index + j]);\r\n          }\r\n        }\r\n\r\n        return new BufferAttribute(\r\n          new this.array.constructor(array),\r\n          this.itemSize,\r\n          this.normalized,\r\n        );\r\n      } else {\r\n        if (data.interleavedBuffers === undefined) {\r\n          data.interleavedBuffers = {};\r\n        }\r\n\r\n        if (data.interleavedBuffers[this.data.uuid] === undefined) {\r\n          data.interleavedBuffers[this.data.uuid] = this.data.clone(data);\r\n        }\r\n\r\n        return new InterleavedBufferAttribute(\r\n          data.interleavedBuffers[this.data.uuid],\r\n          this.itemSize,\r\n          this.offset,\r\n          this.normalized,\r\n        );\r\n      }\r\n    }\r\n\r\n    toJSON(data) {\r\n      if (data === undefined) {\r\n        console.log(\r\n          'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.',\r\n        );\r\n        const array = [];\r\n\r\n        for (let i = 0; i < this.count; i++) {\r\n          const index = i * this.data.stride + this.offset;\r\n\r\n          for (let j = 0; j < this.itemSize; j++) {\r\n            array.push(this.data.array[index + j]);\r\n          }\r\n        } // deinterleave data and save it as an ordinary buffer attribute for now\r\n\r\n        return {\r\n          itemSize: this.itemSize,\r\n          type: this.array.constructor.name,\r\n          array: array,\r\n          normalized: this.normalized,\r\n        };\r\n      } else {\r\n        // save as true interlaved attribtue\r\n        if (data.interleavedBuffers === undefined) {\r\n          data.interleavedBuffers = {};\r\n        }\r\n\r\n        if (data.interleavedBuffers[this.data.uuid] === undefined) {\r\n          data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\r\n        }\r\n\r\n        return {\r\n          isInterleavedBufferAttribute: true,\r\n          itemSize: this.itemSize,\r\n          data: this.data.uuid,\r\n          offset: this.offset,\r\n          normalized: this.normalized,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\trotation: <float>,\r\n   *\tsizeAttenuation: <bool>\r\n   * }\r\n   */\r\n\r\n  class SpriteMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'SpriteMaterial';\r\n      this.color = new Color(0xffffff);\r\n      this.map = null;\r\n      this.alphaMap = null;\r\n      this.rotation = 0;\r\n      this.sizeAttenuation = true;\r\n      this.transparent = true;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.map = source.map;\r\n      this.alphaMap = source.alphaMap;\r\n      this.rotation = source.rotation;\r\n      this.sizeAttenuation = source.sizeAttenuation;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  SpriteMaterial.prototype.isSpriteMaterial = true;\r\n\r\n  let _geometry;\r\n\r\n  const _intersectPoint = /*@__PURE__*/ new Vector3();\r\n\r\n  const _worldScale = /*@__PURE__*/ new Vector3();\r\n\r\n  const _mvPosition = /*@__PURE__*/ new Vector3();\r\n\r\n  const _alignedPosition = /*@__PURE__*/ new Vector2();\r\n\r\n  const _rotatedPosition = /*@__PURE__*/ new Vector2();\r\n\r\n  const _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _vA = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vB = /*@__PURE__*/ new Vector3();\r\n\r\n  const _vC = /*@__PURE__*/ new Vector3();\r\n\r\n  const _uvA = /*@__PURE__*/ new Vector2();\r\n\r\n  const _uvB = /*@__PURE__*/ new Vector2();\r\n\r\n  const _uvC = /*@__PURE__*/ new Vector2();\r\n\r\n  class Sprite extends Object3D {\r\n    constructor(material) {\r\n      super();\r\n      this.type = 'Sprite';\r\n\r\n      if (_geometry === undefined) {\r\n        _geometry = new BufferGeometry();\r\n        const float32Array = new Float32Array([\r\n          -0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1,\r\n        ]);\r\n        const interleavedBuffer = new InterleavedBuffer(float32Array, 5);\r\n\r\n        _geometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        _geometry.setAttribute(\r\n          'position',\r\n          new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false),\r\n        );\r\n\r\n        _geometry.setAttribute(\r\n          'uv',\r\n          new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false),\r\n        );\r\n      }\r\n\r\n      this.geometry = _geometry;\r\n      this.material = material !== undefined ? material : new SpriteMaterial();\r\n      this.center = new Vector2(0.5, 0.5);\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      if (raycaster.camera === null) {\r\n        console.error(\r\n          'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.',\r\n        );\r\n      }\r\n\r\n      _worldScale.setFromMatrixScale(this.matrixWorld);\r\n\r\n      _viewWorldMatrix.copy(raycaster.camera.matrixWorld);\r\n\r\n      this.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\r\n\r\n      _mvPosition.setFromMatrixPosition(this.modelViewMatrix);\r\n\r\n      if (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\r\n        _worldScale.multiplyScalar(-_mvPosition.z);\r\n      }\r\n\r\n      const rotation = this.material.rotation;\r\n      let sin, cos;\r\n\r\n      if (rotation !== 0) {\r\n        cos = Math.cos(rotation);\r\n        sin = Math.sin(rotation);\r\n      }\r\n\r\n      const center = this.center;\r\n      transformVertex(_vA.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\r\n      transformVertex(_vB.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\r\n      transformVertex(_vC.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\r\n\r\n      _uvA.set(0, 0);\r\n\r\n      _uvB.set(1, 0);\r\n\r\n      _uvC.set(1, 1); // check first triangle\r\n\r\n      let intersect = raycaster.ray.intersectTriangle(_vA, _vB, _vC, false, _intersectPoint);\r\n\r\n      if (intersect === null) {\r\n        // check second triangle\r\n        transformVertex(_vB.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\r\n\r\n        _uvB.set(0, 1);\r\n\r\n        intersect = raycaster.ray.intersectTriangle(_vA, _vC, _vB, false, _intersectPoint);\r\n\r\n        if (intersect === null) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      const distance = raycaster.ray.origin.distanceTo(_intersectPoint);\r\n      if (distance < raycaster.near || distance > raycaster.far) return;\r\n      intersects.push({\r\n        distance: distance,\r\n        point: _intersectPoint.clone(),\r\n        uv: Triangle.getUV(_intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2()),\r\n        face: null,\r\n        object: this,\r\n      });\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      if (source.center !== undefined) this.center.copy(source.center);\r\n      this.material = source.material;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  Sprite.prototype.isSprite = true;\r\n\r\n  function transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\r\n    // compute position in camera space\r\n    _alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\r\n\r\n    if (sin !== undefined) {\r\n      _rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\r\n      _rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\r\n    } else {\r\n      _rotatedPosition.copy(_alignedPosition);\r\n    }\r\n\r\n    vertexPosition.copy(mvPosition);\r\n    vertexPosition.x += _rotatedPosition.x;\r\n    vertexPosition.y += _rotatedPosition.y; // transform to world space\r\n\r\n    vertexPosition.applyMatrix4(_viewWorldMatrix);\r\n  }\r\n\r\n  const _v1$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v2$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  class LOD extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this._currentLevel = 0;\r\n      this.type = 'LOD';\r\n      Object.defineProperties(this, {\r\n        levels: {\r\n          enumerable: true,\r\n          value: [],\r\n        },\r\n        isLOD: {\r\n          value: true,\r\n        },\r\n      });\r\n      this.autoUpdate = true;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source, false);\r\n      const levels = source.levels;\r\n\r\n      for (let i = 0, l = levels.length; i < l; i++) {\r\n        const level = levels[i];\r\n        this.addLevel(level.object.clone(), level.distance);\r\n      }\r\n\r\n      this.autoUpdate = source.autoUpdate;\r\n      return this;\r\n    }\r\n\r\n    addLevel(object, distance = 0) {\r\n      distance = Math.abs(distance);\r\n      const levels = this.levels;\r\n      let l;\r\n\r\n      for (l = 0; l < levels.length; l++) {\r\n        if (distance < levels[l].distance) {\r\n          break;\r\n        }\r\n      }\r\n\r\n      levels.splice(l, 0, {\r\n        distance: distance,\r\n        object: object,\r\n      });\r\n      this.add(object);\r\n      return this;\r\n    }\r\n\r\n    getCurrentLevel() {\r\n      return this._currentLevel;\r\n    }\r\n\r\n    getObjectForDistance(distance) {\r\n      const levels = this.levels;\r\n\r\n      if (levels.length > 0) {\r\n        let i, l;\r\n\r\n        for (i = 1, l = levels.length; i < l; i++) {\r\n          if (distance < levels[i].distance) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        return levels[i - 1].object;\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      const levels = this.levels;\r\n\r\n      if (levels.length > 0) {\r\n        _v1$2.setFromMatrixPosition(this.matrixWorld);\r\n\r\n        const distance = raycaster.ray.origin.distanceTo(_v1$2);\r\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\r\n      }\r\n    }\r\n\r\n    update(camera) {\r\n      const levels = this.levels;\r\n\r\n      if (levels.length > 1) {\r\n        _v1$2.setFromMatrixPosition(camera.matrixWorld);\r\n\r\n        _v2$1.setFromMatrixPosition(this.matrixWorld);\r\n\r\n        const distance = _v1$2.distanceTo(_v2$1) / camera.zoom;\r\n        levels[0].object.visible = true;\r\n        let i, l;\r\n\r\n        for (i = 1, l = levels.length; i < l; i++) {\r\n          if (distance >= levels[i].distance) {\r\n            levels[i - 1].object.visible = false;\r\n            levels[i].object.visible = true;\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n\r\n        this._currentLevel = i - 1;\r\n\r\n        for (; i < l; i++) {\r\n          levels[i].object.visible = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      if (this.autoUpdate === false) data.object.autoUpdate = false;\r\n      data.object.levels = [];\r\n      const levels = this.levels;\r\n\r\n      for (let i = 0, l = levels.length; i < l; i++) {\r\n        const level = levels[i];\r\n        data.object.levels.push({\r\n          object: level.object.uuid,\r\n          distance: level.distance,\r\n        });\r\n      }\r\n\r\n      return data;\r\n    }\r\n  }\r\n\r\n  const _basePosition = /*@__PURE__*/ new Vector3();\r\n\r\n  const _skinIndex = /*@__PURE__*/ new Vector4();\r\n\r\n  const _skinWeight = /*@__PURE__*/ new Vector4();\r\n\r\n  const _vector$5 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _matrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  class SkinnedMesh extends Mesh {\r\n    constructor(geometry, material) {\r\n      super(geometry, material);\r\n      this.type = 'SkinnedMesh';\r\n      this.bindMode = 'attached';\r\n      this.bindMatrix = new Matrix4();\r\n      this.bindMatrixInverse = new Matrix4();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.bindMode = source.bindMode;\r\n      this.bindMatrix.copy(source.bindMatrix);\r\n      this.bindMatrixInverse.copy(source.bindMatrixInverse);\r\n      this.skeleton = source.skeleton;\r\n      return this;\r\n    }\r\n\r\n    bind(skeleton, bindMatrix) {\r\n      this.skeleton = skeleton;\r\n\r\n      if (bindMatrix === undefined) {\r\n        this.updateMatrixWorld(true);\r\n        this.skeleton.calculateInverses();\r\n        bindMatrix = this.matrixWorld;\r\n      }\r\n\r\n      this.bindMatrix.copy(bindMatrix);\r\n      this.bindMatrixInverse.copy(bindMatrix).invert();\r\n    }\r\n\r\n    pose() {\r\n      this.skeleton.pose();\r\n    }\r\n\r\n    normalizeSkinWeights() {\r\n      const vector = new Vector4();\r\n      const skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n      for (let i = 0, l = skinWeight.count; i < l; i++) {\r\n        vector.x = skinWeight.getX(i);\r\n        vector.y = skinWeight.getY(i);\r\n        vector.z = skinWeight.getZ(i);\r\n        vector.w = skinWeight.getW(i);\r\n        const scale = 1.0 / vector.manhattanLength();\r\n\r\n        if (scale !== Infinity) {\r\n          vector.multiplyScalar(scale);\r\n        } else {\r\n          vector.set(1, 0, 0, 0); // do something reasonable\r\n        }\r\n\r\n        skinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\r\n      }\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      super.updateMatrixWorld(force);\r\n\r\n      if (this.bindMode === 'attached') {\r\n        this.bindMatrixInverse.copy(this.matrixWorld).invert();\r\n      } else if (this.bindMode === 'detached') {\r\n        this.bindMatrixInverse.copy(this.bindMatrix).invert();\r\n      } else {\r\n        console.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\r\n      }\r\n    }\r\n\r\n    boneTransform(index, target) {\r\n      const skeleton = this.skeleton;\r\n      const geometry = this.geometry;\r\n\r\n      _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\r\n\r\n      _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\r\n\r\n      _basePosition\r\n        .fromBufferAttribute(geometry.attributes.position, index)\r\n        .applyMatrix4(this.bindMatrix);\r\n\r\n      target.set(0, 0, 0);\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        const weight = _skinWeight.getComponent(i);\r\n\r\n        if (weight !== 0) {\r\n          const boneIndex = _skinIndex.getComponent(i);\r\n\r\n          _matrix.multiplyMatrices(\r\n            skeleton.bones[boneIndex].matrixWorld,\r\n            skeleton.boneInverses[boneIndex],\r\n          );\r\n\r\n          target.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix), weight);\r\n        }\r\n      }\r\n\r\n      return target.applyMatrix4(this.bindMatrixInverse);\r\n    }\r\n  }\r\n\r\n  SkinnedMesh.prototype.isSkinnedMesh = true;\r\n\r\n  class Bone extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this.type = 'Bone';\r\n    }\r\n  }\r\n\r\n  Bone.prototype.isBone = true;\r\n\r\n  class DataTexture extends Texture {\r\n    constructor(\r\n      data,\r\n      width,\r\n      height,\r\n      format,\r\n      type,\r\n      mapping,\r\n      wrapS,\r\n      wrapT,\r\n      magFilter,\r\n      minFilter,\r\n      anisotropy,\r\n      encoding,\r\n    ) {\r\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\r\n      this.image = {\r\n        data: data || null,\r\n        width: width || 1,\r\n        height: height || 1,\r\n      };\r\n      this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n      this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n      this.generateMipmaps = false;\r\n      this.flipY = false;\r\n      this.unpackAlignment = 1;\r\n      this.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  DataTexture.prototype.isDataTexture = true;\r\n\r\n  const _offsetMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _identityMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  class Skeleton {\r\n    constructor(bones = [], boneInverses = []) {\r\n      this.uuid = generateUUID();\r\n      this.bones = bones.slice(0);\r\n      this.boneInverses = boneInverses;\r\n      this.boneMatrices = null;\r\n      this.boneTexture = null;\r\n      this.boneTextureSize = 0;\r\n      this.frame = -1;\r\n      this.init();\r\n    }\r\n\r\n    init() {\r\n      const bones = this.bones;\r\n      const boneInverses = this.boneInverses;\r\n      this.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\r\n\r\n      if (boneInverses.length === 0) {\r\n        this.calculateInverses();\r\n      } else {\r\n        // handle special case\r\n        if (bones.length !== boneInverses.length) {\r\n          console.warn(\r\n            'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.',\r\n          );\r\n          this.boneInverses = [];\r\n\r\n          for (let i = 0, il = this.bones.length; i < il; i++) {\r\n            this.boneInverses.push(new Matrix4());\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    calculateInverses() {\r\n      this.boneInverses.length = 0;\r\n\r\n      for (let i = 0, il = this.bones.length; i < il; i++) {\r\n        const inverse = new Matrix4();\r\n\r\n        if (this.bones[i]) {\r\n          inverse.copy(this.bones[i].matrixWorld).invert();\r\n        }\r\n\r\n        this.boneInverses.push(inverse);\r\n      }\r\n    }\r\n\r\n    pose() {\r\n      // recover the bind-time world matrices\r\n      for (let i = 0, il = this.bones.length; i < il; i++) {\r\n        const bone = this.bones[i];\r\n\r\n        if (bone) {\r\n          bone.matrixWorld.copy(this.boneInverses[i]).invert();\r\n        }\r\n      } // compute the local matrices, positions, rotations and scales\r\n\r\n      for (let i = 0, il = this.bones.length; i < il; i++) {\r\n        const bone = this.bones[i];\r\n\r\n        if (bone) {\r\n          if (bone.parent && bone.parent.isBone) {\r\n            bone.matrix.copy(bone.parent.matrixWorld).invert();\r\n            bone.matrix.multiply(bone.matrixWorld);\r\n          } else {\r\n            bone.matrix.copy(bone.matrixWorld);\r\n          }\r\n\r\n          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\r\n        }\r\n      }\r\n    }\r\n\r\n    update() {\r\n      const bones = this.bones;\r\n      const boneInverses = this.boneInverses;\r\n      const boneMatrices = this.boneMatrices;\r\n      const boneTexture = this.boneTexture; // flatten bone matrices to array\r\n\r\n      for (let i = 0, il = bones.length; i < il; i++) {\r\n        // compute the offset between the current and the original transform\r\n        const matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\r\n\r\n        _offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\r\n\r\n        _offsetMatrix.toArray(boneMatrices, i * 16);\r\n      }\r\n\r\n      if (boneTexture !== null) {\r\n        boneTexture.needsUpdate = true;\r\n      }\r\n    }\r\n\r\n    clone() {\r\n      return new Skeleton(this.bones, this.boneInverses);\r\n    }\r\n\r\n    computeBoneTexture() {\r\n      // layout (1 matrix = 4 pixels)\r\n      //\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n      //\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\r\n      //\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\r\n      //\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\r\n      //\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n      let size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\r\n\r\n      size = ceilPowerOfTwo(size);\r\n      size = Math.max(size, 4);\r\n      const boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\r\n\r\n      boneMatrices.set(this.boneMatrices); // copy current values\r\n\r\n      const boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\r\n      this.boneMatrices = boneMatrices;\r\n      this.boneTexture = boneTexture;\r\n      this.boneTextureSize = size;\r\n      return this;\r\n    }\r\n\r\n    getBoneByName(name) {\r\n      for (let i = 0, il = this.bones.length; i < il; i++) {\r\n        const bone = this.bones[i];\r\n\r\n        if (bone.name === name) {\r\n          return bone;\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    dispose() {\r\n      if (this.boneTexture !== null) {\r\n        this.boneTexture.dispose();\r\n        this.boneTexture = null;\r\n      }\r\n    }\r\n\r\n    fromJSON(json, bones) {\r\n      this.uuid = json.uuid;\r\n\r\n      for (let i = 0, l = json.bones.length; i < l; i++) {\r\n        const uuid = json.bones[i];\r\n        let bone = bones[uuid];\r\n\r\n        if (bone === undefined) {\r\n          console.warn('THREE.Skeleton: No bone found with UUID:', uuid);\r\n          bone = new Bone();\r\n        }\r\n\r\n        this.bones.push(bone);\r\n        this.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\r\n      }\r\n\r\n      this.init();\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = {\r\n        metadata: {\r\n          version: 4.5,\r\n          type: 'Skeleton',\r\n          generator: 'Skeleton.toJSON',\r\n        },\r\n        bones: [],\r\n        boneInverses: [],\r\n      };\r\n      data.uuid = this.uuid;\r\n      const bones = this.bones;\r\n      const boneInverses = this.boneInverses;\r\n\r\n      for (let i = 0, l = bones.length; i < l; i++) {\r\n        const bone = bones[i];\r\n        data.bones.push(bone.uuid);\r\n        const boneInverse = boneInverses[i];\r\n        data.boneInverses.push(boneInverse.toArray());\r\n      }\r\n\r\n      return data;\r\n    }\r\n  }\r\n\r\n  const _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _instanceIntersects = [];\r\n\r\n  const _mesh = /*@__PURE__*/ new Mesh();\r\n\r\n  class InstancedMesh extends Mesh {\r\n    constructor(geometry, material, count) {\r\n      super(geometry, material);\r\n      this.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\r\n      this.instanceColor = null;\r\n      this.count = count;\r\n      this.frustumCulled = false;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.instanceMatrix.copy(source.instanceMatrix);\r\n      if (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\r\n      this.count = source.count;\r\n      return this;\r\n    }\r\n\r\n    getColorAt(index, color) {\r\n      color.fromArray(this.instanceColor.array, index * 3);\r\n    }\r\n\r\n    getMatrixAt(index, matrix) {\r\n      matrix.fromArray(this.instanceMatrix.array, index * 16);\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      const matrixWorld = this.matrixWorld;\r\n      const raycastTimes = this.count;\r\n      _mesh.geometry = this.geometry;\r\n      _mesh.material = this.material;\r\n      if (_mesh.material === undefined) return;\r\n\r\n      for (let instanceId = 0; instanceId < raycastTimes; instanceId++) {\r\n        // calculate the world matrix for each instance\r\n        this.getMatrixAt(instanceId, _instanceLocalMatrix);\r\n\r\n        _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\r\n\r\n        _mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n        _mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\r\n\r\n        for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\r\n          const intersect = _instanceIntersects[i];\r\n          intersect.instanceId = instanceId;\r\n          intersect.object = this;\r\n          intersects.push(intersect);\r\n        }\r\n\r\n        _instanceIntersects.length = 0;\r\n      }\r\n    }\r\n\r\n    setColorAt(index, color) {\r\n      if (this.instanceColor === null) {\r\n        this.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\r\n      }\r\n\r\n      color.toArray(this.instanceColor.array, index * 3);\r\n    }\r\n\r\n    setMatrixAt(index, matrix) {\r\n      matrix.toArray(this.instanceMatrix.array, index * 16);\r\n    }\r\n\r\n    updateMorphTargets() {}\r\n\r\n    dispose() {\r\n      this.dispatchEvent({\r\n        type: 'dispose',\r\n      });\r\n    }\r\n  }\r\n\r\n  InstancedMesh.prototype.isInstancedMesh = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tlinewidth: <float>,\r\n   *\tlinecap: \"round\",\r\n   *\tlinejoin: \"round\"\r\n   * }\r\n   */\r\n\r\n  class LineBasicMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'LineBasicMaterial';\r\n      this.color = new Color(0xffffff);\r\n      this.linewidth = 1;\r\n      this.linecap = 'round';\r\n      this.linejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.linewidth = source.linewidth;\r\n      this.linecap = source.linecap;\r\n      this.linejoin = source.linejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  LineBasicMaterial.prototype.isLineBasicMaterial = true;\r\n\r\n  const _start$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _end$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _ray$1 = /*@__PURE__*/ new Ray();\r\n\r\n  const _sphere$1 = /*@__PURE__*/ new Sphere();\r\n\r\n  class Line extends Object3D {\r\n    constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {\r\n      super();\r\n      this.type = 'Line';\r\n      this.geometry = geometry;\r\n      this.material = material;\r\n      this.updateMorphTargets();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.material = source.material;\r\n      this.geometry = source.geometry;\r\n      return this;\r\n    }\r\n\r\n    computeLineDistances() {\r\n      const geometry = this.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        // we assume non-indexed geometry\r\n        if (geometry.index === null) {\r\n          const positionAttribute = geometry.attributes.position;\r\n          const lineDistances = [0];\r\n\r\n          for (let i = 1, l = positionAttribute.count; i < l; i++) {\r\n            _start$1.fromBufferAttribute(positionAttribute, i - 1);\r\n\r\n            _end$1.fromBufferAttribute(positionAttribute, i);\r\n\r\n            lineDistances[i] = lineDistances[i - 1];\r\n            lineDistances[i] += _start$1.distanceTo(_end$1);\r\n          }\r\n\r\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\r\n        } else {\r\n          console.warn(\r\n            'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.',\r\n          );\r\n        }\r\n      } else if (geometry.isGeometry) {\r\n        console.error(\r\n          'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      const geometry = this.geometry;\r\n      const matrixWorld = this.matrixWorld;\r\n      const threshold = raycaster.params.Line.threshold;\r\n      const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\r\n\r\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\r\n\r\n      _sphere$1.copy(geometry.boundingSphere);\r\n\r\n      _sphere$1.applyMatrix4(matrixWorld);\r\n\r\n      _sphere$1.radius += threshold;\r\n      if (raycaster.ray.intersectsSphere(_sphere$1) === false) return; //\r\n\r\n      _inverseMatrix$1.copy(matrixWorld).invert();\r\n\r\n      _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\r\n\r\n      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\r\n      const localThresholdSq = localThreshold * localThreshold;\r\n      const vStart = new Vector3();\r\n      const vEnd = new Vector3();\r\n      const interSegment = new Vector3();\r\n      const interRay = new Vector3();\r\n      const step = this.isLineSegments ? 2 : 1;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const index = geometry.index;\r\n        const attributes = geometry.attributes;\r\n        const positionAttribute = attributes.position;\r\n\r\n        if (index !== null) {\r\n          const start = Math.max(0, drawRange.start);\r\n          const end = Math.min(index.count, drawRange.start + drawRange.count);\r\n\r\n          for (let i = start, l = end - 1; i < l; i += step) {\r\n            const a = index.getX(i);\r\n            const b = index.getX(i + 1);\r\n            vStart.fromBufferAttribute(positionAttribute, a);\r\n            vEnd.fromBufferAttribute(positionAttribute, b);\r\n\r\n            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\r\n\r\n            if (distSq > localThresholdSq) continue;\r\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\r\n\r\n            const distance = raycaster.ray.origin.distanceTo(interRay);\r\n            if (distance < raycaster.near || distance > raycaster.far) continue;\r\n            intersects.push({\r\n              distance: distance,\r\n              // What do we want? intersection point on the ray or on the segment??\r\n              // point: raycaster.ray.at( distance ),\r\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\r\n              index: i,\r\n              face: null,\r\n              faceIndex: null,\r\n              object: this,\r\n            });\r\n          }\r\n        } else {\r\n          const start = Math.max(0, drawRange.start);\r\n          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\r\n\r\n          for (let i = start, l = end - 1; i < l; i += step) {\r\n            vStart.fromBufferAttribute(positionAttribute, i);\r\n            vEnd.fromBufferAttribute(positionAttribute, i + 1);\r\n\r\n            const distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\r\n\r\n            if (distSq > localThresholdSq) continue;\r\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\r\n\r\n            const distance = raycaster.ray.origin.distanceTo(interRay);\r\n            if (distance < raycaster.near || distance > raycaster.far) continue;\r\n            intersects.push({\r\n              distance: distance,\r\n              // What do we want? intersection point on the ray or on the segment??\r\n              // point: raycaster.ray.at( distance ),\r\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\r\n              index: i,\r\n              face: null,\r\n              faceIndex: null,\r\n              object: this,\r\n            });\r\n          }\r\n        }\r\n      } else if (geometry.isGeometry) {\r\n        console.error(\r\n          'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n      }\r\n    }\r\n\r\n    updateMorphTargets() {\r\n      const geometry = this.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const morphAttributes = geometry.morphAttributes;\r\n        const keys = Object.keys(morphAttributes);\r\n\r\n        if (keys.length > 0) {\r\n          const morphAttribute = morphAttributes[keys[0]];\r\n\r\n          if (morphAttribute !== undefined) {\r\n            this.morphTargetInfluences = [];\r\n            this.morphTargetDictionary = {};\r\n\r\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\r\n              const name = morphAttribute[m].name || String(m);\r\n              this.morphTargetInfluences.push(0);\r\n              this.morphTargetDictionary[name] = m;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        const morphTargets = geometry.morphTargets;\r\n\r\n        if (morphTargets !== undefined && morphTargets.length > 0) {\r\n          console.error(\r\n            'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Line.prototype.isLine = true;\r\n\r\n  const _start = /*@__PURE__*/ new Vector3();\r\n\r\n  const _end = /*@__PURE__*/ new Vector3();\r\n\r\n  class LineSegments extends Line {\r\n    constructor(geometry, material) {\r\n      super(geometry, material);\r\n      this.type = 'LineSegments';\r\n    }\r\n\r\n    computeLineDistances() {\r\n      const geometry = this.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        // we assume non-indexed geometry\r\n        if (geometry.index === null) {\r\n          const positionAttribute = geometry.attributes.position;\r\n          const lineDistances = [];\r\n\r\n          for (let i = 0, l = positionAttribute.count; i < l; i += 2) {\r\n            _start.fromBufferAttribute(positionAttribute, i);\r\n\r\n            _end.fromBufferAttribute(positionAttribute, i + 1);\r\n\r\n            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\r\n            lineDistances[i + 1] = lineDistances[i] + _start.distanceTo(_end);\r\n          }\r\n\r\n          geometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\r\n        } else {\r\n          console.warn(\r\n            'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.',\r\n          );\r\n        }\r\n      } else if (geometry.isGeometry) {\r\n        console.error(\r\n          'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  LineSegments.prototype.isLineSegments = true;\r\n\r\n  class LineLoop extends Line {\r\n    constructor(geometry, material) {\r\n      super(geometry, material);\r\n      this.type = 'LineLoop';\r\n    }\r\n  }\r\n\r\n  LineLoop.prototype.isLineLoop = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tsize: <float>,\r\n   *\tsizeAttenuation: <bool>\r\n   *\r\n   *\tmorphTargets: <bool>\r\n   * }\r\n   */\r\n\r\n  class PointsMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'PointsMaterial';\r\n      this.color = new Color(0xffffff);\r\n      this.map = null;\r\n      this.alphaMap = null;\r\n      this.size = 1;\r\n      this.sizeAttenuation = true;\r\n      this.morphTargets = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.map = source.map;\r\n      this.alphaMap = source.alphaMap;\r\n      this.size = source.size;\r\n      this.sizeAttenuation = source.sizeAttenuation;\r\n      this.morphTargets = source.morphTargets;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  PointsMaterial.prototype.isPointsMaterial = true;\r\n\r\n  const _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _ray = /*@__PURE__*/ new Ray();\r\n\r\n  const _sphere = /*@__PURE__*/ new Sphere();\r\n\r\n  const _position$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  class Points extends Object3D {\r\n    constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {\r\n      super();\r\n      this.type = 'Points';\r\n      this.geometry = geometry;\r\n      this.material = material;\r\n      this.updateMorphTargets();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.material = source.material;\r\n      this.geometry = source.geometry;\r\n      return this;\r\n    }\r\n\r\n    raycast(raycaster, intersects) {\r\n      const geometry = this.geometry;\r\n      const matrixWorld = this.matrixWorld;\r\n      const threshold = raycaster.params.Points.threshold;\r\n      const drawRange = geometry.drawRange; // Checking boundingSphere distance to ray\r\n\r\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\r\n\r\n      _sphere.copy(geometry.boundingSphere);\r\n\r\n      _sphere.applyMatrix4(matrixWorld);\r\n\r\n      _sphere.radius += threshold;\r\n      if (raycaster.ray.intersectsSphere(_sphere) === false) return; //\r\n\r\n      _inverseMatrix.copy(matrixWorld).invert();\r\n\r\n      _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);\r\n\r\n      const localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\r\n      const localThresholdSq = localThreshold * localThreshold;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const index = geometry.index;\r\n        const attributes = geometry.attributes;\r\n        const positionAttribute = attributes.position;\r\n\r\n        if (index !== null) {\r\n          const start = Math.max(0, drawRange.start);\r\n          const end = Math.min(index.count, drawRange.start + drawRange.count);\r\n\r\n          for (let i = start, il = end; i < il; i++) {\r\n            const a = index.getX(i);\r\n\r\n            _position$2.fromBufferAttribute(positionAttribute, a);\r\n\r\n            testPoint(_position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\r\n          }\r\n        } else {\r\n          const start = Math.max(0, drawRange.start);\r\n          const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);\r\n\r\n          for (let i = start, l = end; i < l; i++) {\r\n            _position$2.fromBufferAttribute(positionAttribute, i);\r\n\r\n            testPoint(_position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this);\r\n          }\r\n        }\r\n      } else {\r\n        console.error(\r\n          'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n      }\r\n    }\r\n\r\n    updateMorphTargets() {\r\n      const geometry = this.geometry;\r\n\r\n      if (geometry.isBufferGeometry) {\r\n        const morphAttributes = geometry.morphAttributes;\r\n        const keys = Object.keys(morphAttributes);\r\n\r\n        if (keys.length > 0) {\r\n          const morphAttribute = morphAttributes[keys[0]];\r\n\r\n          if (morphAttribute !== undefined) {\r\n            this.morphTargetInfluences = [];\r\n            this.morphTargetDictionary = {};\r\n\r\n            for (let m = 0, ml = morphAttribute.length; m < ml; m++) {\r\n              const name = morphAttribute[m].name || String(m);\r\n              this.morphTargetInfluences.push(0);\r\n              this.morphTargetDictionary[name] = m;\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        const morphTargets = geometry.morphTargets;\r\n\r\n        if (morphTargets !== undefined && morphTargets.length > 0) {\r\n          console.error(\r\n            'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  Points.prototype.isPoints = true;\r\n\r\n  function testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\r\n    const rayPointDistanceSq = _ray.distanceSqToPoint(point);\r\n\r\n    if (rayPointDistanceSq < localThresholdSq) {\r\n      const intersectPoint = new Vector3();\r\n\r\n      _ray.closestPointToPoint(point, intersectPoint);\r\n\r\n      intersectPoint.applyMatrix4(matrixWorld);\r\n      const distance = raycaster.ray.origin.distanceTo(intersectPoint);\r\n      if (distance < raycaster.near || distance > raycaster.far) return;\r\n      intersects.push({\r\n        distance: distance,\r\n        distanceToRay: Math.sqrt(rayPointDistanceSq),\r\n        point: intersectPoint,\r\n        index: index,\r\n        face: null,\r\n        object: object,\r\n      });\r\n    }\r\n  }\r\n\r\n  class VideoTexture extends Texture {\r\n    constructor(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\r\n      super(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\r\n      this.format = format !== undefined ? format : RGBFormat;\r\n      this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\r\n      this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n      this.generateMipmaps = false;\r\n      const scope = this;\r\n\r\n      function updateVideo() {\r\n        scope.needsUpdate = true;\r\n        video.requestVideoFrameCallback(updateVideo);\r\n      }\r\n\r\n      if ('requestVideoFrameCallback' in video) {\r\n        video.requestVideoFrameCallback(updateVideo);\r\n      }\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor(this.image).copy(this);\r\n    }\r\n\r\n    update() {\r\n      const video = this.image;\r\n      const hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\r\n\r\n      if (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\r\n        this.needsUpdate = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  VideoTexture.prototype.isVideoTexture = true;\r\n\r\n  class CompressedTexture extends Texture {\r\n    constructor(\r\n      mipmaps,\r\n      width,\r\n      height,\r\n      format,\r\n      type,\r\n      mapping,\r\n      wrapS,\r\n      wrapT,\r\n      magFilter,\r\n      minFilter,\r\n      anisotropy,\r\n      encoding,\r\n    ) {\r\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\r\n      this.image = {\r\n        width: width,\r\n        height: height,\r\n      };\r\n      this.mipmaps = mipmaps; // no flipping for cube textures\r\n      // (also flipping doesn't work for compressed textures )\r\n\r\n      this.flipY = false; // can't generate mipmaps for compressed textures\r\n      // mips must be embedded in DDS files\r\n\r\n      this.generateMipmaps = false;\r\n    }\r\n  }\r\n\r\n  CompressedTexture.prototype.isCompressedTexture = true;\r\n\r\n  class CanvasTexture extends Texture {\r\n    constructor(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\r\n      super(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\r\n      this.needsUpdate = true;\r\n    }\r\n  }\r\n\r\n  CanvasTexture.prototype.isCanvasTexture = true;\r\n\r\n  class DepthTexture extends Texture {\r\n    constructor(\r\n      width,\r\n      height,\r\n      type,\r\n      mapping,\r\n      wrapS,\r\n      wrapT,\r\n      magFilter,\r\n      minFilter,\r\n      anisotropy,\r\n      format,\r\n    ) {\r\n      format = format !== undefined ? format : DepthFormat;\r\n\r\n      if (format !== DepthFormat && format !== DepthStencilFormat) {\r\n        throw new Error(\r\n          'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat',\r\n        );\r\n      }\r\n\r\n      if (type === undefined && format === DepthFormat) type = UnsignedShortType;\r\n      if (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\r\n      super(null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\r\n      this.image = {\r\n        width: width,\r\n        height: height,\r\n      };\r\n      this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n      this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n      this.flipY = false;\r\n      this.generateMipmaps = false;\r\n    }\r\n  }\r\n\r\n  DepthTexture.prototype.isDepthTexture = true;\r\n\r\n  class CircleGeometry extends BufferGeometry {\r\n    constructor(radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2) {\r\n      super();\r\n      this.type = 'CircleGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        segments: segments,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength,\r\n      };\r\n      segments = Math.max(3, segments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      const vertex = new Vector3();\r\n      const uv = new Vector2(); // center point\r\n\r\n      vertices.push(0, 0, 0);\r\n      normals.push(0, 0, 1);\r\n      uvs.push(0.5, 0.5);\r\n\r\n      for (let s = 0, i = 3; s <= segments; s++, i += 3) {\r\n        const segment = thetaStart + (s / segments) * thetaLength; // vertex\r\n\r\n        vertex.x = radius * Math.cos(segment);\r\n        vertex.y = radius * Math.sin(segment);\r\n        vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n        normals.push(0, 0, 1); // uvs\r\n\r\n        uv.x = (vertices[i] / radius + 1) / 2;\r\n        uv.y = (vertices[i + 1] / radius + 1) / 2;\r\n        uvs.push(uv.x, uv.y);\r\n      } // indices\r\n\r\n      for (let i = 1; i <= segments; i++) {\r\n        indices.push(i, i + 1, 0);\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  class CylinderGeometry extends BufferGeometry {\r\n    constructor(\r\n      radiusTop = 1,\r\n      radiusBottom = 1,\r\n      height = 1,\r\n      radialSegments = 8,\r\n      heightSegments = 1,\r\n      openEnded = false,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI * 2,\r\n    ) {\r\n      super();\r\n      this.type = 'CylinderGeometry';\r\n      this.parameters = {\r\n        radiusTop: radiusTop,\r\n        radiusBottom: radiusBottom,\r\n        height: height,\r\n        radialSegments: radialSegments,\r\n        heightSegments: heightSegments,\r\n        openEnded: openEnded,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength,\r\n      };\r\n      const scope = this;\r\n      radialSegments = Math.floor(radialSegments);\r\n      heightSegments = Math.floor(heightSegments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      let index = 0;\r\n      const indexArray = [];\r\n      const halfHeight = height / 2;\r\n      let groupStart = 0; // generate geometry\r\n\r\n      generateTorso();\r\n\r\n      if (openEnded === false) {\r\n        if (radiusTop > 0) generateCap(true);\r\n        if (radiusBottom > 0) generateCap(false);\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n\r\n      function generateTorso() {\r\n        const normal = new Vector3();\r\n        const vertex = new Vector3();\r\n        let groupCount = 0; // this will be used to calculate the normal\r\n\r\n        const slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\r\n\r\n        for (let y = 0; y <= heightSegments; y++) {\r\n          const indexRow = [];\r\n          const v = y / heightSegments; // calculate the radius of the current row\r\n\r\n          const radius = v * (radiusBottom - radiusTop) + radiusTop;\r\n\r\n          for (let x = 0; x <= radialSegments; x++) {\r\n            const u = x / radialSegments;\r\n            const theta = u * thetaLength + thetaStart;\r\n            const sinTheta = Math.sin(theta);\r\n            const cosTheta = Math.cos(theta); // vertex\r\n\r\n            vertex.x = radius * sinTheta;\r\n            vertex.y = -v * height + halfHeight;\r\n            vertex.z = radius * cosTheta;\r\n            vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n            normal.set(sinTheta, slope, cosTheta).normalize();\r\n            normals.push(normal.x, normal.y, normal.z); // uv\r\n\r\n            uvs.push(u, 1 - v); // save index of vertex in respective row\r\n\r\n            indexRow.push(index++);\r\n          } // now save vertices of the row in our index array\r\n\r\n          indexArray.push(indexRow);\r\n        } // generate indices\r\n\r\n        for (let x = 0; x < radialSegments; x++) {\r\n          for (let y = 0; y < heightSegments; y++) {\r\n            // we use the index array to access the correct indices\r\n            const a = indexArray[y][x];\r\n            const b = indexArray[y + 1][x];\r\n            const c = indexArray[y + 1][x + 1];\r\n            const d = indexArray[y][x + 1]; // faces\r\n\r\n            indices.push(a, b, d);\r\n            indices.push(b, c, d); // update group counter\r\n\r\n            groupCount += 6;\r\n          }\r\n        } // add a group to the geometry. this will ensure multi material support\r\n\r\n        scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\r\n\r\n        groupStart += groupCount;\r\n      }\r\n\r\n      function generateCap(top) {\r\n        // save the index of the first center vertex\r\n        const centerIndexStart = index;\r\n        const uv = new Vector2();\r\n        const vertex = new Vector3();\r\n        let groupCount = 0;\r\n        const radius = top === true ? radiusTop : radiusBottom;\r\n        const sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\r\n        // because the geometry needs one set of uvs per face,\r\n        // we must generate a center vertex per face/segment\r\n\r\n        for (let x = 1; x <= radialSegments; x++) {\r\n          // vertex\r\n          vertices.push(0, halfHeight * sign, 0); // normal\r\n\r\n          normals.push(0, sign, 0); // uv\r\n\r\n          uvs.push(0.5, 0.5); // increase index\r\n\r\n          index++;\r\n        } // save the index of the last center vertex\r\n\r\n        const centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\r\n\r\n        for (let x = 0; x <= radialSegments; x++) {\r\n          const u = x / radialSegments;\r\n          const theta = u * thetaLength + thetaStart;\r\n          const cosTheta = Math.cos(theta);\r\n          const sinTheta = Math.sin(theta); // vertex\r\n\r\n          vertex.x = radius * sinTheta;\r\n          vertex.y = halfHeight * sign;\r\n          vertex.z = radius * cosTheta;\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n          normals.push(0, sign, 0); // uv\r\n\r\n          uv.x = cosTheta * 0.5 + 0.5;\r\n          uv.y = sinTheta * 0.5 * sign + 0.5;\r\n          uvs.push(uv.x, uv.y); // increase index\r\n\r\n          index++;\r\n        } // generate indices\r\n\r\n        for (let x = 0; x < radialSegments; x++) {\r\n          const c = centerIndexStart + x;\r\n          const i = centerIndexEnd + x;\r\n\r\n          if (top === true) {\r\n            // face top\r\n            indices.push(i, i + 1, c);\r\n          } else {\r\n            // face bottom\r\n            indices.push(i + 1, i, c);\r\n          }\r\n\r\n          groupCount += 3;\r\n        } // add a group to the geometry. this will ensure multi material support\r\n\r\n        scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\r\n\r\n        groupStart += groupCount;\r\n      }\r\n    }\r\n  }\r\n\r\n  class ConeGeometry extends CylinderGeometry {\r\n    constructor(\r\n      radius = 1,\r\n      height = 1,\r\n      radialSegments = 8,\r\n      heightSegments = 1,\r\n      openEnded = false,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI * 2,\r\n    ) {\r\n      super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\r\n      this.type = 'ConeGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        height: height,\r\n        radialSegments: radialSegments,\r\n        heightSegments: heightSegments,\r\n        openEnded: openEnded,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength,\r\n      };\r\n    }\r\n  }\r\n\r\n  class PolyhedronGeometry extends BufferGeometry {\r\n    constructor(vertices, indices, radius = 1, detail = 0) {\r\n      super();\r\n      this.type = 'PolyhedronGeometry';\r\n      this.parameters = {\r\n        vertices: vertices,\r\n        indices: indices,\r\n        radius: radius,\r\n        detail: detail,\r\n      }; // default buffer data\r\n\r\n      const vertexBuffer = [];\r\n      const uvBuffer = []; // the subdivision creates the vertex buffer data\r\n\r\n      subdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\r\n\r\n      applyRadius(radius); // finally, create the uv data\r\n\r\n      generateUVs(); // build non-indexed geometry\r\n\r\n      this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\r\n\r\n      if (detail === 0) {\r\n        this.computeVertexNormals(); // flat normals\r\n      } else {\r\n        this.normalizeNormals(); // smooth normals\r\n      } // helper functions\r\n\r\n      function subdivide(detail) {\r\n        const a = new Vector3();\r\n        const b = new Vector3();\r\n        const c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\r\n\r\n        for (let i = 0; i < indices.length; i += 3) {\r\n          // get the vertices of the face\r\n          getVertexByIndex(indices[i + 0], a);\r\n          getVertexByIndex(indices[i + 1], b);\r\n          getVertexByIndex(indices[i + 2], c); // perform subdivision\r\n\r\n          subdivideFace(a, b, c, detail);\r\n        }\r\n      }\r\n\r\n      function subdivideFace(a, b, c, detail) {\r\n        const cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n        const v = []; // construct all of the vertices for this subdivision\r\n\r\n        for (let i = 0; i <= cols; i++) {\r\n          v[i] = [];\r\n          const aj = a.clone().lerp(c, i / cols);\r\n          const bj = b.clone().lerp(c, i / cols);\r\n          const rows = cols - i;\r\n\r\n          for (let j = 0; j <= rows; j++) {\r\n            if (j === 0 && i === cols) {\r\n              v[i][j] = aj;\r\n            } else {\r\n              v[i][j] = aj.clone().lerp(bj, j / rows);\r\n            }\r\n          }\r\n        } // construct all of the faces\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n          for (let j = 0; j < 2 * (cols - i) - 1; j++) {\r\n            const k = Math.floor(j / 2);\r\n\r\n            if (j % 2 === 0) {\r\n              pushVertex(v[i][k + 1]);\r\n              pushVertex(v[i + 1][k]);\r\n              pushVertex(v[i][k]);\r\n            } else {\r\n              pushVertex(v[i][k + 1]);\r\n              pushVertex(v[i + 1][k + 1]);\r\n              pushVertex(v[i + 1][k]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      function applyRadius(radius) {\r\n        const vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\r\n\r\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\r\n          vertex.x = vertexBuffer[i + 0];\r\n          vertex.y = vertexBuffer[i + 1];\r\n          vertex.z = vertexBuffer[i + 2];\r\n          vertex.normalize().multiplyScalar(radius);\r\n          vertexBuffer[i + 0] = vertex.x;\r\n          vertexBuffer[i + 1] = vertex.y;\r\n          vertexBuffer[i + 2] = vertex.z;\r\n        }\r\n      }\r\n\r\n      function generateUVs() {\r\n        const vertex = new Vector3();\r\n\r\n        for (let i = 0; i < vertexBuffer.length; i += 3) {\r\n          vertex.x = vertexBuffer[i + 0];\r\n          vertex.y = vertexBuffer[i + 1];\r\n          vertex.z = vertexBuffer[i + 2];\r\n          const u = azimuth(vertex) / 2 / Math.PI + 0.5;\r\n          const v = inclination(vertex) / Math.PI + 0.5;\r\n          uvBuffer.push(u, 1 - v);\r\n        }\r\n\r\n        correctUVs();\r\n        correctSeam();\r\n      }\r\n\r\n      function correctSeam() {\r\n        // handle case when face straddles the seam, see #3269\r\n        for (let i = 0; i < uvBuffer.length; i += 6) {\r\n          // uv data of a single face\r\n          const x0 = uvBuffer[i + 0];\r\n          const x1 = uvBuffer[i + 2];\r\n          const x2 = uvBuffer[i + 4];\r\n          const max = Math.max(x0, x1, x2);\r\n          const min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\r\n\r\n          if (max > 0.9 && min < 0.1) {\r\n            if (x0 < 0.2) uvBuffer[i + 0] += 1;\r\n            if (x1 < 0.2) uvBuffer[i + 2] += 1;\r\n            if (x2 < 0.2) uvBuffer[i + 4] += 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function pushVertex(vertex) {\r\n        vertexBuffer.push(vertex.x, vertex.y, vertex.z);\r\n      }\r\n\r\n      function getVertexByIndex(index, vertex) {\r\n        const stride = index * 3;\r\n        vertex.x = vertices[stride + 0];\r\n        vertex.y = vertices[stride + 1];\r\n        vertex.z = vertices[stride + 2];\r\n      }\r\n\r\n      function correctUVs() {\r\n        const a = new Vector3();\r\n        const b = new Vector3();\r\n        const c = new Vector3();\r\n        const centroid = new Vector3();\r\n        const uvA = new Vector2();\r\n        const uvB = new Vector2();\r\n        const uvC = new Vector2();\r\n\r\n        for (let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\r\n          a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\r\n          b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\r\n          c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\r\n          uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\r\n          uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\r\n          uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\r\n          centroid.copy(a).add(b).add(c).divideScalar(3);\r\n          const azi = azimuth(centroid);\r\n          correctUV(uvA, j + 0, a, azi);\r\n          correctUV(uvB, j + 2, b, azi);\r\n          correctUV(uvC, j + 4, c, azi);\r\n        }\r\n      }\r\n\r\n      function correctUV(uv, stride, vector, azimuth) {\r\n        if (azimuth < 0 && uv.x === 1) {\r\n          uvBuffer[stride] = uv.x - 1;\r\n        }\r\n\r\n        if (vector.x === 0 && vector.z === 0) {\r\n          uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\r\n        }\r\n      } // Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n      function azimuth(vector) {\r\n        return Math.atan2(vector.z, -vector.x);\r\n      } // Angle above the XZ plane.\r\n\r\n      function inclination(vector) {\r\n        return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\r\n      }\r\n    }\r\n  }\r\n\r\n  class DodecahedronGeometry extends PolyhedronGeometry {\r\n    constructor(radius = 1, detail = 0) {\r\n      const t = (1 + Math.sqrt(5)) / 2;\r\n      const r = 1 / t;\r\n      const vertices = [\r\n        // (±1, ±1, ±1)\r\n        -1,\r\n        -1,\r\n        -1,\r\n        -1,\r\n        -1,\r\n        1,\r\n        -1,\r\n        1,\r\n        -1,\r\n        -1,\r\n        1,\r\n        1,\r\n        1,\r\n        -1,\r\n        -1,\r\n        1,\r\n        -1,\r\n        1,\r\n        1,\r\n        1,\r\n        -1,\r\n        1,\r\n        1,\r\n        1, // (0, ±1/φ, ±φ)\r\n        0,\r\n        -r,\r\n        -t,\r\n        0,\r\n        -r,\r\n        t,\r\n        0,\r\n        r,\r\n        -t,\r\n        0,\r\n        r,\r\n        t, // (±1/φ, ±φ, 0)\r\n        -r,\r\n        -t,\r\n        0,\r\n        -r,\r\n        t,\r\n        0,\r\n        r,\r\n        -t,\r\n        0,\r\n        r,\r\n        t,\r\n        0, // (±φ, 0, ±1/φ)\r\n        -t,\r\n        0,\r\n        -r,\r\n        t,\r\n        0,\r\n        -r,\r\n        -t,\r\n        0,\r\n        r,\r\n        t,\r\n        0,\r\n        r,\r\n      ];\r\n      const indices = [\r\n        3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10,\r\n        6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13,\r\n        15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4,\r\n        0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5,\r\n        1, 5, 9,\r\n      ];\r\n      super(vertices, indices, radius, detail);\r\n      this.type = 'DodecahedronGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail,\r\n      };\r\n    }\r\n  }\r\n\r\n  const _v0 = new Vector3();\r\n\r\n  const _v1$1 = new Vector3();\r\n\r\n  const _normal = new Vector3();\r\n\r\n  const _triangle = new Triangle();\r\n\r\n  class EdgesGeometry extends BufferGeometry {\r\n    constructor(geometry, thresholdAngle) {\r\n      super();\r\n      this.type = 'EdgesGeometry';\r\n      this.parameters = {\r\n        thresholdAngle: thresholdAngle,\r\n      };\r\n      thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\r\n\r\n      if (geometry.isGeometry === true) {\r\n        console.error(\r\n          'THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n        return;\r\n      }\r\n\r\n      const precisionPoints = 4;\r\n      const precision = Math.pow(10, precisionPoints);\r\n      const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);\r\n      const indexAttr = geometry.getIndex();\r\n      const positionAttr = geometry.getAttribute('position');\r\n      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;\r\n      const indexArr = [0, 0, 0];\r\n      const vertKeys = ['a', 'b', 'c'];\r\n      const hashes = new Array(3);\r\n      const edgeData = {};\r\n      const vertices = [];\r\n\r\n      for (let i = 0; i < indexCount; i += 3) {\r\n        if (indexAttr) {\r\n          indexArr[0] = indexAttr.getX(i);\r\n          indexArr[1] = indexAttr.getX(i + 1);\r\n          indexArr[2] = indexAttr.getX(i + 2);\r\n        } else {\r\n          indexArr[0] = i;\r\n          indexArr[1] = i + 1;\r\n          indexArr[2] = i + 2;\r\n        }\r\n\r\n        const { a, b, c } = _triangle;\r\n        a.fromBufferAttribute(positionAttr, indexArr[0]);\r\n        b.fromBufferAttribute(positionAttr, indexArr[1]);\r\n        c.fromBufferAttribute(positionAttr, indexArr[2]);\r\n\r\n        _triangle.getNormal(_normal); // create hashes for the edge from the vertices\r\n\r\n        hashes[0] = `${Math.round(a.x * precision)},${Math.round(a.y * precision)},${Math.round(\r\n          a.z * precision,\r\n        )}`;\r\n        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(\r\n          b.z * precision,\r\n        )}`;\r\n        hashes[2] = `${Math.round(c.x * precision)},${Math.round(c.y * precision)},${Math.round(\r\n          c.z * precision,\r\n        )}`; // skip degenerate triangles\r\n\r\n        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\r\n          continue;\r\n        } // iterate over every edge\r\n\r\n        for (let j = 0; j < 3; j++) {\r\n          // get the first and next vertex making up the edge\r\n          const jNext = (j + 1) % 3;\r\n          const vecHash0 = hashes[j];\r\n          const vecHash1 = hashes[jNext];\r\n          const v0 = _triangle[vertKeys[j]];\r\n          const v1 = _triangle[vertKeys[jNext]];\r\n          const hash = `${vecHash0}_${vecHash1}`;\r\n          const reverseHash = `${vecHash1}_${vecHash0}`;\r\n\r\n          if (reverseHash in edgeData && edgeData[reverseHash]) {\r\n            // if we found a sibling edge add it into the vertex array if\r\n            // it meets the angle threshold and delete the edge from the map.\r\n            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {\r\n              vertices.push(v0.x, v0.y, v0.z);\r\n              vertices.push(v1.x, v1.y, v1.z);\r\n            }\r\n\r\n            edgeData[reverseHash] = null;\r\n          } else if (!(hash in edgeData)) {\r\n            // if we've already got an edge here then skip adding a new one\r\n            edgeData[hash] = {\r\n              index0: indexArr[j],\r\n              index1: indexArr[jNext],\r\n              normal: _normal.clone(),\r\n            };\r\n          }\r\n        }\r\n      } // iterate over all remaining, unmatched edges and add them to the vertex array\r\n\r\n      for (const key in edgeData) {\r\n        if (edgeData[key]) {\r\n          const { index0, index1 } = edgeData[key];\r\n\r\n          _v0.fromBufferAttribute(positionAttr, index0);\r\n\r\n          _v1$1.fromBufferAttribute(positionAttr, index1);\r\n\r\n          vertices.push(_v0.x, _v0.y, _v0.z);\r\n          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);\r\n        }\r\n      }\r\n\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Port from https://github.com/mapbox/earcut (v2.2.2)\r\n   */\r\n  const Earcut = {\r\n    triangulate: function (data, holeIndices, dim) {\r\n      dim = dim || 2;\r\n      const hasHoles = holeIndices && holeIndices.length;\r\n      const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n      let outerNode = linkedList(data, 0, outerLen, dim, true);\r\n      const triangles = [];\r\n      if (!outerNode || outerNode.next === outerNode.prev) return triangles;\r\n      let minX, minY, maxX, maxY, x, y, invSize;\r\n      if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\r\n      if (data.length > 80 * dim) {\r\n        minX = maxX = data[0];\r\n        minY = maxY = data[1];\r\n\r\n        for (let i = dim; i < outerLen; i += dim) {\r\n          x = data[i];\r\n          y = data[i + 1];\r\n          if (x < minX) minX = x;\r\n          if (y < minY) minY = y;\r\n          if (x > maxX) maxX = x;\r\n          if (y > maxY) maxY = y;\r\n        } // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\r\n        invSize = Math.max(maxX - minX, maxY - minY);\r\n        invSize = invSize !== 0 ? 1 / invSize : 0;\r\n      }\r\n\r\n      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\r\n      return triangles;\r\n    },\r\n  }; // create a circular doubly linked list from polygon points in the specified winding order\r\n\r\n  function linkedList(data, start, end, dim, clockwise) {\r\n    let i, last;\r\n\r\n    if (clockwise === signedArea(data, start, end, dim) > 0) {\r\n      for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    } else {\r\n      for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\r\n    }\r\n\r\n    if (last && equals(last, last.next)) {\r\n      removeNode(last);\r\n      last = last.next;\r\n    }\r\n\r\n    return last;\r\n  } // eliminate colinear or duplicate points\r\n\r\n  function filterPoints(start, end) {\r\n    if (!start) return start;\r\n    if (!end) end = start;\r\n    let p = start,\r\n      again;\r\n\r\n    do {\r\n      again = false;\r\n\r\n      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\r\n        removeNode(p);\r\n        p = end = p.prev;\r\n        if (p === p.next) break;\r\n        again = true;\r\n      } else {\r\n        p = p.next;\r\n      }\r\n    } while (again || p !== end);\r\n\r\n    return end;\r\n  } // main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\r\n  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\r\n    if (!ear) return; // interlink polygon nodes in z-order\r\n\r\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\r\n    let stop = ear,\r\n      prev,\r\n      next; // iterate through ears, slicing them one by one\r\n\r\n    while (ear.prev !== ear.next) {\r\n      prev = ear.prev;\r\n      next = ear.next;\r\n\r\n      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\r\n        // cut off the triangle\r\n        triangles.push(prev.i / dim);\r\n        triangles.push(ear.i / dim);\r\n        triangles.push(next.i / dim);\r\n        removeNode(ear); // skipping the next vertex leads to less sliver triangles\r\n\r\n        ear = next.next;\r\n        stop = next.next;\r\n        continue;\r\n      }\r\n\r\n      ear = next; // if we looped through the whole remaining polygon and can't find any more ears\r\n\r\n      if (ear === stop) {\r\n        // try filtering points and slicing again\r\n        if (!pass) {\r\n          earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\r\n        } else if (pass === 1) {\r\n          ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\r\n          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\r\n        } else if (pass === 2) {\r\n          splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  } // check whether a polygon node forms a valid ear with adjacent nodes\r\n\r\n  function isEar(ear) {\r\n    const a = ear.prev,\r\n      b = ear,\r\n      c = ear.next;\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n    // now make sure we don't have other points inside the potential ear\r\n\r\n    let p = ear.next.next;\r\n\r\n    while (p !== ear.prev) {\r\n      if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0)\r\n        return false;\r\n      p = p.next;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function isEarHashed(ear, minX, minY, invSize) {\r\n    const a = ear.prev,\r\n      b = ear,\r\n      c = ear.next;\r\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\r\n    // triangle bbox; min & max are calculated like this for speed\r\n\r\n    const minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : b.x < c.x ? b.x : c.x,\r\n      minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : b.y < c.y ? b.y : c.y,\r\n      maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : b.x > c.x ? b.x : c.x,\r\n      maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\r\n\r\n    const minZ = zOrder(minTX, minTY, minX, minY, invSize),\r\n      maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\r\n    let p = ear.prevZ,\r\n      n = ear.nextZ; // look for points inside the triangle in both directions\r\n\r\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\r\n      if (\r\n        p !== ear.prev &&\r\n        p !== ear.next &&\r\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n        area(p.prev, p, p.next) >= 0\r\n      )\r\n        return false;\r\n      p = p.prevZ;\r\n      if (\r\n        n !== ear.prev &&\r\n        n !== ear.next &&\r\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\r\n        area(n.prev, n, n.next) >= 0\r\n      )\r\n        return false;\r\n      n = n.nextZ;\r\n    } // look for remaining points in decreasing z-order\r\n\r\n    while (p && p.z >= minZ) {\r\n      if (\r\n        p !== ear.prev &&\r\n        p !== ear.next &&\r\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n        area(p.prev, p, p.next) >= 0\r\n      )\r\n        return false;\r\n      p = p.prevZ;\r\n    } // look for remaining points in increasing z-order\r\n\r\n    while (n && n.z <= maxZ) {\r\n      if (\r\n        n !== ear.prev &&\r\n        n !== ear.next &&\r\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\r\n        area(n.prev, n, n.next) >= 0\r\n      )\r\n        return false;\r\n      n = n.nextZ;\r\n    }\r\n\r\n    return true;\r\n  } // go through all polygon nodes and cure small local self-intersections\r\n\r\n  function cureLocalIntersections(start, triangles, dim) {\r\n    let p = start;\r\n\r\n    do {\r\n      const a = p.prev,\r\n        b = p.next.next;\r\n\r\n      if (\r\n        !equals(a, b) &&\r\n        intersects(a, p, p.next, b) &&\r\n        locallyInside(a, b) &&\r\n        locallyInside(b, a)\r\n      ) {\r\n        triangles.push(a.i / dim);\r\n        triangles.push(p.i / dim);\r\n        triangles.push(b.i / dim); // remove two nodes involved\r\n\r\n        removeNode(p);\r\n        removeNode(p.next);\r\n        p = start = b;\r\n      }\r\n\r\n      p = p.next;\r\n    } while (p !== start);\r\n\r\n    return filterPoints(p);\r\n  } // try splitting polygon into two and triangulate them independently\r\n\r\n  function splitEarcut(start, triangles, dim, minX, minY, invSize) {\r\n    // look for a valid diagonal that divides the polygon into two\r\n    let a = start;\r\n\r\n    do {\r\n      let b = a.next.next;\r\n\r\n      while (b !== a.prev) {\r\n        if (a.i !== b.i && isValidDiagonal(a, b)) {\r\n          // split the polygon in two by the diagonal\r\n          let c = splitPolygon(a, b); // filter colinear points around the cuts\r\n\r\n          a = filterPoints(a, a.next);\r\n          c = filterPoints(c, c.next); // run earcut on each half\r\n\r\n          earcutLinked(a, triangles, dim, minX, minY, invSize);\r\n          earcutLinked(c, triangles, dim, minX, minY, invSize);\r\n          return;\r\n        }\r\n\r\n        b = b.next;\r\n      }\r\n\r\n      a = a.next;\r\n    } while (a !== start);\r\n  } // link every hole into the outer loop, producing a single-ring polygon without holes\r\n\r\n  function eliminateHoles(data, holeIndices, outerNode, dim) {\r\n    const queue = [];\r\n    let i, len, start, end, list;\r\n\r\n    for (i = 0, len = holeIndices.length; i < len; i++) {\r\n      start = holeIndices[i] * dim;\r\n      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n      list = linkedList(data, start, end, dim, false);\r\n      if (list === list.next) list.steiner = true;\r\n      queue.push(getLeftmost(list));\r\n    }\r\n\r\n    queue.sort(compareX); // process holes from left to right\r\n\r\n    for (i = 0; i < queue.length; i++) {\r\n      eliminateHole(queue[i], outerNode);\r\n      outerNode = filterPoints(outerNode, outerNode.next);\r\n    }\r\n\r\n    return outerNode;\r\n  }\r\n\r\n  function compareX(a, b) {\r\n    return a.x - b.x;\r\n  } // find a bridge between vertices that connects hole with an outer ring and and link it\r\n\r\n  function eliminateHole(hole, outerNode) {\r\n    outerNode = findHoleBridge(hole, outerNode);\r\n\r\n    if (outerNode) {\r\n      const b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\r\n\r\n      filterPoints(outerNode, outerNode.next);\r\n      filterPoints(b, b.next);\r\n    }\r\n  } // David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\r\n  function findHoleBridge(hole, outerNode) {\r\n    let p = outerNode;\r\n    const hx = hole.x;\r\n    const hy = hole.y;\r\n    let qx = -Infinity,\r\n      m; // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n\r\n    do {\r\n      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n        const x = p.x + ((hy - p.y) * (p.next.x - p.x)) / (p.next.y - p.y);\r\n\r\n        if (x <= hx && x > qx) {\r\n          qx = x;\r\n\r\n          if (x === hx) {\r\n            if (hy === p.y) return p;\r\n            if (hy === p.next.y) return p.next;\r\n          }\r\n\r\n          m = p.x < p.next.x ? p : p.next;\r\n        }\r\n      }\r\n\r\n      p = p.next;\r\n    } while (p !== outerNode);\r\n\r\n    if (!m) return null;\r\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    const stop = m,\r\n      mx = m.x,\r\n      my = m.y;\r\n    let tanMin = Infinity,\r\n      tan;\r\n    p = m;\r\n\r\n    do {\r\n      if (\r\n        hx >= p.x &&\r\n        p.x >= mx &&\r\n        hx !== p.x &&\r\n        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)\r\n      ) {\r\n        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n\r\n        if (\r\n          locallyInside(p, hole) &&\r\n          (tan < tanMin ||\r\n            (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))\r\n        ) {\r\n          m = p;\r\n          tanMin = tan;\r\n        }\r\n      }\r\n\r\n      p = p.next;\r\n    } while (p !== stop);\r\n\r\n    return m;\r\n  } // whether sector in vertex m contains sector in vertex p in the same coordinates\r\n\r\n  function sectorContainsSector(m, p) {\r\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\r\n  } // interlink polygon nodes in z-order\r\n\r\n  function indexCurve(start, minX, minY, invSize) {\r\n    let p = start;\r\n\r\n    do {\r\n      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\r\n      p.prevZ = p.prev;\r\n      p.nextZ = p.next;\r\n      p = p.next;\r\n    } while (p !== start);\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n    sortLinked(p);\r\n  } // Simon Tatham's linked list merge sort algorithm\r\n  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\r\n  function sortLinked(list) {\r\n    let i,\r\n      p,\r\n      q,\r\n      e,\r\n      tail,\r\n      numMerges,\r\n      pSize,\r\n      qSize,\r\n      inSize = 1;\r\n\r\n    do {\r\n      p = list;\r\n      list = null;\r\n      tail = null;\r\n      numMerges = 0;\r\n\r\n      while (p) {\r\n        numMerges++;\r\n        q = p;\r\n        pSize = 0;\r\n\r\n        for (i = 0; i < inSize; i++) {\r\n          pSize++;\r\n          q = q.nextZ;\r\n          if (!q) break;\r\n        }\r\n\r\n        qSize = inSize;\r\n\r\n        while (pSize > 0 || (qSize > 0 && q)) {\r\n          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n            e = p;\r\n            p = p.nextZ;\r\n            pSize--;\r\n          } else {\r\n            e = q;\r\n            q = q.nextZ;\r\n            qSize--;\r\n          }\r\n\r\n          if (tail) tail.nextZ = e;\r\n          else list = e;\r\n          e.prevZ = tail;\r\n          tail = e;\r\n        }\r\n\r\n        p = q;\r\n      }\r\n\r\n      tail.nextZ = null;\r\n      inSize *= 2;\r\n    } while (numMerges > 1);\r\n\r\n    return list;\r\n  } // z-order of a point given coords and inverse of the longer side of data bbox\r\n\r\n  function zOrder(x, y, minX, minY, invSize) {\r\n    // coords are transformed into non-negative 15-bit integer range\r\n    x = 32767 * (x - minX) * invSize;\r\n    y = 32767 * (y - minY) * invSize;\r\n    x = (x | (x << 8)) & 0x00ff00ff;\r\n    x = (x | (x << 4)) & 0x0f0f0f0f;\r\n    x = (x | (x << 2)) & 0x33333333;\r\n    x = (x | (x << 1)) & 0x55555555;\r\n    y = (y | (y << 8)) & 0x00ff00ff;\r\n    y = (y | (y << 4)) & 0x0f0f0f0f;\r\n    y = (y | (y << 2)) & 0x33333333;\r\n    y = (y | (y << 1)) & 0x55555555;\r\n    return x | (y << 1);\r\n  } // find the leftmost node of a polygon ring\r\n\r\n  function getLeftmost(start) {\r\n    let p = start,\r\n      leftmost = start;\r\n\r\n    do {\r\n      if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\r\n      p = p.next;\r\n    } while (p !== start);\r\n\r\n    return leftmost;\r\n  } // check if a point lies within a convex triangle\r\n\r\n  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n    return (\r\n      (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n      (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n      (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0\r\n    );\r\n  } // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\r\n  function isValidDiagonal(a, b) {\r\n    return (\r\n      a.next.i !== b.i &&\r\n      a.prev.i !== b.i &&\r\n      !intersectsPolygon(a, b) && // dones't intersect other edges\r\n      ((locallyInside(a, b) &&\r\n        locallyInside(b, a) &&\r\n        middleInside(a, b) && // locally visible\r\n        (area(a.prev, a, b.prev) || area(a, b.prev, b))) || // does not create opposite-facing sectors\r\n        (equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0))\r\n    ); // special zero-length case\r\n  } // signed area of a triangle\r\n\r\n  function area(p, q, r) {\r\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n  } // check if two points are equal\r\n\r\n  function equals(p1, p2) {\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n  } // check if two segments intersect\r\n\r\n  function intersects(p1, q1, p2, q2) {\r\n    const o1 = sign(area(p1, q1, p2));\r\n    const o2 = sign(area(p1, q1, q2));\r\n    const o3 = sign(area(p2, q2, p1));\r\n    const o4 = sign(area(p2, q2, q1));\r\n    if (o1 !== o2 && o3 !== o4) return true; // general case\r\n\r\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\r\n\r\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\r\n\r\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\r\n\r\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\r\n\r\n    return false;\r\n  } // for collinear points p, q, r, check if point q lies on segment pr\r\n\r\n  function onSegment(p, q, r) {\r\n    return (\r\n      q.x <= Math.max(p.x, r.x) &&\r\n      q.x >= Math.min(p.x, r.x) &&\r\n      q.y <= Math.max(p.y, r.y) &&\r\n      q.y >= Math.min(p.y, r.y)\r\n    );\r\n  }\r\n\r\n  function sign(num) {\r\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\r\n  } // check if a polygon diagonal intersects any polygon segments\r\n\r\n  function intersectsPolygon(a, b) {\r\n    let p = a;\r\n\r\n    do {\r\n      if (\r\n        p.i !== a.i &&\r\n        p.next.i !== a.i &&\r\n        p.i !== b.i &&\r\n        p.next.i !== b.i &&\r\n        intersects(p, p.next, a, b)\r\n      )\r\n        return true;\r\n      p = p.next;\r\n    } while (p !== a);\r\n\r\n    return false;\r\n  } // check if a polygon diagonal is locally inside the polygon\r\n\r\n  function locallyInside(a, b) {\r\n    return area(a.prev, a, a.next) < 0\r\n      ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\r\n      : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\r\n  } // check if the middle point of a polygon diagonal is inside the polygon\r\n\r\n  function middleInside(a, b) {\r\n    let p = a,\r\n      inside = false;\r\n    const px = (a.x + b.x) / 2,\r\n      py = (a.y + b.y) / 2;\r\n\r\n    do {\r\n      if (\r\n        p.y > py !== p.next.y > py &&\r\n        p.next.y !== p.y &&\r\n        px < ((p.next.x - p.x) * (py - p.y)) / (p.next.y - p.y) + p.x\r\n      )\r\n        inside = !inside;\r\n      p = p.next;\r\n    } while (p !== a);\r\n\r\n    return inside;\r\n  } // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n  // if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\r\n  function splitPolygon(a, b) {\r\n    const a2 = new Node(a.i, a.x, a.y),\r\n      b2 = new Node(b.i, b.x, b.y),\r\n      an = a.next,\r\n      bp = b.prev;\r\n    a.next = b;\r\n    b.prev = a;\r\n    a2.next = an;\r\n    an.prev = a2;\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n    return b2;\r\n  } // create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\r\n  function insertNode(i, x, y, last) {\r\n    const p = new Node(i, x, y);\r\n\r\n    if (!last) {\r\n      p.prev = p;\r\n      p.next = p;\r\n    } else {\r\n      p.next = last.next;\r\n      p.prev = last;\r\n      last.next.prev = p;\r\n      last.next = p;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  function removeNode(p) {\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\r\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\r\n  }\r\n\r\n  function Node(i, x, y) {\r\n    // vertex index in coordinates array\r\n    this.i = i; // vertex coordinates\r\n\r\n    this.x = x;\r\n    this.y = y; // previous and next vertex nodes in a polygon ring\r\n\r\n    this.prev = null;\r\n    this.next = null; // z-order curve value\r\n\r\n    this.z = null; // previous and next nodes in z-order\r\n\r\n    this.prevZ = null;\r\n    this.nextZ = null; // indicates whether this is a steiner point\r\n\r\n    this.steiner = false;\r\n  }\r\n\r\n  function signedArea(data, start, end, dim) {\r\n    let sum = 0;\r\n\r\n    for (let i = start, j = end - dim; i < end; i += dim) {\r\n      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n      j = i;\r\n    }\r\n\r\n    return sum;\r\n  }\r\n\r\n  class ShapeUtils {\r\n    // calculate area of the contour polygon\r\n    static area(contour) {\r\n      const n = contour.length;\r\n      let a = 0.0;\r\n\r\n      for (let p = n - 1, q = 0; q < n; p = q++) {\r\n        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\r\n      }\r\n\r\n      return a * 0.5;\r\n    }\r\n\r\n    static isClockWise(pts) {\r\n      return ShapeUtils.area(pts) < 0;\r\n    }\r\n\r\n    static triangulateShape(contour, holes) {\r\n      const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\r\n      const holeIndices = []; // array of hole indices\r\n\r\n      const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n      removeDupEndPts(contour);\r\n      addContour(vertices, contour); //\r\n\r\n      let holeIndex = contour.length;\r\n      holes.forEach(removeDupEndPts);\r\n\r\n      for (let i = 0; i < holes.length; i++) {\r\n        holeIndices.push(holeIndex);\r\n        holeIndex += holes[i].length;\r\n        addContour(vertices, holes[i]);\r\n      } //\r\n\r\n      const triangles = Earcut.triangulate(vertices, holeIndices); //\r\n\r\n      for (let i = 0; i < triangles.length; i += 3) {\r\n        faces.push(triangles.slice(i, i + 3));\r\n      }\r\n\r\n      return faces;\r\n    }\r\n  }\r\n\r\n  function removeDupEndPts(points) {\r\n    const l = points.length;\r\n\r\n    if (l > 2 && points[l - 1].equals(points[0])) {\r\n      points.pop();\r\n    }\r\n  }\r\n\r\n  function addContour(vertices, contour) {\r\n    for (let i = 0; i < contour.length; i++) {\r\n      vertices.push(contour[i].x);\r\n      vertices.push(contour[i].y);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates extruded geometry from a path shape.\r\n   *\r\n   * parameters = {\r\n   *\r\n   *\tcurveSegments: <int>, // number of points on the curves\r\n   *\tsteps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n   *\tdepth: <float>, // Depth to extrude the shape\r\n   *\r\n   *\tbevelEnabled: <bool>, // turn on bevel\r\n   *\tbevelThickness: <float>, // how deep into the original shape bevel goes\r\n   *\tbevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\r\n   *\tbevelOffset: <float>, // how far from shape outline does bevel start\r\n   *\tbevelSegments: <int>, // number of bevel layers\r\n   *\r\n   *\textrudePath: <THREE.Curve> // curve to extrude shape along\r\n   *\r\n   *\tUVGenerator: <Object> // object that provides UV generator functions\r\n   *\r\n   * }\r\n   */\r\n\r\n  class ExtrudeGeometry extends BufferGeometry {\r\n    constructor(shapes, options) {\r\n      super();\r\n      this.type = 'ExtrudeGeometry';\r\n      this.parameters = {\r\n        shapes: shapes,\r\n        options: options,\r\n      };\r\n      shapes = Array.isArray(shapes) ? shapes : [shapes];\r\n      const scope = this;\r\n      const verticesArray = [];\r\n      const uvArray = [];\r\n\r\n      for (let i = 0, l = shapes.length; i < l; i++) {\r\n        const shape = shapes[i];\r\n        addShape(shape);\r\n      } // build geometry\r\n\r\n      this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\r\n      this.computeVertexNormals(); // functions\r\n\r\n      function addShape(shape) {\r\n        const placeholder = []; // options\r\n\r\n        const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n        const steps = options.steps !== undefined ? options.steps : 1;\r\n        let depth = options.depth !== undefined ? options.depth : 100;\r\n        let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n        let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n        let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n        let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\r\n        let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n        const extrudePath = options.extrudePath;\r\n        const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\r\n\r\n        if (options.amount !== undefined) {\r\n          console.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\r\n          depth = options.amount;\r\n        } //\r\n\r\n        let extrudePts,\r\n          extrudeByPath = false;\r\n        let splineTube, binormal, normal, position2;\r\n\r\n        if (extrudePath) {\r\n          extrudePts = extrudePath.getSpacedPoints(steps);\r\n          extrudeByPath = true;\r\n          bevelEnabled = false; // bevels not supported for path extrusion\r\n          // SETUP TNB variables\r\n          // TODO1 - have a .isClosed in spline?\r\n\r\n          splineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n          binormal = new Vector3();\r\n          normal = new Vector3();\r\n          position2 = new Vector3();\r\n        } // Safeguards if bevels are not enabled\r\n\r\n        if (!bevelEnabled) {\r\n          bevelSegments = 0;\r\n          bevelThickness = 0;\r\n          bevelSize = 0;\r\n          bevelOffset = 0;\r\n        } // Variables initialization\r\n\r\n        const shapePoints = shape.extractPoints(curveSegments);\r\n        let vertices = shapePoints.shape;\r\n        const holes = shapePoints.holes;\r\n        const reverse = !ShapeUtils.isClockWise(vertices);\r\n\r\n        if (reverse) {\r\n          vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n          for (let h = 0, hl = holes.length; h < hl; h++) {\r\n            const ahole = holes[h];\r\n\r\n            if (ShapeUtils.isClockWise(ahole)) {\r\n              holes[h] = ahole.reverse();\r\n            }\r\n          }\r\n        }\r\n\r\n        const faces = ShapeUtils.triangulateShape(vertices, holes);\r\n        /* Vertices */\r\n\r\n        const contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n        for (let h = 0, hl = holes.length; h < hl; h++) {\r\n          const ahole = holes[h];\r\n          vertices = vertices.concat(ahole);\r\n        }\r\n\r\n        function scalePt2(pt, vec, size) {\r\n          if (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\r\n          return vec.clone().multiplyScalar(size).add(pt);\r\n        }\r\n\r\n        const vlen = vertices.length,\r\n          flen = faces.length; // Find directions for point movement\r\n\r\n        function getBevelVec(inPt, inPrev, inNext) {\r\n          // computes for inPt the corresponding point inPt' on a new contour\r\n          //\t shifted by 1 unit (length of normalized vector) to the left\r\n          // if we walk along contour clockwise, this new contour is outside the old one\r\n          //\r\n          // inPt' is the intersection of the two lines parallel to the two\r\n          //\tadjacent edges of inPt at a distance of 1 unit on the left side.\r\n          let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n          // good reading for geometry algorithms (here: line-line intersection)\r\n          // http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n          const v_prev_x = inPt.x - inPrev.x,\r\n            v_prev_y = inPt.y - inPrev.y;\r\n          const v_next_x = inNext.x - inPt.x,\r\n            v_next_y = inNext.y - inPt.y;\r\n          const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\r\n\r\n          const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\r\n\r\n          if (Math.abs(collinear0) > Number.EPSILON) {\r\n            // not collinear\r\n            // length of vectors for normalizing\r\n            const v_prev_len = Math.sqrt(v_prev_lensq);\r\n            const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\r\n\r\n            const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\r\n            const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\r\n            const ptNextShift_x = inNext.x - v_next_y / v_next_len;\r\n            const ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\r\n\r\n            const sf =\r\n              ((ptNextShift_x - ptPrevShift_x) * v_next_y -\r\n                (ptNextShift_y - ptPrevShift_y) * v_next_x) /\r\n              (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\r\n\r\n            v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\r\n            v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\r\n            //\tbut prevent crazy spikes\r\n\r\n            const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\r\n\r\n            if (v_trans_lensq <= 2) {\r\n              return new Vector2(v_trans_x, v_trans_y);\r\n            } else {\r\n              shrink_by = Math.sqrt(v_trans_lensq / 2);\r\n            }\r\n          } else {\r\n            // handle special case of collinear edges\r\n            let direction_eq = false; // assumes: opposite\r\n\r\n            if (v_prev_x > Number.EPSILON) {\r\n              if (v_next_x > Number.EPSILON) {\r\n                direction_eq = true;\r\n              }\r\n            } else {\r\n              if (v_prev_x < -Number.EPSILON) {\r\n                if (v_next_x < -Number.EPSILON) {\r\n                  direction_eq = true;\r\n                }\r\n              } else {\r\n                if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\r\n                  direction_eq = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (direction_eq) {\r\n              // console.log(\"Warning: lines are a straight sequence\");\r\n              v_trans_x = -v_prev_y;\r\n              v_trans_y = v_prev_x;\r\n              shrink_by = Math.sqrt(v_prev_lensq);\r\n            } else {\r\n              // console.log(\"Warning: lines are a straight spike\");\r\n              v_trans_x = v_prev_x;\r\n              v_trans_y = v_prev_y;\r\n              shrink_by = Math.sqrt(v_prev_lensq / 2);\r\n            }\r\n          }\r\n\r\n          return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\r\n        }\r\n\r\n        const contourMovements = [];\r\n\r\n        for (let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\r\n          if (j === il) j = 0;\r\n          if (k === il) k = 0; //\t(j)---(i)---(k)\r\n          // console.log('i,j,k', i, j , k)\r\n\r\n          contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\r\n        }\r\n\r\n        const holesMovements = [];\r\n        let oneHoleMovements,\r\n          verticesMovements = contourMovements.concat();\r\n\r\n        for (let h = 0, hl = holes.length; h < hl; h++) {\r\n          const ahole = holes[h];\r\n          oneHoleMovements = [];\r\n\r\n          for (let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\r\n            if (j === il) j = 0;\r\n            if (k === il) k = 0; //\t(j)---(i)---(k)\r\n\r\n            oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\r\n          }\r\n\r\n          holesMovements.push(oneHoleMovements);\r\n          verticesMovements = verticesMovements.concat(oneHoleMovements);\r\n        } // Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n        for (let b = 0; b < bevelSegments; b++) {\r\n          //for ( b = bevelSegments; b > 0; b -- ) {\r\n          const t = b / bevelSegments;\r\n          const z = bevelThickness * Math.cos((t * Math.PI) / 2);\r\n          const bs = bevelSize * Math.sin((t * Math.PI) / 2) + bevelOffset; // contract shape\r\n\r\n          for (let i = 0, il = contour.length; i < il; i++) {\r\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\r\n            v(vert.x, vert.y, -z);\r\n          } // expand holes\r\n\r\n          for (let h = 0, hl = holes.length; h < hl; h++) {\r\n            const ahole = holes[h];\r\n            oneHoleMovements = holesMovements[h];\r\n\r\n            for (let i = 0, il = ahole.length; i < il; i++) {\r\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\r\n              v(vert.x, vert.y, -z);\r\n            }\r\n          }\r\n        }\r\n\r\n        const bs = bevelSize + bevelOffset; // Back facing vertices\r\n\r\n        for (let i = 0; i < vlen; i++) {\r\n          const vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\r\n\r\n          if (!extrudeByPath) {\r\n            v(vert.x, vert.y, 0);\r\n          } else {\r\n            // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n            normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\r\n            binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\r\n            position2.copy(extrudePts[0]).add(normal).add(binormal);\r\n            v(position2.x, position2.y, position2.z);\r\n          }\r\n        } // Add stepped vertices...\r\n        // Including front facing vertices\r\n\r\n        for (let s = 1; s <= steps; s++) {\r\n          for (let i = 0; i < vlen; i++) {\r\n            const vert = bevelEnabled\r\n              ? scalePt2(vertices[i], verticesMovements[i], bs)\r\n              : vertices[i];\r\n\r\n            if (!extrudeByPath) {\r\n              v(vert.x, vert.y, (depth / steps) * s);\r\n            } else {\r\n              // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n              normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\r\n              binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\r\n              position2.copy(extrudePts[s]).add(normal).add(binormal);\r\n              v(position2.x, position2.y, position2.z);\r\n            }\r\n          }\r\n        } // Add bevel segments planes\r\n        //for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\r\n        for (let b = bevelSegments - 1; b >= 0; b--) {\r\n          const t = b / bevelSegments;\r\n          const z = bevelThickness * Math.cos((t * Math.PI) / 2);\r\n          const bs = bevelSize * Math.sin((t * Math.PI) / 2) + bevelOffset; // contract shape\r\n\r\n          for (let i = 0, il = contour.length; i < il; i++) {\r\n            const vert = scalePt2(contour[i], contourMovements[i], bs);\r\n            v(vert.x, vert.y, depth + z);\r\n          } // expand holes\r\n\r\n          for (let h = 0, hl = holes.length; h < hl; h++) {\r\n            const ahole = holes[h];\r\n            oneHoleMovements = holesMovements[h];\r\n\r\n            for (let i = 0, il = ahole.length; i < il; i++) {\r\n              const vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\r\n\r\n              if (!extrudeByPath) {\r\n                v(vert.x, vert.y, depth + z);\r\n              } else {\r\n                v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\r\n              }\r\n            }\r\n          }\r\n        }\r\n        /* Faces */\r\n        // Top and bottom faces\r\n\r\n        buildLidFaces(); // Sides faces\r\n\r\n        buildSideFaces(); /////\tInternal functions\r\n\r\n        function buildLidFaces() {\r\n          const start = verticesArray.length / 3;\r\n\r\n          if (bevelEnabled) {\r\n            let layer = 0; // steps + 1\r\n\r\n            let offset = vlen * layer; // Bottom faces\r\n\r\n            for (let i = 0; i < flen; i++) {\r\n              const face = faces[i];\r\n              f3(face[2] + offset, face[1] + offset, face[0] + offset);\r\n            }\r\n\r\n            layer = steps + bevelSegments * 2;\r\n            offset = vlen * layer; // Top faces\r\n\r\n            for (let i = 0; i < flen; i++) {\r\n              const face = faces[i];\r\n              f3(face[0] + offset, face[1] + offset, face[2] + offset);\r\n            }\r\n          } else {\r\n            // Bottom faces\r\n            for (let i = 0; i < flen; i++) {\r\n              const face = faces[i];\r\n              f3(face[2], face[1], face[0]);\r\n            } // Top faces\r\n\r\n            for (let i = 0; i < flen; i++) {\r\n              const face = faces[i];\r\n              f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\r\n            }\r\n          }\r\n\r\n          scope.addGroup(start, verticesArray.length / 3 - start, 0);\r\n        } // Create faces for the z-sides of the shape\r\n\r\n        function buildSideFaces() {\r\n          const start = verticesArray.length / 3;\r\n          let layeroffset = 0;\r\n          sidewalls(contour, layeroffset);\r\n          layeroffset += contour.length;\r\n\r\n          for (let h = 0, hl = holes.length; h < hl; h++) {\r\n            const ahole = holes[h];\r\n            sidewalls(ahole, layeroffset); //, true\r\n\r\n            layeroffset += ahole.length;\r\n          }\r\n\r\n          scope.addGroup(start, verticesArray.length / 3 - start, 1);\r\n        }\r\n\r\n        function sidewalls(contour, layeroffset) {\r\n          let i = contour.length;\r\n\r\n          while (--i >= 0) {\r\n            const j = i;\r\n            let k = i - 1;\r\n            if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n            for (let s = 0, sl = steps + bevelSegments * 2; s < sl; s++) {\r\n              const slen1 = vlen * s;\r\n              const slen2 = vlen * (s + 1);\r\n              const a = layeroffset + j + slen1,\r\n                b = layeroffset + k + slen1,\r\n                c = layeroffset + k + slen2,\r\n                d = layeroffset + j + slen2;\r\n              f4(a, b, c, d);\r\n            }\r\n          }\r\n        }\r\n\r\n        function v(x, y, z) {\r\n          placeholder.push(x);\r\n          placeholder.push(y);\r\n          placeholder.push(z);\r\n        }\r\n\r\n        function f3(a, b, c) {\r\n          addVertex(a);\r\n          addVertex(b);\r\n          addVertex(c);\r\n          const nextIndex = verticesArray.length / 3;\r\n          const uvs = uvgen.generateTopUV(\r\n            scope,\r\n            verticesArray,\r\n            nextIndex - 3,\r\n            nextIndex - 2,\r\n            nextIndex - 1,\r\n          );\r\n          addUV(uvs[0]);\r\n          addUV(uvs[1]);\r\n          addUV(uvs[2]);\r\n        }\r\n\r\n        function f4(a, b, c, d) {\r\n          addVertex(a);\r\n          addVertex(b);\r\n          addVertex(d);\r\n          addVertex(b);\r\n          addVertex(c);\r\n          addVertex(d);\r\n          const nextIndex = verticesArray.length / 3;\r\n          const uvs = uvgen.generateSideWallUV(\r\n            scope,\r\n            verticesArray,\r\n            nextIndex - 6,\r\n            nextIndex - 3,\r\n            nextIndex - 2,\r\n            nextIndex - 1,\r\n          );\r\n          addUV(uvs[0]);\r\n          addUV(uvs[1]);\r\n          addUV(uvs[3]);\r\n          addUV(uvs[1]);\r\n          addUV(uvs[2]);\r\n          addUV(uvs[3]);\r\n        }\r\n\r\n        function addVertex(index) {\r\n          verticesArray.push(placeholder[index * 3 + 0]);\r\n          verticesArray.push(placeholder[index * 3 + 1]);\r\n          verticesArray.push(placeholder[index * 3 + 2]);\r\n        }\r\n\r\n        function addUV(vector2) {\r\n          uvArray.push(vector2.x);\r\n          uvArray.push(vector2.y);\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      const shapes = this.parameters.shapes;\r\n      const options = this.parameters.options;\r\n      return toJSON$1(shapes, options, data);\r\n    }\r\n  }\r\n\r\n  const WorldUVGenerator = {\r\n    generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\r\n      const a_x = vertices[indexA * 3];\r\n      const a_y = vertices[indexA * 3 + 1];\r\n      const b_x = vertices[indexB * 3];\r\n      const b_y = vertices[indexB * 3 + 1];\r\n      const c_x = vertices[indexC * 3];\r\n      const c_y = vertices[indexC * 3 + 1];\r\n      return [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\r\n    },\r\n    generateSideWallUV: function (geometry, vertices, indexA, indexB, indexC, indexD) {\r\n      const a_x = vertices[indexA * 3];\r\n      const a_y = vertices[indexA * 3 + 1];\r\n      const a_z = vertices[indexA * 3 + 2];\r\n      const b_x = vertices[indexB * 3];\r\n      const b_y = vertices[indexB * 3 + 1];\r\n      const b_z = vertices[indexB * 3 + 2];\r\n      const c_x = vertices[indexC * 3];\r\n      const c_y = vertices[indexC * 3 + 1];\r\n      const c_z = vertices[indexC * 3 + 2];\r\n      const d_x = vertices[indexD * 3];\r\n      const d_y = vertices[indexD * 3 + 1];\r\n      const d_z = vertices[indexD * 3 + 2];\r\n\r\n      if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {\r\n        return [\r\n          new Vector2(a_x, 1 - a_z),\r\n          new Vector2(b_x, 1 - b_z),\r\n          new Vector2(c_x, 1 - c_z),\r\n          new Vector2(d_x, 1 - d_z),\r\n        ];\r\n      } else {\r\n        return [\r\n          new Vector2(a_y, 1 - a_z),\r\n          new Vector2(b_y, 1 - b_z),\r\n          new Vector2(c_y, 1 - c_z),\r\n          new Vector2(d_y, 1 - d_z),\r\n        ];\r\n      }\r\n    },\r\n  };\r\n\r\n  function toJSON$1(shapes, options, data) {\r\n    data.shapes = [];\r\n\r\n    if (Array.isArray(shapes)) {\r\n      for (let i = 0, l = shapes.length; i < l; i++) {\r\n        const shape = shapes[i];\r\n        data.shapes.push(shape.uuid);\r\n      }\r\n    } else {\r\n      data.shapes.push(shapes.uuid);\r\n    }\r\n\r\n    if (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\r\n    return data;\r\n  }\r\n\r\n  class IcosahedronGeometry extends PolyhedronGeometry {\r\n    constructor(radius = 1, detail = 0) {\r\n      const t = (1 + Math.sqrt(5)) / 2;\r\n      const vertices = [\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n        -t,\r\n        t,\r\n        0,\r\n        -1,\r\n        t,\r\n        0,\r\n        1,\r\n        -t,\r\n        0,\r\n        -1,\r\n        -t,\r\n        0,\r\n        1,\r\n      ];\r\n      const indices = [\r\n        0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7,\r\n        1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9,\r\n        8, 1,\r\n      ];\r\n      super(vertices, indices, radius, detail);\r\n      this.type = 'IcosahedronGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail,\r\n      };\r\n    }\r\n  }\r\n\r\n  class LatheGeometry extends BufferGeometry {\r\n    constructor(points, segments = 12, phiStart = 0, phiLength = Math.PI * 2) {\r\n      super();\r\n      this.type = 'LatheGeometry';\r\n      this.parameters = {\r\n        points: points,\r\n        segments: segments,\r\n        phiStart: phiStart,\r\n        phiLength: phiLength,\r\n      };\r\n      segments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n      phiLength = clamp(phiLength, 0, Math.PI * 2); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const uvs = []; // helper variables\r\n\r\n      const inverseSegments = 1.0 / segments;\r\n      const vertex = new Vector3();\r\n      const uv = new Vector2(); // generate vertices and uvs\r\n\r\n      for (let i = 0; i <= segments; i++) {\r\n        const phi = phiStart + i * inverseSegments * phiLength;\r\n        const sin = Math.sin(phi);\r\n        const cos = Math.cos(phi);\r\n\r\n        for (let j = 0; j <= points.length - 1; j++) {\r\n          // vertex\r\n          vertex.x = points[j].x * sin;\r\n          vertex.y = points[j].y;\r\n          vertex.z = points[j].x * cos;\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // uv\r\n\r\n          uv.x = i / segments;\r\n          uv.y = j / (points.length - 1);\r\n          uvs.push(uv.x, uv.y);\r\n        }\r\n      } // indices\r\n\r\n      for (let i = 0; i < segments; i++) {\r\n        for (let j = 0; j < points.length - 1; j++) {\r\n          const base = j + i * points.length;\r\n          const a = base;\r\n          const b = base + points.length;\r\n          const c = base + points.length + 1;\r\n          const d = base + 1; // faces\r\n\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\r\n\r\n      this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\r\n      // because the corresponding vertices are identical (but still have different UVs).\r\n\r\n      if (phiLength === Math.PI * 2) {\r\n        const normals = this.attributes.normal.array;\r\n        const n1 = new Vector3();\r\n        const n2 = new Vector3();\r\n        const n = new Vector3(); // this is the buffer offset for the last line of vertices\r\n\r\n        const base = segments * points.length * 3;\r\n\r\n        for (let i = 0, j = 0; i < points.length; i++, j += 3) {\r\n          // select the normal of the vertex in the first line\r\n          n1.x = normals[j + 0];\r\n          n1.y = normals[j + 1];\r\n          n1.z = normals[j + 2]; // select the normal of the vertex in the last line\r\n\r\n          n2.x = normals[base + j + 0];\r\n          n2.y = normals[base + j + 1];\r\n          n2.z = normals[base + j + 2]; // average normals\r\n\r\n          n.addVectors(n1, n2).normalize(); // assign the new values to both normals\r\n\r\n          normals[j + 0] = normals[base + j + 0] = n.x;\r\n          normals[j + 1] = normals[base + j + 1] = n.y;\r\n          normals[j + 2] = normals[base + j + 2] = n.z;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  class OctahedronGeometry extends PolyhedronGeometry {\r\n    constructor(radius = 1, detail = 0) {\r\n      const vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\r\n      const indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\r\n      super(vertices, indices, radius, detail);\r\n      this.type = 'OctahedronGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parametric Surfaces Geometry\r\n   * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\r\n   */\r\n\r\n  class ParametricGeometry extends BufferGeometry {\r\n    constructor(func, slices, stacks) {\r\n      super();\r\n      this.type = 'ParametricGeometry';\r\n      this.parameters = {\r\n        func: func,\r\n        slices: slices,\r\n        stacks: stacks,\r\n      }; // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = [];\r\n      const EPS = 0.00001;\r\n      const normal = new Vector3();\r\n      const p0 = new Vector3(),\r\n        p1 = new Vector3();\r\n      const pu = new Vector3(),\r\n        pv = new Vector3();\r\n\r\n      if (func.length < 3) {\r\n        console.error(\r\n          'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.',\r\n        );\r\n      } // generate vertices, normals and uvs\r\n\r\n      const sliceCount = slices + 1;\r\n\r\n      for (let i = 0; i <= stacks; i++) {\r\n        const v = i / stacks;\r\n\r\n        for (let j = 0; j <= slices; j++) {\r\n          const u = j / slices; // vertex\r\n\r\n          func(u, v, p0);\r\n          vertices.push(p0.x, p0.y, p0.z); // normal\r\n          // approximate tangent vectors via finite differences\r\n\r\n          if (u - EPS >= 0) {\r\n            func(u - EPS, v, p1);\r\n            pu.subVectors(p0, p1);\r\n          } else {\r\n            func(u + EPS, v, p1);\r\n            pu.subVectors(p1, p0);\r\n          }\r\n\r\n          if (v - EPS >= 0) {\r\n            func(u, v - EPS, p1);\r\n            pv.subVectors(p0, p1);\r\n          } else {\r\n            func(u, v + EPS, p1);\r\n            pv.subVectors(p1, p0);\r\n          } // cross product of tangent vectors returns surface normal\r\n\r\n          normal.crossVectors(pu, pv).normalize();\r\n          normals.push(normal.x, normal.y, normal.z); // uv\r\n\r\n          uvs.push(u, v);\r\n        }\r\n      } // generate indices\r\n\r\n      for (let i = 0; i < stacks; i++) {\r\n        for (let j = 0; j < slices; j++) {\r\n          const a = i * sliceCount + j;\r\n          const b = i * sliceCount + j + 1;\r\n          const c = (i + 1) * sliceCount + j + 1;\r\n          const d = (i + 1) * sliceCount + j; // faces one and two\r\n\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  class RingGeometry extends BufferGeometry {\r\n    constructor(\r\n      innerRadius = 0.5,\r\n      outerRadius = 1,\r\n      thetaSegments = 8,\r\n      phiSegments = 1,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI * 2,\r\n    ) {\r\n      super();\r\n      this.type = 'RingGeometry';\r\n      this.parameters = {\r\n        innerRadius: innerRadius,\r\n        outerRadius: outerRadius,\r\n        thetaSegments: thetaSegments,\r\n        phiSegments: phiSegments,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength,\r\n      };\r\n      thetaSegments = Math.max(3, thetaSegments);\r\n      phiSegments = Math.max(1, phiSegments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // some helper variables\r\n\r\n      let radius = innerRadius;\r\n      const radiusStep = (outerRadius - innerRadius) / phiSegments;\r\n      const vertex = new Vector3();\r\n      const uv = new Vector2(); // generate vertices, normals and uvs\r\n\r\n      for (let j = 0; j <= phiSegments; j++) {\r\n        for (let i = 0; i <= thetaSegments; i++) {\r\n          // values are generate from the inside of the ring to the outside\r\n          const segment = thetaStart + (i / thetaSegments) * thetaLength; // vertex\r\n\r\n          vertex.x = radius * Math.cos(segment);\r\n          vertex.y = radius * Math.sin(segment);\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n          normals.push(0, 0, 1); // uv\r\n\r\n          uv.x = (vertex.x / outerRadius + 1) / 2;\r\n          uv.y = (vertex.y / outerRadius + 1) / 2;\r\n          uvs.push(uv.x, uv.y);\r\n        } // increase the radius for next row of vertices\r\n\r\n        radius += radiusStep;\r\n      } // indices\r\n\r\n      for (let j = 0; j < phiSegments; j++) {\r\n        const thetaSegmentLevel = j * (thetaSegments + 1);\r\n\r\n        for (let i = 0; i < thetaSegments; i++) {\r\n          const segment = i + thetaSegmentLevel;\r\n          const a = segment;\r\n          const b = segment + thetaSegments + 1;\r\n          const c = segment + thetaSegments + 2;\r\n          const d = segment + 1; // faces\r\n\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  class ShapeGeometry extends BufferGeometry {\r\n    constructor(shapes, curveSegments = 12) {\r\n      super();\r\n      this.type = 'ShapeGeometry';\r\n      this.parameters = {\r\n        shapes: shapes,\r\n        curveSegments: curveSegments,\r\n      }; // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      let groupStart = 0;\r\n      let groupCount = 0; // allow single and array values for \"shapes\" parameter\r\n\r\n      if (Array.isArray(shapes) === false) {\r\n        addShape(shapes);\r\n      } else {\r\n        for (let i = 0; i < shapes.length; i++) {\r\n          addShape(shapes[i]);\r\n          this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\r\n\r\n          groupStart += groupCount;\r\n          groupCount = 0;\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\r\n\r\n      function addShape(shape) {\r\n        const indexOffset = vertices.length / 3;\r\n        const points = shape.extractPoints(curveSegments);\r\n        let shapeVertices = points.shape;\r\n        const shapeHoles = points.holes; // check direction of vertices\r\n\r\n        if (ShapeUtils.isClockWise(shapeVertices) === false) {\r\n          shapeVertices = shapeVertices.reverse();\r\n        }\r\n\r\n        for (let i = 0, l = shapeHoles.length; i < l; i++) {\r\n          const shapeHole = shapeHoles[i];\r\n\r\n          if (ShapeUtils.isClockWise(shapeHole) === true) {\r\n            shapeHoles[i] = shapeHole.reverse();\r\n          }\r\n        }\r\n\r\n        const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\r\n\r\n        for (let i = 0, l = shapeHoles.length; i < l; i++) {\r\n          const shapeHole = shapeHoles[i];\r\n          shapeVertices = shapeVertices.concat(shapeHole);\r\n        } // vertices, normals, uvs\r\n\r\n        for (let i = 0, l = shapeVertices.length; i < l; i++) {\r\n          const vertex = shapeVertices[i];\r\n          vertices.push(vertex.x, vertex.y, 0);\r\n          normals.push(0, 0, 1);\r\n          uvs.push(vertex.x, vertex.y); // world uvs\r\n        } // incides\r\n\r\n        for (let i = 0, l = faces.length; i < l; i++) {\r\n          const face = faces[i];\r\n          const a = face[0] + indexOffset;\r\n          const b = face[1] + indexOffset;\r\n          const c = face[2] + indexOffset;\r\n          indices.push(a, b, c);\r\n          groupCount += 3;\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      const shapes = this.parameters.shapes;\r\n      return toJSON(shapes, data);\r\n    }\r\n  }\r\n\r\n  function toJSON(shapes, data) {\r\n    data.shapes = [];\r\n\r\n    if (Array.isArray(shapes)) {\r\n      for (let i = 0, l = shapes.length; i < l; i++) {\r\n        const shape = shapes[i];\r\n        data.shapes.push(shape.uuid);\r\n      }\r\n    } else {\r\n      data.shapes.push(shapes.uuid);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  class SphereGeometry extends BufferGeometry {\r\n    constructor(\r\n      radius = 1,\r\n      widthSegments = 8,\r\n      heightSegments = 6,\r\n      phiStart = 0,\r\n      phiLength = Math.PI * 2,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI,\r\n    ) {\r\n      super();\r\n      this.type = 'SphereGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        widthSegments: widthSegments,\r\n        heightSegments: heightSegments,\r\n        phiStart: phiStart,\r\n        phiLength: phiLength,\r\n        thetaStart: thetaStart,\r\n        thetaLength: thetaLength,\r\n      };\r\n      widthSegments = Math.max(3, Math.floor(widthSegments));\r\n      heightSegments = Math.max(2, Math.floor(heightSegments));\r\n      const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\r\n      let index = 0;\r\n      const grid = [];\r\n      const vertex = new Vector3();\r\n      const normal = new Vector3(); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // generate vertices, normals and uvs\r\n\r\n      for (let iy = 0; iy <= heightSegments; iy++) {\r\n        const verticesRow = [];\r\n        const v = iy / heightSegments; // special case for the poles\r\n\r\n        let uOffset = 0;\r\n\r\n        if (iy == 0 && thetaStart == 0) {\r\n          uOffset = 0.5 / widthSegments;\r\n        } else if (iy == heightSegments && thetaEnd == Math.PI) {\r\n          uOffset = -0.5 / widthSegments;\r\n        }\r\n\r\n        for (let ix = 0; ix <= widthSegments; ix++) {\r\n          const u = ix / widthSegments; // vertex\r\n\r\n          vertex.x =\r\n            -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\r\n          vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\r\n          vertex.z =\r\n            radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n          normal.copy(vertex).normalize();\r\n          normals.push(normal.x, normal.y, normal.z); // uv\r\n\r\n          uvs.push(u + uOffset, 1 - v);\r\n          verticesRow.push(index++);\r\n        }\r\n\r\n        grid.push(verticesRow);\r\n      } // indices\r\n\r\n      for (let iy = 0; iy < heightSegments; iy++) {\r\n        for (let ix = 0; ix < widthSegments; ix++) {\r\n          const a = grid[iy][ix + 1];\r\n          const b = grid[iy][ix];\r\n          const c = grid[iy + 1][ix];\r\n          const d = grid[iy + 1][ix + 1];\r\n          if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\r\n          if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  class TetrahedronGeometry extends PolyhedronGeometry {\r\n    constructor(radius = 1, detail = 0) {\r\n      const vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\r\n      const indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\r\n      super(vertices, indices, radius, detail);\r\n      this.type = 'TetrahedronGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        detail: detail,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Text = 3D Text\r\n   *\r\n   * parameters = {\r\n   *\tfont: <THREE.Font>, // font\r\n   *\r\n   *\tsize: <float>, // size of the text\r\n   *\theight: <float>, // thickness to extrude text\r\n   *\tcurveSegments: <int>, // number of points on the curves\r\n   *\r\n   *\tbevelEnabled: <bool>, // turn on bevel\r\n   *\tbevelThickness: <float>, // how deep into text bevel goes\r\n   *\tbevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n   *\tbevelOffset: <float> // how far from text outline does bevel start\r\n   * }\r\n   */\r\n\r\n  class TextGeometry extends ExtrudeGeometry {\r\n    constructor(text, parameters = {}) {\r\n      const font = parameters.font;\r\n\r\n      if (!(font && font.isFont)) {\r\n        console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\r\n        return new BufferGeometry();\r\n      }\r\n\r\n      const shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\r\n\r\n      parameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\r\n\r\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\r\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\r\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\r\n      super(shapes, parameters);\r\n      this.type = 'TextGeometry';\r\n    }\r\n  }\r\n\r\n  class TorusGeometry extends BufferGeometry {\r\n    constructor(\r\n      radius = 1,\r\n      tube = 0.4,\r\n      radialSegments = 8,\r\n      tubularSegments = 6,\r\n      arc = Math.PI * 2,\r\n    ) {\r\n      super();\r\n      this.type = 'TorusGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        tube: tube,\r\n        radialSegments: radialSegments,\r\n        tubularSegments: tubularSegments,\r\n        arc: arc,\r\n      };\r\n      radialSegments = Math.floor(radialSegments);\r\n      tubularSegments = Math.floor(tubularSegments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      const center = new Vector3();\r\n      const vertex = new Vector3();\r\n      const normal = new Vector3(); // generate vertices, normals and uvs\r\n\r\n      for (let j = 0; j <= radialSegments; j++) {\r\n        for (let i = 0; i <= tubularSegments; i++) {\r\n          const u = (i / tubularSegments) * arc;\r\n          const v = (j / radialSegments) * Math.PI * 2; // vertex\r\n\r\n          vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\r\n          vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\r\n          vertex.z = tube * Math.sin(v);\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal\r\n\r\n          center.x = radius * Math.cos(u);\r\n          center.y = radius * Math.sin(u);\r\n          normal.subVectors(vertex, center).normalize();\r\n          normals.push(normal.x, normal.y, normal.z); // uv\r\n\r\n          uvs.push(i / tubularSegments);\r\n          uvs.push(j / radialSegments);\r\n        }\r\n      } // generate indices\r\n\r\n      for (let j = 1; j <= radialSegments; j++) {\r\n        for (let i = 1; i <= tubularSegments; i++) {\r\n          // indices\r\n          const a = (tubularSegments + 1) * j + i - 1;\r\n          const b = (tubularSegments + 1) * (j - 1) + i - 1;\r\n          const c = (tubularSegments + 1) * (j - 1) + i;\r\n          const d = (tubularSegments + 1) * j + i; // faces\r\n\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\r\n    }\r\n  }\r\n\r\n  class TorusKnotGeometry extends BufferGeometry {\r\n    constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3) {\r\n      super();\r\n      this.type = 'TorusKnotGeometry';\r\n      this.parameters = {\r\n        radius: radius,\r\n        tube: tube,\r\n        tubularSegments: tubularSegments,\r\n        radialSegments: radialSegments,\r\n        p: p,\r\n        q: q,\r\n      };\r\n      tubularSegments = Math.floor(tubularSegments);\r\n      radialSegments = Math.floor(radialSegments); // buffers\r\n\r\n      const indices = [];\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = []; // helper variables\r\n\r\n      const vertex = new Vector3();\r\n      const normal = new Vector3();\r\n      const P1 = new Vector3();\r\n      const P2 = new Vector3();\r\n      const B = new Vector3();\r\n      const T = new Vector3();\r\n      const N = new Vector3(); // generate vertices, normals and uvs\r\n\r\n      for (let i = 0; i <= tubularSegments; ++i) {\r\n        // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n        const u = (i / tubularSegments) * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n        // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n        calculatePositionOnCurve(u, p, q, radius, P1);\r\n        calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\r\n\r\n        T.subVectors(P2, P1);\r\n        N.addVectors(P2, P1);\r\n        B.crossVectors(T, N);\r\n        N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\r\n\r\n        B.normalize();\r\n        N.normalize();\r\n\r\n        for (let j = 0; j <= radialSegments; ++j) {\r\n          // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n          // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n          const v = (j / radialSegments) * Math.PI * 2;\r\n          const cx = -tube * Math.cos(v);\r\n          const cy = tube * Math.sin(v); // now calculate the final vertex position.\r\n          // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n          vertex.x = P1.x + (cx * N.x + cy * B.x);\r\n          vertex.y = P1.y + (cx * N.y + cy * B.y);\r\n          vertex.z = P1.z + (cx * N.z + cy * B.z);\r\n          vertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n          normal.subVectors(vertex, P1).normalize();\r\n          normals.push(normal.x, normal.y, normal.z); // uv\r\n\r\n          uvs.push(i / tubularSegments);\r\n          uvs.push(j / radialSegments);\r\n        }\r\n      } // generate indices\r\n\r\n      for (let j = 1; j <= tubularSegments; j++) {\r\n        for (let i = 1; i <= radialSegments; i++) {\r\n          // indices\r\n          const a = (radialSegments + 1) * (j - 1) + (i - 1);\r\n          const b = (radialSegments + 1) * j + (i - 1);\r\n          const c = (radialSegments + 1) * j + i;\r\n          const d = (radialSegments + 1) * (j - 1) + i; // faces\r\n\r\n          indices.push(a, b, d);\r\n          indices.push(b, c, d);\r\n        }\r\n      } // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\r\n\r\n      function calculatePositionOnCurve(u, p, q, radius, position) {\r\n        const cu = Math.cos(u);\r\n        const su = Math.sin(u);\r\n        const quOverP = (q / p) * u;\r\n        const cs = Math.cos(quOverP);\r\n        position.x = radius * (2 + cs) * 0.5 * cu;\r\n        position.y = radius * (2 + cs) * su * 0.5;\r\n        position.z = radius * Math.sin(quOverP) * 0.5;\r\n      }\r\n    }\r\n  }\r\n\r\n  class TubeGeometry extends BufferGeometry {\r\n    constructor(path, tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {\r\n      super();\r\n      this.type = 'TubeGeometry';\r\n      this.parameters = {\r\n        path: path,\r\n        tubularSegments: tubularSegments,\r\n        radius: radius,\r\n        radialSegments: radialSegments,\r\n        closed: closed,\r\n      };\r\n      const frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\r\n\r\n      this.tangents = frames.tangents;\r\n      this.normals = frames.normals;\r\n      this.binormals = frames.binormals; // helper variables\r\n\r\n      const vertex = new Vector3();\r\n      const normal = new Vector3();\r\n      const uv = new Vector2();\r\n      let P = new Vector3(); // buffer\r\n\r\n      const vertices = [];\r\n      const normals = [];\r\n      const uvs = [];\r\n      const indices = []; // create buffer data\r\n\r\n      generateBufferData(); // build geometry\r\n\r\n      this.setIndex(indices);\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\r\n\r\n      function generateBufferData() {\r\n        for (let i = 0; i < tubularSegments; i++) {\r\n          generateSegment(i);\r\n        } // if the geometry is not closed, generate the last row of vertices and normals\r\n        // at the regular position on the given path\r\n        //\r\n        // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n        generateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\r\n        // this makes it easy compute correct values for closed geometries\r\n\r\n        generateUVs(); // finally create faces\r\n\r\n        generateIndices();\r\n      }\r\n\r\n      function generateSegment(i) {\r\n        // we use getPointAt to sample evenly distributed points from the given path\r\n        P = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\r\n\r\n        const N = frames.normals[i];\r\n        const B = frames.binormals[i]; // generate normals and vertices for the current segment\r\n\r\n        for (let j = 0; j <= radialSegments; j++) {\r\n          const v = (j / radialSegments) * Math.PI * 2;\r\n          const sin = Math.sin(v);\r\n          const cos = -Math.cos(v); // normal\r\n\r\n          normal.x = cos * N.x + sin * B.x;\r\n          normal.y = cos * N.y + sin * B.y;\r\n          normal.z = cos * N.z + sin * B.z;\r\n          normal.normalize();\r\n          normals.push(normal.x, normal.y, normal.z); // vertex\r\n\r\n          vertex.x = P.x + radius * normal.x;\r\n          vertex.y = P.y + radius * normal.y;\r\n          vertex.z = P.z + radius * normal.z;\r\n          vertices.push(vertex.x, vertex.y, vertex.z);\r\n        }\r\n      }\r\n\r\n      function generateIndices() {\r\n        for (let j = 1; j <= tubularSegments; j++) {\r\n          for (let i = 1; i <= radialSegments; i++) {\r\n            const a = (radialSegments + 1) * (j - 1) + (i - 1);\r\n            const b = (radialSegments + 1) * j + (i - 1);\r\n            const c = (radialSegments + 1) * j + i;\r\n            const d = (radialSegments + 1) * (j - 1) + i; // faces\r\n\r\n            indices.push(a, b, d);\r\n            indices.push(b, c, d);\r\n          }\r\n        }\r\n      }\r\n\r\n      function generateUVs() {\r\n        for (let i = 0; i <= tubularSegments; i++) {\r\n          for (let j = 0; j <= radialSegments; j++) {\r\n            uv.x = i / tubularSegments;\r\n            uv.y = j / radialSegments;\r\n            uvs.push(uv.x, uv.y);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.path = this.parameters.path.toJSON();\r\n      return data;\r\n    }\r\n  }\r\n\r\n  class WireframeGeometry extends BufferGeometry {\r\n    constructor(geometry) {\r\n      super();\r\n      this.type = 'WireframeGeometry';\r\n\r\n      if (geometry.isGeometry === true) {\r\n        console.error(\r\n          'THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n        );\r\n        return;\r\n      } // buffer\r\n\r\n      const vertices = []; // helper variables\r\n\r\n      const edge = [0, 0],\r\n        edges = {};\r\n      const vertex = new Vector3();\r\n\r\n      if (geometry.index !== null) {\r\n        // indexed BufferGeometry\r\n        const position = geometry.attributes.position;\r\n        const indices = geometry.index;\r\n        let groups = geometry.groups;\r\n\r\n        if (groups.length === 0) {\r\n          groups = [\r\n            {\r\n              start: 0,\r\n              count: indices.count,\r\n              materialIndex: 0,\r\n            },\r\n          ];\r\n        } // create a data structure that contains all eges without duplicates\r\n\r\n        for (let o = 0, ol = groups.length; o < ol; ++o) {\r\n          const group = groups[o];\r\n          const start = group.start;\r\n          const count = group.count;\r\n\r\n          for (let i = start, l = start + count; i < l; i += 3) {\r\n            for (let j = 0; j < 3; j++) {\r\n              const edge1 = indices.getX(i + j);\r\n              const edge2 = indices.getX(i + ((j + 1) % 3));\r\n              edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\r\n\r\n              edge[1] = Math.max(edge1, edge2);\r\n              const key = edge[0] + ',' + edge[1];\r\n\r\n              if (edges[key] === undefined) {\r\n                edges[key] = {\r\n                  index1: edge[0],\r\n                  index2: edge[1],\r\n                };\r\n              }\r\n            }\r\n          }\r\n        } // generate vertices\r\n\r\n        for (const key in edges) {\r\n          const e = edges[key];\r\n          vertex.fromBufferAttribute(position, e.index1);\r\n          vertices.push(vertex.x, vertex.y, vertex.z);\r\n          vertex.fromBufferAttribute(position, e.index2);\r\n          vertices.push(vertex.x, vertex.y, vertex.z);\r\n        }\r\n      } else {\r\n        // non-indexed BufferGeometry\r\n        const position = geometry.attributes.position;\r\n\r\n        for (let i = 0, l = position.count / 3; i < l; i++) {\r\n          for (let j = 0; j < 3; j++) {\r\n            // three edges per triangle, an edge is represented as (index1, index2)\r\n            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n            const index1 = 3 * i + j;\r\n            vertex.fromBufferAttribute(position, index1);\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n            const index2 = 3 * i + ((j + 1) % 3);\r\n            vertex.fromBufferAttribute(position, index2);\r\n            vertices.push(vertex.x, vertex.y, vertex.z);\r\n          }\r\n        }\r\n      } // build geometry\r\n\r\n      this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n    }\r\n  }\r\n\r\n  var Geometries = /*#__PURE__*/ Object.freeze({\r\n    __proto__: null,\r\n    BoxGeometry: BoxGeometry,\r\n    BoxBufferGeometry: BoxGeometry,\r\n    CircleGeometry: CircleGeometry,\r\n    CircleBufferGeometry: CircleGeometry,\r\n    ConeGeometry: ConeGeometry,\r\n    ConeBufferGeometry: ConeGeometry,\r\n    CylinderGeometry: CylinderGeometry,\r\n    CylinderBufferGeometry: CylinderGeometry,\r\n    DodecahedronGeometry: DodecahedronGeometry,\r\n    DodecahedronBufferGeometry: DodecahedronGeometry,\r\n    EdgesGeometry: EdgesGeometry,\r\n    ExtrudeGeometry: ExtrudeGeometry,\r\n    ExtrudeBufferGeometry: ExtrudeGeometry,\r\n    IcosahedronGeometry: IcosahedronGeometry,\r\n    IcosahedronBufferGeometry: IcosahedronGeometry,\r\n    LatheGeometry: LatheGeometry,\r\n    LatheBufferGeometry: LatheGeometry,\r\n    OctahedronGeometry: OctahedronGeometry,\r\n    OctahedronBufferGeometry: OctahedronGeometry,\r\n    ParametricGeometry: ParametricGeometry,\r\n    ParametricBufferGeometry: ParametricGeometry,\r\n    PlaneGeometry: PlaneGeometry,\r\n    PlaneBufferGeometry: PlaneGeometry,\r\n    PolyhedronGeometry: PolyhedronGeometry,\r\n    PolyhedronBufferGeometry: PolyhedronGeometry,\r\n    RingGeometry: RingGeometry,\r\n    RingBufferGeometry: RingGeometry,\r\n    ShapeGeometry: ShapeGeometry,\r\n    ShapeBufferGeometry: ShapeGeometry,\r\n    SphereGeometry: SphereGeometry,\r\n    SphereBufferGeometry: SphereGeometry,\r\n    TetrahedronGeometry: TetrahedronGeometry,\r\n    TetrahedronBufferGeometry: TetrahedronGeometry,\r\n    TextGeometry: TextGeometry,\r\n    TextBufferGeometry: TextGeometry,\r\n    TorusGeometry: TorusGeometry,\r\n    TorusBufferGeometry: TorusGeometry,\r\n    TorusKnotGeometry: TorusKnotGeometry,\r\n    TorusKnotBufferGeometry: TorusKnotGeometry,\r\n    TubeGeometry: TubeGeometry,\r\n    TubeBufferGeometry: TubeGeometry,\r\n    WireframeGeometry: WireframeGeometry,\r\n  });\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <THREE.Color>\r\n   * }\r\n   */\r\n\r\n  class ShadowMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'ShadowMaterial';\r\n      this.color = new Color(0x000000);\r\n      this.transparent = true;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  ShadowMaterial.prototype.isShadowMaterial = true;\r\n\r\n  class RawShaderMaterial extends ShaderMaterial {\r\n    constructor(parameters) {\r\n      super(parameters);\r\n      this.type = 'RawShaderMaterial';\r\n    }\r\n  }\r\n\r\n  RawShaderMaterial.prototype.isRawShaderMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\troughness: <float>,\r\n   *\tmetalness: <float>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tlightMap: new THREE.Texture( <Image> ),\r\n   *\tlightMapIntensity: <float>\r\n   *\r\n   *\taoMap: new THREE.Texture( <Image> ),\r\n   *\taoMapIntensity: <float>\r\n   *\r\n   *\temissive: <hex>,\r\n   *\temissiveIntensity: <float>\r\n   *\temissiveMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tbumpMap: new THREE.Texture( <Image> ),\r\n   *\tbumpScale: <float>,\r\n   *\r\n   *\tnormalMap: new THREE.Texture( <Image> ),\r\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\r\n   *\tnormalScale: <Vector2>,\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\troughnessMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tmetalnessMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n   *\tenvMapIntensity: <float>\r\n   *\r\n   *\trefractionRatio: <float>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>,\r\n   *\r\n   *\tflatShading: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshStandardMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.defines = {\r\n        STANDARD: '',\r\n      };\r\n      this.type = 'MeshStandardMaterial';\r\n      this.color = new Color(0xffffff); // diffuse\r\n\r\n      this.roughness = 1.0;\r\n      this.metalness = 0.0;\r\n      this.map = null;\r\n      this.lightMap = null;\r\n      this.lightMapIntensity = 1.0;\r\n      this.aoMap = null;\r\n      this.aoMapIntensity = 1.0;\r\n      this.emissive = new Color(0x000000);\r\n      this.emissiveIntensity = 1.0;\r\n      this.emissiveMap = null;\r\n      this.bumpMap = null;\r\n      this.bumpScale = 1;\r\n      this.normalMap = null;\r\n      this.normalMapType = TangentSpaceNormalMap;\r\n      this.normalScale = new Vector2(1, 1);\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.roughnessMap = null;\r\n      this.metalnessMap = null;\r\n      this.alphaMap = null;\r\n      this.envMap = null;\r\n      this.envMapIntensity = 1.0;\r\n      this.refractionRatio = 0.98;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.wireframeLinecap = 'round';\r\n      this.wireframeLinejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.flatShading = false;\r\n      this.vertexTangents = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.defines = {\r\n        STANDARD: '',\r\n      };\r\n      this.color.copy(source.color);\r\n      this.roughness = source.roughness;\r\n      this.metalness = source.metalness;\r\n      this.map = source.map;\r\n      this.lightMap = source.lightMap;\r\n      this.lightMapIntensity = source.lightMapIntensity;\r\n      this.aoMap = source.aoMap;\r\n      this.aoMapIntensity = source.aoMapIntensity;\r\n      this.emissive.copy(source.emissive);\r\n      this.emissiveMap = source.emissiveMap;\r\n      this.emissiveIntensity = source.emissiveIntensity;\r\n      this.bumpMap = source.bumpMap;\r\n      this.bumpScale = source.bumpScale;\r\n      this.normalMap = source.normalMap;\r\n      this.normalMapType = source.normalMapType;\r\n      this.normalScale.copy(source.normalScale);\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.roughnessMap = source.roughnessMap;\r\n      this.metalnessMap = source.metalnessMap;\r\n      this.alphaMap = source.alphaMap;\r\n      this.envMap = source.envMap;\r\n      this.envMapIntensity = source.envMapIntensity;\r\n      this.refractionRatio = source.refractionRatio;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.wireframeLinecap = source.wireframeLinecap;\r\n      this.wireframeLinejoin = source.wireframeLinejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      this.flatShading = source.flatShading;\r\n      this.vertexTangents = source.vertexTangents;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tclearcoat: <float>,\r\n   *\tclearcoatMap: new THREE.Texture( <Image> ),\r\n   *\tclearcoatRoughness: <float>,\r\n   *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\r\n   *\tclearcoatNormalScale: <Vector2>,\r\n   *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\treflectivity: <float>,\r\n   *\tior: <float>,\r\n   *\r\n   *\tsheen: <Color>,\r\n   *\r\n   *\ttransmission: <float>,\r\n   *\ttransmissionMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tthickness: <float>,\r\n   *\tthicknessMap: new THREE.Texture( <Image> ),\r\n   *\tattenuationDistance: <float>,\r\n   *\tattenuationColor: <Color>\r\n   * }\r\n   */\r\n\r\n  class MeshPhysicalMaterial extends MeshStandardMaterial {\r\n    constructor(parameters) {\r\n      super();\r\n      this.defines = {\r\n        STANDARD: '',\r\n        PHYSICAL: '',\r\n      };\r\n      this.type = 'MeshPhysicalMaterial';\r\n      this.clearcoat = 0.0;\r\n      this.clearcoatMap = null;\r\n      this.clearcoatRoughness = 0.0;\r\n      this.clearcoatRoughnessMap = null;\r\n      this.clearcoatNormalScale = new Vector2(1, 1);\r\n      this.clearcoatNormalMap = null;\r\n      this.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n      Object.defineProperty(this, 'ior', {\r\n        get: function () {\r\n          return (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\r\n        },\r\n        set: function (ior) {\r\n          this.reflectivity = clamp((2.5 * (ior - 1)) / (ior + 1), 0, 1);\r\n        },\r\n      });\r\n      this.sheen = null; // null will disable sheen bsdf\r\n\r\n      this.transmission = 0.0;\r\n      this.transmissionMap = null;\r\n      this.thickness = 0.01;\r\n      this.thicknessMap = null;\r\n      this.attenuationDistance = 0.0;\r\n      this.attenuationColor = new Color(1, 1, 1);\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.defines = {\r\n        STANDARD: '',\r\n        PHYSICAL: '',\r\n      };\r\n      this.clearcoat = source.clearcoat;\r\n      this.clearcoatMap = source.clearcoatMap;\r\n      this.clearcoatRoughness = source.clearcoatRoughness;\r\n      this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\r\n      this.clearcoatNormalMap = source.clearcoatNormalMap;\r\n      this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\r\n      this.reflectivity = source.reflectivity;\r\n\r\n      if (source.sheen) {\r\n        this.sheen = (this.sheen || new Color()).copy(source.sheen);\r\n      } else {\r\n        this.sheen = null;\r\n      }\r\n\r\n      this.transmission = source.transmission;\r\n      this.transmissionMap = source.transmissionMap;\r\n      this.thickness = source.thickness;\r\n      this.thicknessMap = source.thicknessMap;\r\n      this.attenuationDistance = source.attenuationDistance;\r\n      this.attenuationColor.copy(source.attenuationColor);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\tspecular: <hex>,\r\n   *\tshininess: <float>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tlightMap: new THREE.Texture( <Image> ),\r\n   *\tlightMapIntensity: <float>\r\n   *\r\n   *\taoMap: new THREE.Texture( <Image> ),\r\n   *\taoMapIntensity: <float>\r\n   *\r\n   *\temissive: <hex>,\r\n   *\temissiveIntensity: <float>\r\n   *\temissiveMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tbumpMap: new THREE.Texture( <Image> ),\r\n   *\tbumpScale: <float>,\r\n   *\r\n   *\tnormalMap: new THREE.Texture( <Image> ),\r\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\r\n   *\tnormalScale: <Vector2>,\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\tspecularMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n   *\tcombine: THREE.MultiplyOperation,\r\n   *\treflectivity: <float>,\r\n   *\trefractionRatio: <float>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>,\r\n   *\r\n   *\tflatShading: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshPhongMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshPhongMaterial';\r\n      this.color = new Color(0xffffff); // diffuse\r\n\r\n      this.specular = new Color(0x111111);\r\n      this.shininess = 30;\r\n      this.map = null;\r\n      this.lightMap = null;\r\n      this.lightMapIntensity = 1.0;\r\n      this.aoMap = null;\r\n      this.aoMapIntensity = 1.0;\r\n      this.emissive = new Color(0x000000);\r\n      this.emissiveIntensity = 1.0;\r\n      this.emissiveMap = null;\r\n      this.bumpMap = null;\r\n      this.bumpScale = 1;\r\n      this.normalMap = null;\r\n      this.normalMapType = TangentSpaceNormalMap;\r\n      this.normalScale = new Vector2(1, 1);\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.specularMap = null;\r\n      this.alphaMap = null;\r\n      this.envMap = null;\r\n      this.combine = MultiplyOperation;\r\n      this.reflectivity = 1;\r\n      this.refractionRatio = 0.98;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.wireframeLinecap = 'round';\r\n      this.wireframeLinejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.flatShading = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.specular.copy(source.specular);\r\n      this.shininess = source.shininess;\r\n      this.map = source.map;\r\n      this.lightMap = source.lightMap;\r\n      this.lightMapIntensity = source.lightMapIntensity;\r\n      this.aoMap = source.aoMap;\r\n      this.aoMapIntensity = source.aoMapIntensity;\r\n      this.emissive.copy(source.emissive);\r\n      this.emissiveMap = source.emissiveMap;\r\n      this.emissiveIntensity = source.emissiveIntensity;\r\n      this.bumpMap = source.bumpMap;\r\n      this.bumpScale = source.bumpScale;\r\n      this.normalMap = source.normalMap;\r\n      this.normalMapType = source.normalMapType;\r\n      this.normalScale.copy(source.normalScale);\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.specularMap = source.specularMap;\r\n      this.alphaMap = source.alphaMap;\r\n      this.envMap = source.envMap;\r\n      this.combine = source.combine;\r\n      this.reflectivity = source.reflectivity;\r\n      this.refractionRatio = source.refractionRatio;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.wireframeLinecap = source.wireframeLinecap;\r\n      this.wireframeLinejoin = source.wireframeLinejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      this.flatShading = source.flatShading;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\tgradientMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tlightMap: new THREE.Texture( <Image> ),\r\n   *\tlightMapIntensity: <float>\r\n   *\r\n   *\taoMap: new THREE.Texture( <Image> ),\r\n   *\taoMapIntensity: <float>\r\n   *\r\n   *\temissive: <hex>,\r\n   *\temissiveIntensity: <float>\r\n   *\temissiveMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tbumpMap: new THREE.Texture( <Image> ),\r\n   *\tbumpScale: <float>,\r\n   *\r\n   *\tnormalMap: new THREE.Texture( <Image> ),\r\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\r\n   *\tnormalScale: <Vector2>,\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshToonMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.defines = {\r\n        TOON: '',\r\n      };\r\n      this.type = 'MeshToonMaterial';\r\n      this.color = new Color(0xffffff);\r\n      this.map = null;\r\n      this.gradientMap = null;\r\n      this.lightMap = null;\r\n      this.lightMapIntensity = 1.0;\r\n      this.aoMap = null;\r\n      this.aoMapIntensity = 1.0;\r\n      this.emissive = new Color(0x000000);\r\n      this.emissiveIntensity = 1.0;\r\n      this.emissiveMap = null;\r\n      this.bumpMap = null;\r\n      this.bumpScale = 1;\r\n      this.normalMap = null;\r\n      this.normalMapType = TangentSpaceNormalMap;\r\n      this.normalScale = new Vector2(1, 1);\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.alphaMap = null;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.wireframeLinecap = 'round';\r\n      this.wireframeLinejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.map = source.map;\r\n      this.gradientMap = source.gradientMap;\r\n      this.lightMap = source.lightMap;\r\n      this.lightMapIntensity = source.lightMapIntensity;\r\n      this.aoMap = source.aoMap;\r\n      this.aoMapIntensity = source.aoMapIntensity;\r\n      this.emissive.copy(source.emissive);\r\n      this.emissiveMap = source.emissiveMap;\r\n      this.emissiveIntensity = source.emissiveIntensity;\r\n      this.bumpMap = source.bumpMap;\r\n      this.bumpScale = source.bumpScale;\r\n      this.normalMap = source.normalMap;\r\n      this.normalMapType = source.normalMapType;\r\n      this.normalScale.copy(source.normalScale);\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.alphaMap = source.alphaMap;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.wireframeLinecap = source.wireframeLinecap;\r\n      this.wireframeLinejoin = source.wireframeLinejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshToonMaterial.prototype.isMeshToonMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\topacity: <float>,\r\n   *\r\n   *\tbumpMap: new THREE.Texture( <Image> ),\r\n   *\tbumpScale: <float>,\r\n   *\r\n   *\tnormalMap: new THREE.Texture( <Image> ),\r\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\r\n   *\tnormalScale: <Vector2>,\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>,\r\n   *\r\n   *\tflatShading: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshNormalMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshNormalMaterial';\r\n      this.bumpMap = null;\r\n      this.bumpScale = 1;\r\n      this.normalMap = null;\r\n      this.normalMapType = TangentSpaceNormalMap;\r\n      this.normalScale = new Vector2(1, 1);\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.fog = false;\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.flatShading = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.bumpMap = source.bumpMap;\r\n      this.bumpScale = source.bumpScale;\r\n      this.normalMap = source.normalMap;\r\n      this.normalMapType = source.normalMapType;\r\n      this.normalScale.copy(source.normalScale);\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      this.flatShading = source.flatShading;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tlightMap: new THREE.Texture( <Image> ),\r\n   *\tlightMapIntensity: <float>\r\n   *\r\n   *\taoMap: new THREE.Texture( <Image> ),\r\n   *\taoMapIntensity: <float>\r\n   *\r\n   *\temissive: <hex>,\r\n   *\temissiveIntensity: <float>\r\n   *\temissiveMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tspecularMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n   *\tcombine: THREE.Multiply,\r\n   *\treflectivity: <float>,\r\n   *\trefractionRatio: <float>,\r\n   *\r\n   *\twireframe: <boolean>,\r\n   *\twireframeLinewidth: <float>,\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshLambertMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'MeshLambertMaterial';\r\n      this.color = new Color(0xffffff); // diffuse\r\n\r\n      this.map = null;\r\n      this.lightMap = null;\r\n      this.lightMapIntensity = 1.0;\r\n      this.aoMap = null;\r\n      this.aoMapIntensity = 1.0;\r\n      this.emissive = new Color(0x000000);\r\n      this.emissiveIntensity = 1.0;\r\n      this.emissiveMap = null;\r\n      this.specularMap = null;\r\n      this.alphaMap = null;\r\n      this.envMap = null;\r\n      this.combine = MultiplyOperation;\r\n      this.reflectivity = 1;\r\n      this.refractionRatio = 0.98;\r\n      this.wireframe = false;\r\n      this.wireframeLinewidth = 1;\r\n      this.wireframeLinecap = 'round';\r\n      this.wireframeLinejoin = 'round';\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.map = source.map;\r\n      this.lightMap = source.lightMap;\r\n      this.lightMapIntensity = source.lightMapIntensity;\r\n      this.aoMap = source.aoMap;\r\n      this.aoMapIntensity = source.aoMapIntensity;\r\n      this.emissive.copy(source.emissive);\r\n      this.emissiveMap = source.emissiveMap;\r\n      this.emissiveIntensity = source.emissiveIntensity;\r\n      this.specularMap = source.specularMap;\r\n      this.alphaMap = source.alphaMap;\r\n      this.envMap = source.envMap;\r\n      this.combine = source.combine;\r\n      this.reflectivity = source.reflectivity;\r\n      this.refractionRatio = source.refractionRatio;\r\n      this.wireframe = source.wireframe;\r\n      this.wireframeLinewidth = source.wireframeLinewidth;\r\n      this.wireframeLinecap = source.wireframeLinecap;\r\n      this.wireframeLinejoin = source.wireframeLinejoin;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tmatcap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tmap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tbumpMap: new THREE.Texture( <Image> ),\r\n   *\tbumpScale: <float>,\r\n   *\r\n   *\tnormalMap: new THREE.Texture( <Image> ),\r\n   *\tnormalMapType: THREE.TangentSpaceNormalMap,\r\n   *\tnormalScale: <Vector2>,\r\n   *\r\n   *\tdisplacementMap: new THREE.Texture( <Image> ),\r\n   *\tdisplacementScale: <float>,\r\n   *\tdisplacementBias: <float>,\r\n   *\r\n   *\talphaMap: new THREE.Texture( <Image> ),\r\n   *\r\n   *\tmorphTargets: <bool>,\r\n   *\tmorphNormals: <bool>\r\n   *\r\n   *\tflatShading: <bool>\r\n   * }\r\n   */\r\n\r\n  class MeshMatcapMaterial extends Material {\r\n    constructor(parameters) {\r\n      super();\r\n      this.defines = {\r\n        MATCAP: '',\r\n      };\r\n      this.type = 'MeshMatcapMaterial';\r\n      this.color = new Color(0xffffff); // diffuse\r\n\r\n      this.matcap = null;\r\n      this.map = null;\r\n      this.bumpMap = null;\r\n      this.bumpScale = 1;\r\n      this.normalMap = null;\r\n      this.normalMapType = TangentSpaceNormalMap;\r\n      this.normalScale = new Vector2(1, 1);\r\n      this.displacementMap = null;\r\n      this.displacementScale = 1;\r\n      this.displacementBias = 0;\r\n      this.alphaMap = null;\r\n      this.morphTargets = false;\r\n      this.morphNormals = false;\r\n      this.flatShading = false;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.defines = {\r\n        MATCAP: '',\r\n      };\r\n      this.color.copy(source.color);\r\n      this.matcap = source.matcap;\r\n      this.map = source.map;\r\n      this.bumpMap = source.bumpMap;\r\n      this.bumpScale = source.bumpScale;\r\n      this.normalMap = source.normalMap;\r\n      this.normalMapType = source.normalMapType;\r\n      this.normalScale.copy(source.normalScale);\r\n      this.displacementMap = source.displacementMap;\r\n      this.displacementScale = source.displacementScale;\r\n      this.displacementBias = source.displacementBias;\r\n      this.alphaMap = source.alphaMap;\r\n      this.morphTargets = source.morphTargets;\r\n      this.morphNormals = source.morphNormals;\r\n      this.flatShading = source.flatShading;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\r\n\r\n  /**\r\n   * parameters = {\r\n   *\tcolor: <hex>,\r\n   *\topacity: <float>,\r\n   *\r\n   *\tlinewidth: <float>,\r\n   *\r\n   *\tscale: <float>,\r\n   *\tdashSize: <float>,\r\n   *\tgapSize: <float>\r\n   * }\r\n   */\r\n\r\n  class LineDashedMaterial extends LineBasicMaterial {\r\n    constructor(parameters) {\r\n      super();\r\n      this.type = 'LineDashedMaterial';\r\n      this.scale = 1;\r\n      this.dashSize = 3;\r\n      this.gapSize = 1;\r\n      this.setValues(parameters);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.scale = source.scale;\r\n      this.dashSize = source.dashSize;\r\n      this.gapSize = source.gapSize;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  LineDashedMaterial.prototype.isLineDashedMaterial = true;\r\n\r\n  var Materials = /*#__PURE__*/ Object.freeze({\r\n    __proto__: null,\r\n    ShadowMaterial: ShadowMaterial,\r\n    SpriteMaterial: SpriteMaterial,\r\n    RawShaderMaterial: RawShaderMaterial,\r\n    ShaderMaterial: ShaderMaterial,\r\n    PointsMaterial: PointsMaterial,\r\n    MeshPhysicalMaterial: MeshPhysicalMaterial,\r\n    MeshStandardMaterial: MeshStandardMaterial,\r\n    MeshPhongMaterial: MeshPhongMaterial,\r\n    MeshToonMaterial: MeshToonMaterial,\r\n    MeshNormalMaterial: MeshNormalMaterial,\r\n    MeshLambertMaterial: MeshLambertMaterial,\r\n    MeshDepthMaterial: MeshDepthMaterial,\r\n    MeshDistanceMaterial: MeshDistanceMaterial,\r\n    MeshBasicMaterial: MeshBasicMaterial,\r\n    MeshMatcapMaterial: MeshMatcapMaterial,\r\n    LineDashedMaterial: LineDashedMaterial,\r\n    LineBasicMaterial: LineBasicMaterial,\r\n    Material: Material,\r\n  });\r\n\r\n  const AnimationUtils = {\r\n    // same as Array.prototype.slice, but also works on typed arrays\r\n    arraySlice: function (array, from, to) {\r\n      if (AnimationUtils.isTypedArray(array)) {\r\n        // in ios9 array.subarray(from, undefined) will return empty array\r\n        // but array.subarray(from) or array.subarray(from, len) is correct\r\n        return new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\r\n      }\r\n\r\n      return array.slice(from, to);\r\n    },\r\n    // converts an array to a specific type\r\n    convertArray: function (array, type, forceClone) {\r\n      if (\r\n        !array || // let 'undefined' and 'null' pass\r\n        (!forceClone && array.constructor === type)\r\n      )\r\n        return array;\r\n\r\n      if (typeof type.BYTES_PER_ELEMENT === 'number') {\r\n        return new type(array); // create typed array\r\n      }\r\n\r\n      return Array.prototype.slice.call(array); // create Array\r\n    },\r\n    isTypedArray: function (object) {\r\n      return ArrayBuffer.isView(object) && !(object instanceof DataView);\r\n    },\r\n    // returns an array by which times and values can be sorted\r\n    getKeyframeOrder: function (times) {\r\n      function compareTime(i, j) {\r\n        return times[i] - times[j];\r\n      }\r\n\r\n      const n = times.length;\r\n      const result = new Array(n);\r\n\r\n      for (let i = 0; i !== n; ++i) result[i] = i;\r\n\r\n      result.sort(compareTime);\r\n      return result;\r\n    },\r\n    // uses the array previously returned by 'getKeyframeOrder' to sort data\r\n    sortedArray: function (values, stride, order) {\r\n      const nValues = values.length;\r\n      const result = new values.constructor(nValues);\r\n\r\n      for (let i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\r\n        const srcOffset = order[i] * stride;\r\n\r\n        for (let j = 0; j !== stride; ++j) {\r\n          result[dstOffset++] = values[srcOffset + j];\r\n        }\r\n      }\r\n\r\n      return result;\r\n    },\r\n    // function for parsing AOS keyframe formats\r\n    flattenJSON: function (jsonKeys, times, values, valuePropertyName) {\r\n      let i = 1,\r\n        key = jsonKeys[0];\r\n\r\n      while (key !== undefined && key[valuePropertyName] === undefined) {\r\n        key = jsonKeys[i++];\r\n      }\r\n\r\n      if (key === undefined) return; // no data\r\n\r\n      let value = key[valuePropertyName];\r\n      if (value === undefined) return; // no data\r\n\r\n      if (Array.isArray(value)) {\r\n        do {\r\n          value = key[valuePropertyName];\r\n\r\n          if (value !== undefined) {\r\n            times.push(key.time);\r\n            values.push.apply(values, value); // push all elements\r\n          }\r\n\r\n          key = jsonKeys[i++];\r\n        } while (key !== undefined);\r\n      } else if (value.toArray !== undefined) {\r\n        // ...assume THREE.Math-ish\r\n        do {\r\n          value = key[valuePropertyName];\r\n\r\n          if (value !== undefined) {\r\n            times.push(key.time);\r\n            value.toArray(values, values.length);\r\n          }\r\n\r\n          key = jsonKeys[i++];\r\n        } while (key !== undefined);\r\n      } else {\r\n        // otherwise push as-is\r\n        do {\r\n          value = key[valuePropertyName];\r\n\r\n          if (value !== undefined) {\r\n            times.push(key.time);\r\n            values.push(value);\r\n          }\r\n\r\n          key = jsonKeys[i++];\r\n        } while (key !== undefined);\r\n      }\r\n    },\r\n    subclip: function (sourceClip, name, startFrame, endFrame, fps = 30) {\r\n      const clip = sourceClip.clone();\r\n      clip.name = name;\r\n      const tracks = [];\r\n\r\n      for (let i = 0; i < clip.tracks.length; ++i) {\r\n        const track = clip.tracks[i];\r\n        const valueSize = track.getValueSize();\r\n        const times = [];\r\n        const values = [];\r\n\r\n        for (let j = 0; j < track.times.length; ++j) {\r\n          const frame = track.times[j] * fps;\r\n          if (frame < startFrame || frame >= endFrame) continue;\r\n          times.push(track.times[j]);\r\n\r\n          for (let k = 0; k < valueSize; ++k) {\r\n            values.push(track.values[j * valueSize + k]);\r\n          }\r\n        }\r\n\r\n        if (times.length === 0) continue;\r\n        track.times = AnimationUtils.convertArray(times, track.times.constructor);\r\n        track.values = AnimationUtils.convertArray(values, track.values.constructor);\r\n        tracks.push(track);\r\n      }\r\n\r\n      clip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\r\n\r\n      let minStartTime = Infinity;\r\n\r\n      for (let i = 0; i < clip.tracks.length; ++i) {\r\n        if (minStartTime > clip.tracks[i].times[0]) {\r\n          minStartTime = clip.tracks[i].times[0];\r\n        }\r\n      } // shift all tracks such that clip begins at t=0\r\n\r\n      for (let i = 0; i < clip.tracks.length; ++i) {\r\n        clip.tracks[i].shift(-1 * minStartTime);\r\n      }\r\n\r\n      clip.resetDuration();\r\n      return clip;\r\n    },\r\n    makeClipAdditive: function (\r\n      targetClip,\r\n      referenceFrame = 0,\r\n      referenceClip = targetClip,\r\n      fps = 30,\r\n    ) {\r\n      if (fps <= 0) fps = 30;\r\n      const numTracks = referenceClip.tracks.length;\r\n      const referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\r\n\r\n      for (let i = 0; i < numTracks; ++i) {\r\n        const referenceTrack = referenceClip.tracks[i];\r\n        const referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\r\n\r\n        if (referenceTrackType === 'bool' || referenceTrackType === 'string') continue; // Find the track in the target clip whose name and type matches the reference track\r\n\r\n        const targetTrack = targetClip.tracks.find(function (track) {\r\n          return track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\r\n        });\r\n        if (targetTrack === undefined) continue;\r\n        let referenceOffset = 0;\r\n        const referenceValueSize = referenceTrack.getValueSize();\r\n\r\n        if (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\r\n          referenceOffset = referenceValueSize / 3;\r\n        }\r\n\r\n        let targetOffset = 0;\r\n        const targetValueSize = targetTrack.getValueSize();\r\n\r\n        if (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\r\n          targetOffset = targetValueSize / 3;\r\n        }\r\n\r\n        const lastIndex = referenceTrack.times.length - 1;\r\n        let referenceValue; // Find the value to subtract out of the track\r\n\r\n        if (referenceTime <= referenceTrack.times[0]) {\r\n          // Reference frame is earlier than the first keyframe, so just use the first keyframe\r\n          const startIndex = referenceOffset;\r\n          const endIndex = referenceValueSize - referenceOffset;\r\n          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\r\n        } else if (referenceTime >= referenceTrack.times[lastIndex]) {\r\n          // Reference frame is after the last keyframe, so just use the last keyframe\r\n          const startIndex = lastIndex * referenceValueSize + referenceOffset;\r\n          const endIndex = startIndex + referenceValueSize - referenceOffset;\r\n          referenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\r\n        } else {\r\n          // Interpolate to the reference value\r\n          const interpolant = referenceTrack.createInterpolant();\r\n          const startIndex = referenceOffset;\r\n          const endIndex = referenceValueSize - referenceOffset;\r\n          interpolant.evaluate(referenceTime);\r\n          referenceValue = AnimationUtils.arraySlice(\r\n            interpolant.resultBuffer,\r\n            startIndex,\r\n            endIndex,\r\n          );\r\n        } // Conjugate the quaternion\r\n\r\n        if (referenceTrackType === 'quaternion') {\r\n          const referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\r\n          referenceQuat.toArray(referenceValue);\r\n        } // Subtract the reference value from all of the track values\r\n\r\n        const numTimes = targetTrack.times.length;\r\n\r\n        for (let j = 0; j < numTimes; ++j) {\r\n          const valueStart = j * targetValueSize + targetOffset;\r\n\r\n          if (referenceTrackType === 'quaternion') {\r\n            // Multiply the conjugate for quaternion track types\r\n            Quaternion.multiplyQuaternionsFlat(\r\n              targetTrack.values,\r\n              valueStart,\r\n              referenceValue,\r\n              0,\r\n              targetTrack.values,\r\n              valueStart,\r\n            );\r\n          } else {\r\n            const valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\r\n\r\n            for (let k = 0; k < valueEnd; ++k) {\r\n              targetTrack.values[valueStart + k] -= referenceValue[k];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      targetClip.blendMode = AdditiveAnimationBlendMode;\r\n      return targetClip;\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Abstract base class of interpolants over parametric samples.\r\n   *\r\n   * The parameter domain is one dimensional, typically the time or a path\r\n   * along a curve defined by the data.\r\n   *\r\n   * The sample values can have any dimensionality and derived classes may\r\n   * apply special interpretations to the data.\r\n   *\r\n   * This class provides the interval seek in a Template Method, deferring\r\n   * the actual interpolation to derived classes.\r\n   *\r\n   * Time complexity is O(1) for linear access crossing at most two points\r\n   * and O(log N) for random access, where N is the number of positions.\r\n   *\r\n   * References:\r\n   *\r\n   * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n   *\r\n   */\r\n  class Interpolant {\r\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\r\n      this.parameterPositions = parameterPositions;\r\n      this._cachedIndex = 0;\r\n      this.resultBuffer =\r\n        resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\r\n      this.sampleValues = sampleValues;\r\n      this.valueSize = sampleSize;\r\n      this.settings = null;\r\n      this.DefaultSettings_ = {};\r\n    }\r\n\r\n    evaluate(t) {\r\n      const pp = this.parameterPositions;\r\n      let i1 = this._cachedIndex,\r\n        t1 = pp[i1],\r\n        t0 = pp[i1 - 1];\r\n\r\n      validate_interval: {\r\n        seek: {\r\n          let right;\r\n\r\n          linear_scan: {\r\n            //- See http://jsperf.com/comparison-to-undefined/3\r\n            //- slower code:\r\n            //-\r\n            //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n            forward_scan: if (!(t < t1)) {\r\n              for (let giveUpAt = i1 + 2; ; ) {\r\n                if (t1 === undefined) {\r\n                  if (t < t0) break forward_scan; // after end\r\n\r\n                  i1 = pp.length;\r\n                  this._cachedIndex = i1;\r\n                  return this.afterEnd_(i1 - 1, t, t0);\r\n                }\r\n\r\n                if (i1 === giveUpAt) break; // this loop\r\n\r\n                t0 = t1;\r\n                t1 = pp[++i1];\r\n\r\n                if (t < t1) {\r\n                  // we have arrived at the sought interval\r\n                  break seek;\r\n                }\r\n              } // prepare binary search on the right side of the index\r\n\r\n              right = pp.length;\r\n              break linear_scan;\r\n            } //- slower code:\r\n            //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\r\n            if (!(t >= t0)) {\r\n              // looping?\r\n              const t1global = pp[1];\r\n\r\n              if (t < t1global) {\r\n                i1 = 2; // + 1, using the scan for the details\r\n\r\n                t0 = t1global;\r\n              } // linear reverse scan\r\n\r\n              for (let giveUpAt = i1 - 2; ; ) {\r\n                if (t0 === undefined) {\r\n                  // before start\r\n                  this._cachedIndex = 0;\r\n                  return this.beforeStart_(0, t, t1);\r\n                }\r\n\r\n                if (i1 === giveUpAt) break; // this loop\r\n\r\n                t1 = t0;\r\n                t0 = pp[--i1 - 1];\r\n\r\n                if (t >= t0) {\r\n                  // we have arrived at the sought interval\r\n                  break seek;\r\n                }\r\n              } // prepare binary search on the left side of the index\r\n\r\n              right = i1;\r\n              i1 = 0;\r\n              break linear_scan;\r\n            } // the interval is valid\r\n\r\n            break validate_interval;\r\n          } // linear scan\r\n          // binary search\r\n\r\n          while (i1 < right) {\r\n            const mid = (i1 + right) >>> 1;\r\n\r\n            if (t < pp[mid]) {\r\n              right = mid;\r\n            } else {\r\n              i1 = mid + 1;\r\n            }\r\n          }\r\n\r\n          t1 = pp[i1];\r\n          t0 = pp[i1 - 1]; // check boundary cases, again\r\n\r\n          if (t0 === undefined) {\r\n            this._cachedIndex = 0;\r\n            return this.beforeStart_(0, t, t1);\r\n          }\r\n\r\n          if (t1 === undefined) {\r\n            i1 = pp.length;\r\n            this._cachedIndex = i1;\r\n            return this.afterEnd_(i1 - 1, t0, t);\r\n          }\r\n        } // seek\r\n\r\n        this._cachedIndex = i1;\r\n        this.intervalChanged_(i1, t0, t1);\r\n      } // validate_interval\r\n\r\n      return this.interpolate_(i1, t0, t, t1);\r\n    }\r\n\r\n    getSettings_() {\r\n      return this.settings || this.DefaultSettings_;\r\n    }\r\n\r\n    copySampleValue_(index) {\r\n      // copies a sample value to the result buffer\r\n      const result = this.resultBuffer,\r\n        values = this.sampleValues,\r\n        stride = this.valueSize,\r\n        offset = index * stride;\r\n\r\n      for (let i = 0; i !== stride; ++i) {\r\n        result[i] = values[offset + i];\r\n      }\r\n\r\n      return result;\r\n    } // Template methods for derived classes:\r\n\r\n    interpolate_() /* i1, t0, t, t1 */\r\n    {\r\n      throw new Error('call to abstract method'); // implementations shall return this.resultBuffer\r\n    }\r\n\r\n    intervalChanged_() /* i1, t0, t1 */\r\n    {\r\n      // empty\r\n    }\r\n  } // ALIAS DEFINITIONS\r\n\r\n  Interpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\r\n  Interpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\r\n\r\n  /**\r\n   * Fast and simple cubic spline interpolant.\r\n   *\r\n   * It was derived from a Hermitian construction setting the first derivative\r\n   * at each sample position to the linear slope between neighboring positions\r\n   * over their parameter interval.\r\n   */\r\n\r\n  class CubicInterpolant extends Interpolant {\r\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\r\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\r\n      this._weightPrev = -0;\r\n      this._offsetPrev = -0;\r\n      this._weightNext = -0;\r\n      this._offsetNext = -0;\r\n      this.DefaultSettings_ = {\r\n        endingStart: ZeroCurvatureEnding,\r\n        endingEnd: ZeroCurvatureEnding,\r\n      };\r\n    }\r\n\r\n    intervalChanged_(i1, t0, t1) {\r\n      const pp = this.parameterPositions;\r\n      let iPrev = i1 - 2,\r\n        iNext = i1 + 1,\r\n        tPrev = pp[iPrev],\r\n        tNext = pp[iNext];\r\n\r\n      if (tPrev === undefined) {\r\n        switch (this.getSettings_().endingStart) {\r\n          case ZeroSlopeEnding:\r\n            // f'(t0) = 0\r\n            iPrev = i1;\r\n            tPrev = 2 * t0 - t1;\r\n            break;\r\n\r\n          case WrapAroundEnding:\r\n            // use the other end of the curve\r\n            iPrev = pp.length - 2;\r\n            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\r\n            break;\r\n\r\n          default:\r\n            // ZeroCurvatureEnding\r\n            // f''(t0) = 0 a.k.a. Natural Spline\r\n            iPrev = i1;\r\n            tPrev = t1;\r\n        }\r\n      }\r\n\r\n      if (tNext === undefined) {\r\n        switch (this.getSettings_().endingEnd) {\r\n          case ZeroSlopeEnding:\r\n            // f'(tN) = 0\r\n            iNext = i1;\r\n            tNext = 2 * t1 - t0;\r\n            break;\r\n\r\n          case WrapAroundEnding:\r\n            // use the other end of the curve\r\n            iNext = 1;\r\n            tNext = t1 + pp[1] - pp[0];\r\n            break;\r\n\r\n          default:\r\n            // ZeroCurvatureEnding\r\n            // f''(tN) = 0, a.k.a. Natural Spline\r\n            iNext = i1 - 1;\r\n            tNext = t0;\r\n        }\r\n      }\r\n\r\n      const halfDt = (t1 - t0) * 0.5,\r\n        stride = this.valueSize;\r\n      this._weightPrev = halfDt / (t0 - tPrev);\r\n      this._weightNext = halfDt / (tNext - t1);\r\n      this._offsetPrev = iPrev * stride;\r\n      this._offsetNext = iNext * stride;\r\n    }\r\n\r\n    interpolate_(i1, t0, t, t1) {\r\n      const result = this.resultBuffer,\r\n        values = this.sampleValues,\r\n        stride = this.valueSize,\r\n        o1 = i1 * stride,\r\n        o0 = o1 - stride,\r\n        oP = this._offsetPrev,\r\n        oN = this._offsetNext,\r\n        wP = this._weightPrev,\r\n        wN = this._weightNext,\r\n        p = (t - t0) / (t1 - t0),\r\n        pp = p * p,\r\n        ppp = pp * p; // evaluate polynomials\r\n\r\n      const sP = -wP * ppp + 2 * wP * pp - wP * p;\r\n      const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\r\n      const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\r\n      const sN = wN * ppp - wN * pp; // combine data linearly\r\n\r\n      for (let i = 0; i !== stride; ++i) {\r\n        result[i] =\r\n          sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  class LinearInterpolant extends Interpolant {\r\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\r\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\r\n    }\r\n\r\n    interpolate_(i1, t0, t, t1) {\r\n      const result = this.resultBuffer,\r\n        values = this.sampleValues,\r\n        stride = this.valueSize,\r\n        offset1 = i1 * stride,\r\n        offset0 = offset1 - stride,\r\n        weight1 = (t - t0) / (t1 - t0),\r\n        weight0 = 1 - weight1;\r\n\r\n      for (let i = 0; i !== stride; ++i) {\r\n        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Interpolant that evaluates to the sample value at the position preceeding\r\n   * the parameter.\r\n   */\r\n\r\n  class DiscreteInterpolant extends Interpolant {\r\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\r\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\r\n    }\r\n\r\n    interpolate_(\r\n      i1,\r\n      /*, t0, t, t1 */\r\n    ) {\r\n      return this.copySampleValue_(i1 - 1);\r\n    }\r\n  }\r\n\r\n  class KeyframeTrack {\r\n    constructor(name, times, values, interpolation) {\r\n      if (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\r\n      if (times === undefined || times.length === 0)\r\n        throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\r\n      this.name = name;\r\n      this.times = AnimationUtils.convertArray(times, this.TimeBufferType);\r\n      this.values = AnimationUtils.convertArray(values, this.ValueBufferType);\r\n      this.setInterpolation(interpolation || this.DefaultInterpolation);\r\n    } // Serialization (in static context, because of constructor invocation\r\n    // and automatic invocation of .toJSON):\r\n\r\n    static toJSON(track) {\r\n      const trackType = track.constructor;\r\n      let json; // derived classes can define a static toJSON method\r\n\r\n      if (trackType.toJSON !== this.toJSON) {\r\n        json = trackType.toJSON(track);\r\n      } else {\r\n        // by default, we assume the data can be serialized as-is\r\n        json = {\r\n          name: track.name,\r\n          times: AnimationUtils.convertArray(track.times, Array),\r\n          values: AnimationUtils.convertArray(track.values, Array),\r\n        };\r\n        const interpolation = track.getInterpolation();\r\n\r\n        if (interpolation !== track.DefaultInterpolation) {\r\n          json.interpolation = interpolation;\r\n        }\r\n      }\r\n\r\n      json.type = track.ValueTypeName; // mandatory\r\n\r\n      return json;\r\n    }\r\n\r\n    InterpolantFactoryMethodDiscrete(result) {\r\n      return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\r\n    }\r\n\r\n    InterpolantFactoryMethodLinear(result) {\r\n      return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\r\n    }\r\n\r\n    InterpolantFactoryMethodSmooth(result) {\r\n      return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\r\n    }\r\n\r\n    setInterpolation(interpolation) {\r\n      let factoryMethod;\r\n\r\n      switch (interpolation) {\r\n        case InterpolateDiscrete:\r\n          factoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n          break;\r\n\r\n        case InterpolateLinear:\r\n          factoryMethod = this.InterpolantFactoryMethodLinear;\r\n          break;\r\n\r\n        case InterpolateSmooth:\r\n          factoryMethod = this.InterpolantFactoryMethodSmooth;\r\n          break;\r\n      }\r\n\r\n      if (factoryMethod === undefined) {\r\n        const message =\r\n          'unsupported interpolation for ' +\r\n          this.ValueTypeName +\r\n          ' keyframe track named ' +\r\n          this.name;\r\n\r\n        if (this.createInterpolant === undefined) {\r\n          // fall back to default, unless the default itself is messed up\r\n          if (interpolation !== this.DefaultInterpolation) {\r\n            this.setInterpolation(this.DefaultInterpolation);\r\n          } else {\r\n            throw new Error(message); // fatal, in this case\r\n          }\r\n        }\r\n\r\n        console.warn('THREE.KeyframeTrack:', message);\r\n        return this;\r\n      }\r\n\r\n      this.createInterpolant = factoryMethod;\r\n      return this;\r\n    }\r\n\r\n    getInterpolation() {\r\n      switch (this.createInterpolant) {\r\n        case this.InterpolantFactoryMethodDiscrete:\r\n          return InterpolateDiscrete;\r\n\r\n        case this.InterpolantFactoryMethodLinear:\r\n          return InterpolateLinear;\r\n\r\n        case this.InterpolantFactoryMethodSmooth:\r\n          return InterpolateSmooth;\r\n      }\r\n    }\r\n\r\n    getValueSize() {\r\n      return this.values.length / this.times.length;\r\n    } // move all keyframes either forwards or backwards in time\r\n\r\n    shift(timeOffset) {\r\n      if (timeOffset !== 0.0) {\r\n        const times = this.times;\r\n\r\n        for (let i = 0, n = times.length; i !== n; ++i) {\r\n          times[i] += timeOffset;\r\n        }\r\n      }\r\n\r\n      return this;\r\n    } // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\r\n    scale(timeScale) {\r\n      if (timeScale !== 1.0) {\r\n        const times = this.times;\r\n\r\n        for (let i = 0, n = times.length; i !== n; ++i) {\r\n          times[i] *= timeScale;\r\n        }\r\n      }\r\n\r\n      return this;\r\n    } // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\r\n    trim(startTime, endTime) {\r\n      const times = this.times,\r\n        nKeys = times.length;\r\n      let from = 0,\r\n        to = nKeys - 1;\r\n\r\n      while (from !== nKeys && times[from] < startTime) {\r\n        ++from;\r\n      }\r\n\r\n      while (to !== -1 && times[to] > endTime) {\r\n        --to;\r\n      }\r\n\r\n      ++to; // inclusive -> exclusive bound\r\n\r\n      if (from !== 0 || to !== nKeys) {\r\n        // empty tracks are forbidden, so keep at least one keyframe\r\n        if (from >= to) {\r\n          to = Math.max(to, 1);\r\n          from = to - 1;\r\n        }\r\n\r\n        const stride = this.getValueSize();\r\n        this.times = AnimationUtils.arraySlice(times, from, to);\r\n        this.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\r\n      }\r\n\r\n      return this;\r\n    } // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\r\n    validate() {\r\n      let valid = true;\r\n      const valueSize = this.getValueSize();\r\n\r\n      if (valueSize - Math.floor(valueSize) !== 0) {\r\n        console.error('THREE.KeyframeTrack: Invalid value size in track.', this);\r\n        valid = false;\r\n      }\r\n\r\n      const times = this.times,\r\n        values = this.values,\r\n        nKeys = times.length;\r\n\r\n      if (nKeys === 0) {\r\n        console.error('THREE.KeyframeTrack: Track is empty.', this);\r\n        valid = false;\r\n      }\r\n\r\n      let prevTime = null;\r\n\r\n      for (let i = 0; i !== nKeys; i++) {\r\n        const currTime = times[i];\r\n\r\n        if (typeof currTime === 'number' && isNaN(currTime)) {\r\n          console.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\r\n          valid = false;\r\n          break;\r\n        }\r\n\r\n        if (prevTime !== null && prevTime > currTime) {\r\n          console.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\r\n          valid = false;\r\n          break;\r\n        }\r\n\r\n        prevTime = currTime;\r\n      }\r\n\r\n      if (values !== undefined) {\r\n        if (AnimationUtils.isTypedArray(values)) {\r\n          for (let i = 0, n = values.length; i !== n; ++i) {\r\n            const value = values[i];\r\n\r\n            if (isNaN(value)) {\r\n              console.error('THREE.KeyframeTrack: Value is not a valid number.', this, i, value);\r\n              valid = false;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return valid;\r\n    } // removes equivalent sequential keys as common in morph target sequences\r\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\r\n    optimize() {\r\n      // times or values may be shared with other tracks, so overwriting is unsafe\r\n      const times = AnimationUtils.arraySlice(this.times),\r\n        values = AnimationUtils.arraySlice(this.values),\r\n        stride = this.getValueSize(),\r\n        smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n        lastIndex = times.length - 1;\r\n      let writeIndex = 1;\r\n\r\n      for (let i = 1; i < lastIndex; ++i) {\r\n        let keep = false;\r\n        const time = times[i];\r\n        const timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\r\n\r\n        if (time !== timeNext && (i !== 1 || time !== times[0])) {\r\n          if (!smoothInterpolation) {\r\n            // remove unnecessary keyframes same as their neighbors\r\n            const offset = i * stride,\r\n              offsetP = offset - stride,\r\n              offsetN = offset + stride;\r\n\r\n            for (let j = 0; j !== stride; ++j) {\r\n              const value = values[offset + j];\r\n\r\n              if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\r\n                keep = true;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            keep = true;\r\n          }\r\n        } // in-place compaction\r\n\r\n        if (keep) {\r\n          if (i !== writeIndex) {\r\n            times[writeIndex] = times[i];\r\n            const readOffset = i * stride,\r\n              writeOffset = writeIndex * stride;\r\n\r\n            for (let j = 0; j !== stride; ++j) {\r\n              values[writeOffset + j] = values[readOffset + j];\r\n            }\r\n          }\r\n\r\n          ++writeIndex;\r\n        }\r\n      } // flush last keyframe (compaction looks ahead)\r\n\r\n      if (lastIndex > 0) {\r\n        times[writeIndex] = times[lastIndex];\r\n\r\n        for (\r\n          let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0;\r\n          j !== stride;\r\n          ++j\r\n        ) {\r\n          values[writeOffset + j] = values[readOffset + j];\r\n        }\r\n\r\n        ++writeIndex;\r\n      }\r\n\r\n      if (writeIndex !== times.length) {\r\n        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);\r\n        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\r\n      } else {\r\n        this.times = times;\r\n        this.values = values;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      const times = AnimationUtils.arraySlice(this.times, 0);\r\n      const values = AnimationUtils.arraySlice(this.values, 0);\r\n      const TypedKeyframeTrack = this.constructor;\r\n      const track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\r\n      track.createInterpolant = this.createInterpolant;\r\n      return track;\r\n    }\r\n  }\r\n\r\n  KeyframeTrack.prototype.TimeBufferType = Float32Array;\r\n  KeyframeTrack.prototype.ValueBufferType = Float32Array;\r\n  KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\r\n\r\n  /**\r\n   * A Track of Boolean keyframe values.\r\n   */\r\n\r\n  class BooleanKeyframeTrack extends KeyframeTrack {}\r\n\r\n  BooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\r\n  BooleanKeyframeTrack.prototype.ValueBufferType = Array;\r\n  BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\n  BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\r\n\r\n  /**\r\n   * A Track of keyframe values that represent color.\r\n   */\r\n\r\n  class ColorKeyframeTrack extends KeyframeTrack {}\r\n\r\n  ColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\r\n\r\n  /**\r\n   * A Track of numeric keyframe values.\r\n   */\r\n\r\n  class NumberKeyframeTrack extends KeyframeTrack {}\r\n\r\n  NumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\r\n\r\n  /**\r\n   * Spherical linear unit quaternion interpolant.\r\n   */\r\n\r\n  class QuaternionLinearInterpolant extends Interpolant {\r\n    constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {\r\n      super(parameterPositions, sampleValues, sampleSize, resultBuffer);\r\n    }\r\n\r\n    interpolate_(i1, t0, t, t1) {\r\n      const result = this.resultBuffer,\r\n        values = this.sampleValues,\r\n        stride = this.valueSize,\r\n        alpha = (t - t0) / (t1 - t0);\r\n      let offset = i1 * stride;\r\n\r\n      for (let end = offset + stride; offset !== end; offset += 4) {\r\n        Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A Track of quaternion keyframe values.\r\n   */\r\n\r\n  class QuaternionKeyframeTrack extends KeyframeTrack {\r\n    InterpolantFactoryMethodLinear(result) {\r\n      return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\r\n    }\r\n  }\r\n\r\n  QuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\r\n\r\n  QuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\r\n  QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\n  /**\r\n   * A Track that interpolates Strings\r\n   */\r\n\r\n  class StringKeyframeTrack extends KeyframeTrack {}\r\n\r\n  StringKeyframeTrack.prototype.ValueTypeName = 'string';\r\n  StringKeyframeTrack.prototype.ValueBufferType = Array;\r\n  StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\r\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\r\n  StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\r\n\r\n  /**\r\n   * A Track of vectored keyframe values.\r\n   */\r\n\r\n  class VectorKeyframeTrack extends KeyframeTrack {}\r\n\r\n  VectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\r\n\r\n  class AnimationClip {\r\n    constructor(name, duration = -1, tracks, blendMode = NormalAnimationBlendMode) {\r\n      this.name = name;\r\n      this.tracks = tracks;\r\n      this.duration = duration;\r\n      this.blendMode = blendMode;\r\n      this.uuid = generateUUID(); // this means it should figure out its duration by scanning the tracks\r\n\r\n      if (this.duration < 0) {\r\n        this.resetDuration();\r\n      }\r\n    }\r\n\r\n    static parse(json) {\r\n      const tracks = [],\r\n        jsonTracks = json.tracks,\r\n        frameTime = 1.0 / (json.fps || 1.0);\r\n\r\n      for (let i = 0, n = jsonTracks.length; i !== n; ++i) {\r\n        tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\r\n      }\r\n\r\n      const clip = new this(json.name, json.duration, tracks, json.blendMode);\r\n      clip.uuid = json.uuid;\r\n      return clip;\r\n    }\r\n\r\n    static toJSON(clip) {\r\n      const tracks = [],\r\n        clipTracks = clip.tracks;\r\n      const json = {\r\n        name: clip.name,\r\n        duration: clip.duration,\r\n        tracks: tracks,\r\n        uuid: clip.uuid,\r\n        blendMode: clip.blendMode,\r\n      };\r\n\r\n      for (let i = 0, n = clipTracks.length; i !== n; ++i) {\r\n        tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\r\n      }\r\n\r\n      return json;\r\n    }\r\n\r\n    static CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\r\n      const numMorphTargets = morphTargetSequence.length;\r\n      const tracks = [];\r\n\r\n      for (let i = 0; i < numMorphTargets; i++) {\r\n        let times = [];\r\n        let values = [];\r\n        times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\r\n        values.push(0, 1, 0);\r\n        const order = AnimationUtils.getKeyframeOrder(times);\r\n        times = AnimationUtils.sortedArray(times, 1, order);\r\n        values = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\r\n        // last frame as well for perfect loop.\r\n\r\n        if (!noLoop && times[0] === 0) {\r\n          times.push(numMorphTargets);\r\n          values.push(values[0]);\r\n        }\r\n\r\n        tracks.push(\r\n          new NumberKeyframeTrack(\r\n            '.morphTargetInfluences[' + morphTargetSequence[i].name + ']',\r\n            times,\r\n            values,\r\n          ).scale(1.0 / fps),\r\n        );\r\n      }\r\n\r\n      return new this(name, -1, tracks);\r\n    }\r\n\r\n    static findByName(objectOrClipArray, name) {\r\n      let clipArray = objectOrClipArray;\r\n\r\n      if (!Array.isArray(objectOrClipArray)) {\r\n        const o = objectOrClipArray;\r\n        clipArray = (o.geometry && o.geometry.animations) || o.animations;\r\n      }\r\n\r\n      for (let i = 0; i < clipArray.length; i++) {\r\n        if (clipArray[i].name === name) {\r\n          return clipArray[i];\r\n        }\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    static CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\r\n      const animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\r\n      // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\r\n      const pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\r\n      // patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\r\n      for (let i = 0, il = morphTargets.length; i < il; i++) {\r\n        const morphTarget = morphTargets[i];\r\n        const parts = morphTarget.name.match(pattern);\r\n\r\n        if (parts && parts.length > 1) {\r\n          const name = parts[1];\r\n          let animationMorphTargets = animationToMorphTargets[name];\r\n\r\n          if (!animationMorphTargets) {\r\n            animationToMorphTargets[name] = animationMorphTargets = [];\r\n          }\r\n\r\n          animationMorphTargets.push(morphTarget);\r\n        }\r\n      }\r\n\r\n      const clips = [];\r\n\r\n      for (const name in animationToMorphTargets) {\r\n        clips.push(\r\n          this.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop),\r\n        );\r\n      }\r\n\r\n      return clips;\r\n    } // parse the animation.hierarchy format\r\n\r\n    static parseAnimation(animation, bones) {\r\n      if (!animation) {\r\n        console.error('THREE.AnimationClip: No animation in JSONLoader data.');\r\n        return null;\r\n      }\r\n\r\n      const addNonemptyTrack = function (\r\n        trackType,\r\n        trackName,\r\n        animationKeys,\r\n        propertyName,\r\n        destTracks,\r\n      ) {\r\n        // only return track if there are actually keys.\r\n        if (animationKeys.length !== 0) {\r\n          const times = [];\r\n          const values = [];\r\n          AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\r\n\r\n          if (times.length !== 0) {\r\n            destTracks.push(new trackType(trackName, times, values));\r\n          }\r\n        }\r\n      };\r\n\r\n      const tracks = [];\r\n      const clipName = animation.name || 'default';\r\n      const fps = animation.fps || 30;\r\n      const blendMode = animation.blendMode; // automatic length determination in AnimationClip.\r\n\r\n      let duration = animation.length || -1;\r\n      const hierarchyTracks = animation.hierarchy || [];\r\n\r\n      for (let h = 0; h < hierarchyTracks.length; h++) {\r\n        const animationKeys = hierarchyTracks[h].keys; // skip empty tracks\r\n\r\n        if (!animationKeys || animationKeys.length === 0) continue; // process morph targets\r\n\r\n        if (animationKeys[0].morphTargets) {\r\n          // figure out all morph targets used in this track\r\n          const morphTargetNames = {};\r\n          let k;\r\n\r\n          for (k = 0; k < animationKeys.length; k++) {\r\n            if (animationKeys[k].morphTargets) {\r\n              for (let m = 0; m < animationKeys[k].morphTargets.length; m++) {\r\n                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\r\n              }\r\n            }\r\n          } // create a track for each morph target with all zero\r\n          // morphTargetInfluences except for the keys in which\r\n          // the morphTarget is named.\r\n\r\n          for (const morphTargetName in morphTargetNames) {\r\n            const times = [];\r\n            const values = [];\r\n\r\n            for (let m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\r\n              const animationKey = animationKeys[k];\r\n              times.push(animationKey.time);\r\n              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\r\n            }\r\n\r\n            tracks.push(\r\n              new NumberKeyframeTrack(\r\n                '.morphTargetInfluence[' + morphTargetName + ']',\r\n                times,\r\n                values,\r\n              ),\r\n            );\r\n          }\r\n\r\n          duration = morphTargetNames.length * (fps || 1.0);\r\n        } else {\r\n          // ...assume skeletal animation\r\n          const boneName = '.bones[' + bones[h].name + ']';\r\n          addNonemptyTrack(\r\n            VectorKeyframeTrack,\r\n            boneName + '.position',\r\n            animationKeys,\r\n            'pos',\r\n            tracks,\r\n          );\r\n          addNonemptyTrack(\r\n            QuaternionKeyframeTrack,\r\n            boneName + '.quaternion',\r\n            animationKeys,\r\n            'rot',\r\n            tracks,\r\n          );\r\n          addNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\r\n        }\r\n      }\r\n\r\n      if (tracks.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      const clip = new this(clipName, duration, tracks, blendMode);\r\n      return clip;\r\n    }\r\n\r\n    resetDuration() {\r\n      const tracks = this.tracks;\r\n      let duration = 0;\r\n\r\n      for (let i = 0, n = tracks.length; i !== n; ++i) {\r\n        const track = this.tracks[i];\r\n        duration = Math.max(duration, track.times[track.times.length - 1]);\r\n      }\r\n\r\n      this.duration = duration;\r\n      return this;\r\n    }\r\n\r\n    trim() {\r\n      for (let i = 0; i < this.tracks.length; i++) {\r\n        this.tracks[i].trim(0, this.duration);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    validate() {\r\n      let valid = true;\r\n\r\n      for (let i = 0; i < this.tracks.length; i++) {\r\n        valid = valid && this.tracks[i].validate();\r\n      }\r\n\r\n      return valid;\r\n    }\r\n\r\n    optimize() {\r\n      for (let i = 0; i < this.tracks.length; i++) {\r\n        this.tracks[i].optimize();\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      const tracks = [];\r\n\r\n      for (let i = 0; i < this.tracks.length; i++) {\r\n        tracks.push(this.tracks[i].clone());\r\n      }\r\n\r\n      return new this.constructor(this.name, this.duration, tracks, this.blendMode);\r\n    }\r\n\r\n    toJSON() {\r\n      return this.constructor.toJSON(this);\r\n    }\r\n  }\r\n\r\n  function getTrackTypeForValueTypeName(typeName) {\r\n    switch (typeName.toLowerCase()) {\r\n      case 'scalar':\r\n      case 'double':\r\n      case 'float':\r\n      case 'number':\r\n      case 'integer':\r\n        return NumberKeyframeTrack;\r\n\r\n      case 'vector':\r\n      case 'vector2':\r\n      case 'vector3':\r\n      case 'vector4':\r\n        return VectorKeyframeTrack;\r\n\r\n      case 'color':\r\n        return ColorKeyframeTrack;\r\n\r\n      case 'quaternion':\r\n        return QuaternionKeyframeTrack;\r\n\r\n      case 'bool':\r\n      case 'boolean':\r\n        return BooleanKeyframeTrack;\r\n\r\n      case 'string':\r\n        return StringKeyframeTrack;\r\n    }\r\n\r\n    throw new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\r\n  }\r\n\r\n  function parseKeyframeTrack(json) {\r\n    if (json.type === undefined) {\r\n      throw new Error('THREE.KeyframeTrack: track type undefined, can not parse');\r\n    }\r\n\r\n    const trackType = getTrackTypeForValueTypeName(json.type);\r\n\r\n    if (json.times === undefined) {\r\n      const times = [],\r\n        values = [];\r\n      AnimationUtils.flattenJSON(json.keys, times, values, 'value');\r\n      json.times = times;\r\n      json.values = values;\r\n    } // derived classes can define a static parse method\r\n\r\n    if (trackType.parse !== undefined) {\r\n      return trackType.parse(json);\r\n    } else {\r\n      // by default, we assume a constructor compatible with the base\r\n      return new trackType(json.name, json.times, json.values, json.interpolation);\r\n    }\r\n  }\r\n\r\n  const Cache = {\r\n    enabled: false,\r\n    files: {},\r\n    add: function (key, file) {\r\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n      this.files[key] = file;\r\n    },\r\n    get: function (key) {\r\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n      return this.files[key];\r\n    },\r\n    remove: function (key) {\r\n      delete this.files[key];\r\n    },\r\n    clear: function () {\r\n      this.files = {};\r\n    },\r\n  };\r\n\r\n  class LoadingManager {\r\n    constructor(onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      let isLoading = false;\r\n      let itemsLoaded = 0;\r\n      let itemsTotal = 0;\r\n      let urlModifier = undefined;\r\n      const handlers = []; // Refer to #5689 for the reason why we don't set .onStart\r\n      // in the constructor\r\n\r\n      this.onStart = undefined;\r\n      this.onLoad = onLoad;\r\n      this.onProgress = onProgress;\r\n      this.onError = onError;\r\n\r\n      this.itemStart = function (url) {\r\n        itemsTotal++;\r\n\r\n        if (isLoading === false) {\r\n          if (scope.onStart !== undefined) {\r\n            scope.onStart(url, itemsLoaded, itemsTotal);\r\n          }\r\n        }\r\n\r\n        isLoading = true;\r\n      };\r\n\r\n      this.itemEnd = function (url) {\r\n        itemsLoaded++;\r\n\r\n        if (scope.onProgress !== undefined) {\r\n          scope.onProgress(url, itemsLoaded, itemsTotal);\r\n        }\r\n\r\n        if (itemsLoaded === itemsTotal) {\r\n          isLoading = false;\r\n\r\n          if (scope.onLoad !== undefined) {\r\n            scope.onLoad();\r\n          }\r\n        }\r\n      };\r\n\r\n      this.itemError = function (url) {\r\n        if (scope.onError !== undefined) {\r\n          scope.onError(url);\r\n        }\r\n      };\r\n\r\n      this.resolveURL = function (url) {\r\n        if (urlModifier) {\r\n          return urlModifier(url);\r\n        }\r\n\r\n        return url;\r\n      };\r\n\r\n      this.setURLModifier = function (transform) {\r\n        urlModifier = transform;\r\n        return this;\r\n      };\r\n\r\n      this.addHandler = function (regex, loader) {\r\n        handlers.push(regex, loader);\r\n        return this;\r\n      };\r\n\r\n      this.removeHandler = function (regex) {\r\n        const index = handlers.indexOf(regex);\r\n\r\n        if (index !== -1) {\r\n          handlers.splice(index, 2);\r\n        }\r\n\r\n        return this;\r\n      };\r\n\r\n      this.getHandler = function (file) {\r\n        for (let i = 0, l = handlers.length; i < l; i += 2) {\r\n          const regex = handlers[i];\r\n          const loader = handlers[i + 1];\r\n          if (regex.global) regex.lastIndex = 0; // see #17920\r\n\r\n          if (regex.test(file)) {\r\n            return loader;\r\n          }\r\n        }\r\n\r\n        return null;\r\n      };\r\n    }\r\n  }\r\n\r\n  const DefaultLoadingManager = new LoadingManager();\r\n\r\n  class Loader {\r\n    constructor(manager) {\r\n      this.manager = manager !== undefined ? manager : DefaultLoadingManager;\r\n      this.crossOrigin = 'anonymous';\r\n      this.withCredentials = false;\r\n      this.path = '';\r\n      this.resourcePath = '';\r\n      this.requestHeader = {};\r\n    }\r\n\r\n    load() /* url, onLoad, onProgress, onError */\r\n    {}\r\n\r\n    loadAsync(url, onProgress) {\r\n      const scope = this;\r\n      return new Promise(function (resolve, reject) {\r\n        scope.load(url, resolve, onProgress, reject);\r\n      });\r\n    }\r\n\r\n    parse() /* data */\r\n    {}\r\n\r\n    setCrossOrigin(crossOrigin) {\r\n      this.crossOrigin = crossOrigin;\r\n      return this;\r\n    }\r\n\r\n    setWithCredentials(value) {\r\n      this.withCredentials = value;\r\n      return this;\r\n    }\r\n\r\n    setPath(path) {\r\n      this.path = path;\r\n      return this;\r\n    }\r\n\r\n    setResourcePath(resourcePath) {\r\n      this.resourcePath = resourcePath;\r\n      return this;\r\n    }\r\n\r\n    setRequestHeader(requestHeader) {\r\n      this.requestHeader = requestHeader;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  const loading = {};\r\n\r\n  class FileLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      if (url === undefined) url = '';\r\n      if (this.path !== undefined) url = this.path + url;\r\n      url = this.manager.resolveURL(url);\r\n      const scope = this;\r\n      const cached = Cache.get(url);\r\n\r\n      if (cached !== undefined) {\r\n        scope.manager.itemStart(url);\r\n        setTimeout(function () {\r\n          if (onLoad) onLoad(cached);\r\n          scope.manager.itemEnd(url);\r\n        }, 0);\r\n        return cached;\r\n      } // Check if request is duplicate\r\n\r\n      if (loading[url] !== undefined) {\r\n        loading[url].push({\r\n          onLoad: onLoad,\r\n          onProgress: onProgress,\r\n          onError: onError,\r\n        });\r\n        return;\r\n      } // Check for data: URI\r\n\r\n      const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n      const dataUriRegexResult = url.match(dataUriRegex);\r\n      let request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n\r\n      if (dataUriRegexResult) {\r\n        const mimeType = dataUriRegexResult[1];\r\n        const isBase64 = !!dataUriRegexResult[2];\r\n        let data = dataUriRegexResult[3];\r\n        data = decodeURIComponent(data);\r\n        if (isBase64) data = atob(data);\r\n\r\n        try {\r\n          let response;\r\n          const responseType = (this.responseType || '').toLowerCase();\r\n\r\n          switch (responseType) {\r\n            case 'arraybuffer':\r\n            case 'blob':\r\n              const view = new Uint8Array(data.length);\r\n\r\n              for (let i = 0; i < data.length; i++) {\r\n                view[i] = data.charCodeAt(i);\r\n              }\r\n\r\n              if (responseType === 'blob') {\r\n                response = new Blob([view.buffer], {\r\n                  type: mimeType,\r\n                });\r\n              } else {\r\n                response = view.buffer;\r\n              }\r\n\r\n              break;\r\n\r\n            case 'document':\r\n              const parser = new DOMParser();\r\n              response = parser.parseFromString(data, mimeType);\r\n              break;\r\n\r\n            case 'json':\r\n              response = JSON.parse(data);\r\n              break;\r\n\r\n            default:\r\n              // 'text' or other\r\n              response = data;\r\n              break;\r\n          } // Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\r\n          setTimeout(function () {\r\n            if (onLoad) onLoad(response);\r\n            scope.manager.itemEnd(url);\r\n          }, 0);\r\n        } catch (error) {\r\n          // Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n          setTimeout(function () {\r\n            if (onError) onError(error);\r\n            scope.manager.itemError(url);\r\n            scope.manager.itemEnd(url);\r\n          }, 0);\r\n        }\r\n      } else {\r\n        // Initialise array for duplicate requests\r\n        loading[url] = [];\r\n        loading[url].push({\r\n          onLoad: onLoad,\r\n          onProgress: onProgress,\r\n          onError: onError,\r\n        });\r\n        request = new XMLHttpRequest();\r\n        request.open('GET', url, true);\r\n        request.addEventListener(\r\n          'load',\r\n          function (event) {\r\n            const response = this.response;\r\n            const callbacks = loading[url];\r\n            delete loading[url];\r\n\r\n            if (this.status === 200 || this.status === 0) {\r\n              // Some browsers return HTTP Status 0 when using non-http protocol\r\n              // e.g. 'file://' or 'data://'. Handle as success.\r\n              if (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\r\n              // error response bodies as proper responses to requests.\r\n\r\n              Cache.add(url, response);\r\n\r\n              for (let i = 0, il = callbacks.length; i < il; i++) {\r\n                const callback = callbacks[i];\r\n                if (callback.onLoad) callback.onLoad(response);\r\n              }\r\n\r\n              scope.manager.itemEnd(url);\r\n            } else {\r\n              for (let i = 0, il = callbacks.length; i < il; i++) {\r\n                const callback = callbacks[i];\r\n                if (callback.onError) callback.onError(event);\r\n              }\r\n\r\n              scope.manager.itemError(url);\r\n              scope.manager.itemEnd(url);\r\n            }\r\n          },\r\n          false,\r\n        );\r\n        request.addEventListener(\r\n          'progress',\r\n          function (event) {\r\n            const callbacks = loading[url];\r\n\r\n            for (let i = 0, il = callbacks.length; i < il; i++) {\r\n              const callback = callbacks[i];\r\n              if (callback.onProgress) callback.onProgress(event);\r\n            }\r\n          },\r\n          false,\r\n        );\r\n        request.addEventListener(\r\n          'error',\r\n          function (event) {\r\n            const callbacks = loading[url];\r\n            delete loading[url];\r\n\r\n            for (let i = 0, il = callbacks.length; i < il; i++) {\r\n              const callback = callbacks[i];\r\n              if (callback.onError) callback.onError(event);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n            scope.manager.itemEnd(url);\r\n          },\r\n          false,\r\n        );\r\n        request.addEventListener(\r\n          'abort',\r\n          function (event) {\r\n            const callbacks = loading[url];\r\n            delete loading[url];\r\n\r\n            for (let i = 0, il = callbacks.length; i < il; i++) {\r\n              const callback = callbacks[i];\r\n              if (callback.onError) callback.onError(event);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n            scope.manager.itemEnd(url);\r\n          },\r\n          false,\r\n        );\r\n        if (this.responseType !== undefined) request.responseType = this.responseType;\r\n        if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\r\n        if (request.overrideMimeType)\r\n          request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\r\n\r\n        for (const header in this.requestHeader) {\r\n          request.setRequestHeader(header, this.requestHeader[header]);\r\n        }\r\n\r\n        request.send(null);\r\n      }\r\n\r\n      scope.manager.itemStart(url);\r\n      return request;\r\n    }\r\n\r\n    setResponseType(value) {\r\n      this.responseType = value;\r\n      return this;\r\n    }\r\n\r\n    setMimeType(value) {\r\n      this.mimeType = value;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class AnimationLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setPath(this.path);\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setWithCredentials(this.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (text) {\r\n          try {\r\n            onLoad(scope.parse(JSON.parse(text)));\r\n          } catch (e) {\r\n            if (onError) {\r\n              onError(e);\r\n            } else {\r\n              console.error(e);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n\r\n    parse(json) {\r\n      const animations = [];\r\n\r\n      for (let i = 0; i < json.length; i++) {\r\n        const clip = AnimationClip.parse(json[i]);\r\n        animations.push(clip);\r\n      }\r\n\r\n      return animations;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n   *\r\n   * Sub classes have to implement the parse() method which will be used in load().\r\n   */\r\n\r\n  class CompressedTextureLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const images = [];\r\n      const texture = new CompressedTexture();\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setPath(this.path);\r\n      loader.setResponseType('arraybuffer');\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setWithCredentials(scope.withCredentials);\r\n      let loaded = 0;\r\n\r\n      function loadTexture(i) {\r\n        loader.load(\r\n          url[i],\r\n          function (buffer) {\r\n            const texDatas = scope.parse(buffer, true);\r\n            images[i] = {\r\n              width: texDatas.width,\r\n              height: texDatas.height,\r\n              format: texDatas.format,\r\n              mipmaps: texDatas.mipmaps,\r\n            };\r\n            loaded += 1;\r\n\r\n            if (loaded === 6) {\r\n              if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\r\n              texture.image = images;\r\n              texture.format = texDatas.format;\r\n              texture.needsUpdate = true;\r\n              if (onLoad) onLoad(texture);\r\n            }\r\n          },\r\n          onProgress,\r\n          onError,\r\n        );\r\n      }\r\n\r\n      if (Array.isArray(url)) {\r\n        for (let i = 0, il = url.length; i < il; ++i) {\r\n          loadTexture(i);\r\n        }\r\n      } else {\r\n        // compressed cubemap texture stored in a single DDS file\r\n        loader.load(\r\n          url,\r\n          function (buffer) {\r\n            const texDatas = scope.parse(buffer, true);\r\n\r\n            if (texDatas.isCubemap) {\r\n              const faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n              for (let f = 0; f < faces; f++) {\r\n                images[f] = {\r\n                  mipmaps: [],\r\n                };\r\n\r\n                for (let i = 0; i < texDatas.mipmapCount; i++) {\r\n                  images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\r\n                  images[f].format = texDatas.format;\r\n                  images[f].width = texDatas.width;\r\n                  images[f].height = texDatas.height;\r\n                }\r\n              }\r\n\r\n              texture.image = images;\r\n            } else {\r\n              texture.image.width = texDatas.width;\r\n              texture.image.height = texDatas.height;\r\n              texture.mipmaps = texDatas.mipmaps;\r\n            }\r\n\r\n            if (texDatas.mipmapCount === 1) {\r\n              texture.minFilter = LinearFilter;\r\n            }\r\n\r\n            texture.format = texDatas.format;\r\n            texture.needsUpdate = true;\r\n            if (onLoad) onLoad(texture);\r\n          },\r\n          onProgress,\r\n          onError,\r\n        );\r\n      }\r\n\r\n      return texture;\r\n    }\r\n  }\r\n\r\n  class ImageLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      if (this.path !== undefined) url = this.path + url;\r\n      url = this.manager.resolveURL(url);\r\n      const scope = this;\r\n      const cached = Cache.get(url);\r\n\r\n      if (cached !== undefined) {\r\n        scope.manager.itemStart(url);\r\n        setTimeout(function () {\r\n          if (onLoad) onLoad(cached);\r\n          scope.manager.itemEnd(url);\r\n        }, 0);\r\n        return cached;\r\n      }\r\n\r\n      const image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\r\n\r\n      function onImageLoad() {\r\n        image.removeEventListener('load', onImageLoad, false);\r\n        image.removeEventListener('error', onImageError, false);\r\n        Cache.add(url, this);\r\n        if (onLoad) onLoad(this);\r\n        scope.manager.itemEnd(url);\r\n      }\r\n\r\n      function onImageError(event) {\r\n        image.removeEventListener('load', onImageLoad, false);\r\n        image.removeEventListener('error', onImageError, false);\r\n        if (onError) onError(event);\r\n        scope.manager.itemError(url);\r\n        scope.manager.itemEnd(url);\r\n      }\r\n\r\n      image.addEventListener('load', onImageLoad, false);\r\n      image.addEventListener('error', onImageError, false);\r\n\r\n      if (url.substr(0, 5) !== 'data:') {\r\n        if (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\r\n      }\r\n\r\n      scope.manager.itemStart(url);\r\n      image.src = url;\r\n      return image;\r\n    }\r\n  }\r\n\r\n  class CubeTextureLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(urls, onLoad, onProgress, onError) {\r\n      const texture = new CubeTexture();\r\n      const loader = new ImageLoader(this.manager);\r\n      loader.setCrossOrigin(this.crossOrigin);\r\n      loader.setPath(this.path);\r\n      let loaded = 0;\r\n\r\n      function loadTexture(i) {\r\n        loader.load(\r\n          urls[i],\r\n          function (image) {\r\n            texture.images[i] = image;\r\n            loaded++;\r\n\r\n            if (loaded === 6) {\r\n              texture.needsUpdate = true;\r\n              if (onLoad) onLoad(texture);\r\n            }\r\n          },\r\n          undefined,\r\n          onError,\r\n        );\r\n      }\r\n\r\n      for (let i = 0; i < urls.length; ++i) {\r\n        loadTexture(i);\r\n      }\r\n\r\n      return texture;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n   *\r\n   * Sub classes have to implement the parse() method which will be used in load().\r\n   */\r\n\r\n  class DataTextureLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const texture = new DataTexture();\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setResponseType('arraybuffer');\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setPath(this.path);\r\n      loader.setWithCredentials(scope.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (buffer) {\r\n          const texData = scope.parse(buffer);\r\n          if (!texData) return;\r\n\r\n          if (texData.image !== undefined) {\r\n            texture.image = texData.image;\r\n          } else if (texData.data !== undefined) {\r\n            texture.image.width = texData.width;\r\n            texture.image.height = texData.height;\r\n            texture.image.data = texData.data;\r\n          }\r\n\r\n          texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\r\n          texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\r\n          texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\r\n          texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\r\n          texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\r\n\r\n          if (texData.encoding !== undefined) {\r\n            texture.encoding = texData.encoding;\r\n          }\r\n\r\n          if (texData.flipY !== undefined) {\r\n            texture.flipY = texData.flipY;\r\n          }\r\n\r\n          if (texData.format !== undefined) {\r\n            texture.format = texData.format;\r\n          }\r\n\r\n          if (texData.type !== undefined) {\r\n            texture.type = texData.type;\r\n          }\r\n\r\n          if (texData.mipmaps !== undefined) {\r\n            texture.mipmaps = texData.mipmaps;\r\n            texture.minFilter = LinearMipmapLinearFilter; // presumably...\r\n          }\r\n\r\n          if (texData.mipmapCount === 1) {\r\n            texture.minFilter = LinearFilter;\r\n          }\r\n\r\n          if (texData.generateMipmaps !== undefined) {\r\n            texture.generateMipmaps = texData.generateMipmaps;\r\n          }\r\n\r\n          texture.needsUpdate = true;\r\n          if (onLoad) onLoad(texture, texData);\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n      return texture;\r\n    }\r\n  }\r\n\r\n  class TextureLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const texture = new Texture();\r\n      const loader = new ImageLoader(this.manager);\r\n      loader.setCrossOrigin(this.crossOrigin);\r\n      loader.setPath(this.path);\r\n      loader.load(\r\n        url,\r\n        function (image) {\r\n          texture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\r\n\r\n          const isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\r\n          texture.format = isJPEG ? RGBFormat : RGBAFormat;\r\n          texture.needsUpdate = true;\r\n\r\n          if (onLoad !== undefined) {\r\n            onLoad(texture);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n      return texture;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extensible curve object.\r\n   *\r\n   * Some common of curve methods:\r\n   * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\r\n   * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\r\n   * .getPoints(), .getSpacedPoints()\r\n   * .getLength()\r\n   * .updateArcLengths()\r\n   *\r\n   * This following curves inherit from THREE.Curve:\r\n   *\r\n   * -- 2D curves --\r\n   * THREE.ArcCurve\r\n   * THREE.CubicBezierCurve\r\n   * THREE.EllipseCurve\r\n   * THREE.LineCurve\r\n   * THREE.QuadraticBezierCurve\r\n   * THREE.SplineCurve\r\n   *\r\n   * -- 3D curves --\r\n   * THREE.CatmullRomCurve3\r\n   * THREE.CubicBezierCurve3\r\n   * THREE.LineCurve3\r\n   * THREE.QuadraticBezierCurve3\r\n   *\r\n   * A series of curves can be represented as a THREE.CurvePath.\r\n   *\r\n   **/\r\n\r\n  class Curve {\r\n    constructor() {\r\n      this.type = 'Curve';\r\n      this.arcLengthDivisions = 200;\r\n    } // Virtual base class method to overwrite and implement in subclasses\r\n    //\t- t [0 .. 1]\r\n\r\n    getPoint() /* t, optionalTarget */\r\n    {\r\n      console.warn('THREE.Curve: .getPoint() not implemented.');\r\n      return null;\r\n    } // Get point at relative position in curve according to arc length\r\n    // - u [0 .. 1]\r\n\r\n    getPointAt(u, optionalTarget) {\r\n      const t = this.getUtoTmapping(u);\r\n      return this.getPoint(t, optionalTarget);\r\n    } // Get sequence of points using getPoint( t )\r\n\r\n    getPoints(divisions = 5) {\r\n      const points = [];\r\n\r\n      for (let d = 0; d <= divisions; d++) {\r\n        points.push(this.getPoint(d / divisions));\r\n      }\r\n\r\n      return points;\r\n    } // Get sequence of points using getPointAt( u )\r\n\r\n    getSpacedPoints(divisions = 5) {\r\n      const points = [];\r\n\r\n      for (let d = 0; d <= divisions; d++) {\r\n        points.push(this.getPointAt(d / divisions));\r\n      }\r\n\r\n      return points;\r\n    } // Get total curve arc length\r\n\r\n    getLength() {\r\n      const lengths = this.getLengths();\r\n      return lengths[lengths.length - 1];\r\n    } // Get list of cumulative segment lengths\r\n\r\n    getLengths(divisions = this.arcLengthDivisions) {\r\n      if (\r\n        this.cacheArcLengths &&\r\n        this.cacheArcLengths.length === divisions + 1 &&\r\n        !this.needsUpdate\r\n      ) {\r\n        return this.cacheArcLengths;\r\n      }\r\n\r\n      this.needsUpdate = false;\r\n      const cache = [];\r\n      let current,\r\n        last = this.getPoint(0);\r\n      let sum = 0;\r\n      cache.push(0);\r\n\r\n      for (let p = 1; p <= divisions; p++) {\r\n        current = this.getPoint(p / divisions);\r\n        sum += current.distanceTo(last);\r\n        cache.push(sum);\r\n        last = current;\r\n      }\r\n\r\n      this.cacheArcLengths = cache;\r\n      return cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n    }\r\n\r\n    updateArcLengths() {\r\n      this.needsUpdate = true;\r\n      this.getLengths();\r\n    } // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n    getUtoTmapping(u, distance) {\r\n      const arcLengths = this.getLengths();\r\n      let i = 0;\r\n      const il = arcLengths.length;\r\n      let targetArcLength; // The targeted u distance value to get\r\n\r\n      if (distance) {\r\n        targetArcLength = distance;\r\n      } else {\r\n        targetArcLength = u * arcLengths[il - 1];\r\n      } // binary search for the index with largest value smaller than target u distance\r\n\r\n      let low = 0,\r\n        high = il - 1,\r\n        comparison;\r\n\r\n      while (low <= high) {\r\n        i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n        comparison = arcLengths[i] - targetArcLength;\r\n\r\n        if (comparison < 0) {\r\n          low = i + 1;\r\n        } else if (comparison > 0) {\r\n          high = i - 1;\r\n        } else {\r\n          high = i;\r\n          break; // DONE\r\n        }\r\n      }\r\n\r\n      i = high;\r\n\r\n      if (arcLengths[i] === targetArcLength) {\r\n        return i / (il - 1);\r\n      } // we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n      const lengthBefore = arcLengths[i];\r\n      const lengthAfter = arcLengths[i + 1];\r\n      const segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\r\n\r\n      const segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\r\n\r\n      const t = (i + segmentFraction) / (il - 1);\r\n      return t;\r\n    } // Returns a unit vector tangent at t\r\n    // In case any sub curve does not implement its tangent derivation,\r\n    // 2 points a small delta apart will be used to find its gradient\r\n    // which seems to give a reasonable approximation\r\n\r\n    getTangent(t, optionalTarget) {\r\n      const delta = 0.0001;\r\n      let t1 = t - delta;\r\n      let t2 = t + delta; // Capping in case of danger\r\n\r\n      if (t1 < 0) t1 = 0;\r\n      if (t2 > 1) t2 = 1;\r\n      const pt1 = this.getPoint(t1);\r\n      const pt2 = this.getPoint(t2);\r\n      const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\r\n      tangent.copy(pt2).sub(pt1).normalize();\r\n      return tangent;\r\n    }\r\n\r\n    getTangentAt(u, optionalTarget) {\r\n      const t = this.getUtoTmapping(u);\r\n      return this.getTangent(t, optionalTarget);\r\n    }\r\n\r\n    computeFrenetFrames(segments, closed) {\r\n      // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n      const normal = new Vector3();\r\n      const tangents = [];\r\n      const normals = [];\r\n      const binormals = [];\r\n      const vec = new Vector3();\r\n      const mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\r\n\r\n      for (let i = 0; i <= segments; i++) {\r\n        const u = i / segments;\r\n        tangents[i] = this.getTangentAt(u, new Vector3());\r\n        tangents[i].normalize();\r\n      } // select an initial normal vector perpendicular to the first tangent vector,\r\n      // and in the direction of the minimum tangent xyz component\r\n\r\n      normals[0] = new Vector3();\r\n      binormals[0] = new Vector3();\r\n      let min = Number.MAX_VALUE;\r\n      const tx = Math.abs(tangents[0].x);\r\n      const ty = Math.abs(tangents[0].y);\r\n      const tz = Math.abs(tangents[0].z);\r\n\r\n      if (tx <= min) {\r\n        min = tx;\r\n        normal.set(1, 0, 0);\r\n      }\r\n\r\n      if (ty <= min) {\r\n        min = ty;\r\n        normal.set(0, 1, 0);\r\n      }\r\n\r\n      if (tz <= min) {\r\n        normal.set(0, 0, 1);\r\n      }\r\n\r\n      vec.crossVectors(tangents[0], normal).normalize();\r\n      normals[0].crossVectors(tangents[0], vec);\r\n      binormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n      for (let i = 1; i <= segments; i++) {\r\n        normals[i] = normals[i - 1].clone();\r\n        binormals[i] = binormals[i - 1].clone();\r\n        vec.crossVectors(tangents[i - 1], tangents[i]);\r\n\r\n        if (vec.length() > Number.EPSILON) {\r\n          vec.normalize();\r\n          const theta = Math.acos(clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\r\n\r\n          normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\r\n        }\r\n\r\n        binormals[i].crossVectors(tangents[i], normals[i]);\r\n      } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n      if (closed === true) {\r\n        let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));\r\n        theta /= segments;\r\n\r\n        if (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\r\n          theta = -theta;\r\n        }\r\n\r\n        for (let i = 1; i <= segments; i++) {\r\n          // twist a little...\r\n          normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\r\n          binormals[i].crossVectors(tangents[i], normals[i]);\r\n        }\r\n      }\r\n\r\n      return {\r\n        tangents: tangents,\r\n        normals: normals,\r\n        binormals: binormals,\r\n      };\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(source) {\r\n      this.arcLengthDivisions = source.arcLengthDivisions;\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = {\r\n        metadata: {\r\n          version: 4.5,\r\n          type: 'Curve',\r\n          generator: 'Curve.toJSON',\r\n        },\r\n      };\r\n      data.arcLengthDivisions = this.arcLengthDivisions;\r\n      data.type = this.type;\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      this.arcLengthDivisions = json.arcLengthDivisions;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class EllipseCurve extends Curve {\r\n    constructor(\r\n      aX = 0,\r\n      aY = 0,\r\n      xRadius = 1,\r\n      yRadius = 1,\r\n      aStartAngle = 0,\r\n      aEndAngle = Math.PI * 2,\r\n      aClockwise = false,\r\n      aRotation = 0,\r\n    ) {\r\n      super();\r\n      this.type = 'EllipseCurve';\r\n      this.aX = aX;\r\n      this.aY = aY;\r\n      this.xRadius = xRadius;\r\n      this.yRadius = yRadius;\r\n      this.aStartAngle = aStartAngle;\r\n      this.aEndAngle = aEndAngle;\r\n      this.aClockwise = aClockwise;\r\n      this.aRotation = aRotation;\r\n    }\r\n\r\n    getPoint(t, optionalTarget) {\r\n      const point = optionalTarget || new Vector2();\r\n      const twoPi = Math.PI * 2;\r\n      let deltaAngle = this.aEndAngle - this.aStartAngle;\r\n      const samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\r\n\r\n      while (deltaAngle < 0) deltaAngle += twoPi;\r\n\r\n      while (deltaAngle > twoPi) deltaAngle -= twoPi;\r\n\r\n      if (deltaAngle < Number.EPSILON) {\r\n        if (samePoints) {\r\n          deltaAngle = 0;\r\n        } else {\r\n          deltaAngle = twoPi;\r\n        }\r\n      }\r\n\r\n      if (this.aClockwise === true && !samePoints) {\r\n        if (deltaAngle === twoPi) {\r\n          deltaAngle = -twoPi;\r\n        } else {\r\n          deltaAngle = deltaAngle - twoPi;\r\n        }\r\n      }\r\n\r\n      const angle = this.aStartAngle + t * deltaAngle;\r\n      let x = this.aX + this.xRadius * Math.cos(angle);\r\n      let y = this.aY + this.yRadius * Math.sin(angle);\r\n\r\n      if (this.aRotation !== 0) {\r\n        const cos = Math.cos(this.aRotation);\r\n        const sin = Math.sin(this.aRotation);\r\n        const tx = x - this.aX;\r\n        const ty = y - this.aY; // Rotate the point about the center of the ellipse.\r\n\r\n        x = tx * cos - ty * sin + this.aX;\r\n        y = tx * sin + ty * cos + this.aY;\r\n      }\r\n\r\n      return point.set(x, y);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.aX = source.aX;\r\n      this.aY = source.aY;\r\n      this.xRadius = source.xRadius;\r\n      this.yRadius = source.yRadius;\r\n      this.aStartAngle = source.aStartAngle;\r\n      this.aEndAngle = source.aEndAngle;\r\n      this.aClockwise = source.aClockwise;\r\n      this.aRotation = source.aRotation;\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.aX = this.aX;\r\n      data.aY = this.aY;\r\n      data.xRadius = this.xRadius;\r\n      data.yRadius = this.yRadius;\r\n      data.aStartAngle = this.aStartAngle;\r\n      data.aEndAngle = this.aEndAngle;\r\n      data.aClockwise = this.aClockwise;\r\n      data.aRotation = this.aRotation;\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.aX = json.aX;\r\n      this.aY = json.aY;\r\n      this.xRadius = json.xRadius;\r\n      this.yRadius = json.yRadius;\r\n      this.aStartAngle = json.aStartAngle;\r\n      this.aEndAngle = json.aEndAngle;\r\n      this.aClockwise = json.aClockwise;\r\n      this.aRotation = json.aRotation;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  EllipseCurve.prototype.isEllipseCurve = true;\r\n\r\n  class ArcCurve extends EllipseCurve {\r\n    constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\r\n      super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n      this.type = 'ArcCurve';\r\n    }\r\n  }\r\n\r\n  ArcCurve.prototype.isArcCurve = true;\r\n\r\n  /**\r\n   * Centripetal CatmullRom Curve - which is useful for avoiding\r\n   * cusps and self-intersections in non-uniform catmull rom curves.\r\n   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n   *\r\n   * curve.type accepts centripetal(default), chordal and catmullrom\r\n   * curve.tension is used for catmullrom which defaults to 0.5\r\n   */\r\n\r\n  /*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n  function CubicPoly() {\r\n    let c0 = 0,\r\n      c1 = 0,\r\n      c2 = 0,\r\n      c3 = 0;\r\n    /*\r\n     * Compute coefficients for a cubic polynomial\r\n     *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n     * such that\r\n     *\t p(0) = x0, p(1) = x1\r\n     *\tand\r\n     *\t p'(0) = t0, p'(1) = t1.\r\n     */\r\n\r\n    function init(x0, x1, t0, t1) {\r\n      c0 = x0;\r\n      c1 = t0;\r\n      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n      c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n    }\r\n\r\n    return {\r\n      initCatmullRom: function (x0, x1, x2, x3, tension) {\r\n        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\r\n      },\r\n      initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\r\n        // compute tangents when parameterized in [t1,t2]\r\n        let t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\r\n        let t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\r\n\r\n        t1 *= dt1;\r\n        t2 *= dt1;\r\n        init(x1, x2, t1, t2);\r\n      },\r\n      calc: function (t) {\r\n        const t2 = t * t;\r\n        const t3 = t2 * t;\r\n        return c0 + c1 * t + c2 * t2 + c3 * t3;\r\n      },\r\n    };\r\n  } //\r\n\r\n  const tmp = new Vector3();\r\n  const px = new CubicPoly(),\r\n    py = new CubicPoly(),\r\n    pz = new CubicPoly();\r\n\r\n  class CatmullRomCurve3 extends Curve {\r\n    constructor(points = [], closed = false, curveType = 'centripetal', tension = 0.5) {\r\n      super();\r\n      this.type = 'CatmullRomCurve3';\r\n      this.points = points;\r\n      this.closed = closed;\r\n      this.curveType = curveType;\r\n      this.tension = tension;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector3()) {\r\n      const point = optionalTarget;\r\n      const points = this.points;\r\n      const l = points.length;\r\n      const p = (l - (this.closed ? 0 : 1)) * t;\r\n      let intPoint = Math.floor(p);\r\n      let weight = p - intPoint;\r\n\r\n      if (this.closed) {\r\n        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\r\n      } else if (weight === 0 && intPoint === l - 1) {\r\n        intPoint = l - 2;\r\n        weight = 1;\r\n      }\r\n\r\n      let p0, p3; // 4 points (p1 & p2 defined below)\r\n\r\n      if (this.closed || intPoint > 0) {\r\n        p0 = points[(intPoint - 1) % l];\r\n      } else {\r\n        // extrapolate first point\r\n        tmp.subVectors(points[0], points[1]).add(points[0]);\r\n        p0 = tmp;\r\n      }\r\n\r\n      const p1 = points[intPoint % l];\r\n      const p2 = points[(intPoint + 1) % l];\r\n\r\n      if (this.closed || intPoint + 2 < l) {\r\n        p3 = points[(intPoint + 2) % l];\r\n      } else {\r\n        // extrapolate last point\r\n        tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\r\n        p3 = tmp;\r\n      }\r\n\r\n      if (this.curveType === 'centripetal' || this.curveType === 'chordal') {\r\n        // init Centripetal / Chordal Catmull-Rom\r\n        const pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n        let dt0 = Math.pow(p0.distanceToSquared(p1), pow);\r\n        let dt1 = Math.pow(p1.distanceToSquared(p2), pow);\r\n        let dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\r\n\r\n        if (dt1 < 1e-4) dt1 = 1.0;\r\n        if (dt0 < 1e-4) dt0 = dt1;\r\n        if (dt2 < 1e-4) dt2 = dt1;\r\n        px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\r\n        py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\r\n        pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\r\n      } else if (this.curveType === 'catmullrom') {\r\n        px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\r\n        py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\r\n        pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\r\n      }\r\n\r\n      point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.points = [];\r\n\r\n      for (let i = 0, l = source.points.length; i < l; i++) {\r\n        const point = source.points[i];\r\n        this.points.push(point.clone());\r\n      }\r\n\r\n      this.closed = source.closed;\r\n      this.curveType = source.curveType;\r\n      this.tension = source.tension;\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.points = [];\r\n\r\n      for (let i = 0, l = this.points.length; i < l; i++) {\r\n        const point = this.points[i];\r\n        data.points.push(point.toArray());\r\n      }\r\n\r\n      data.closed = this.closed;\r\n      data.curveType = this.curveType;\r\n      data.tension = this.tension;\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.points = [];\r\n\r\n      for (let i = 0, l = json.points.length; i < l; i++) {\r\n        const point = json.points[i];\r\n        this.points.push(new Vector3().fromArray(point));\r\n      }\r\n\r\n      this.closed = json.closed;\r\n      this.curveType = json.curveType;\r\n      this.tension = json.tension;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\n  /**\r\n   * Bezier Curves formulas obtained from\r\n   * http://en.wikipedia.org/wiki/Bézier_curve\r\n   */\r\n  function CatmullRom(t, p0, p1, p2, p3) {\r\n    const v0 = (p2 - p0) * 0.5;\r\n    const v1 = (p3 - p1) * 0.5;\r\n    const t2 = t * t;\r\n    const t3 = t * t2;\r\n    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\r\n  } //\r\n\r\n  function QuadraticBezierP0(t, p) {\r\n    const k = 1 - t;\r\n    return k * k * p;\r\n  }\r\n\r\n  function QuadraticBezierP1(t, p) {\r\n    return 2 * (1 - t) * t * p;\r\n  }\r\n\r\n  function QuadraticBezierP2(t, p) {\r\n    return t * t * p;\r\n  }\r\n\r\n  function QuadraticBezier(t, p0, p1, p2) {\r\n    return QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\r\n  } //\r\n\r\n  function CubicBezierP0(t, p) {\r\n    const k = 1 - t;\r\n    return k * k * k * p;\r\n  }\r\n\r\n  function CubicBezierP1(t, p) {\r\n    const k = 1 - t;\r\n    return 3 * k * k * t * p;\r\n  }\r\n\r\n  function CubicBezierP2(t, p) {\r\n    return 3 * (1 - t) * t * t * p;\r\n  }\r\n\r\n  function CubicBezierP3(t, p) {\r\n    return t * t * t * p;\r\n  }\r\n\r\n  function CubicBezier(t, p0, p1, p2, p3) {\r\n    return (\r\n      CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3)\r\n    );\r\n  }\r\n\r\n  class CubicBezierCurve extends Curve {\r\n    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2()) {\r\n      super();\r\n      this.type = 'CubicBezierCurve';\r\n      this.v0 = v0;\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n      this.v3 = v3;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector2()) {\r\n      const point = optionalTarget;\r\n      const v0 = this.v0,\r\n        v1 = this.v1,\r\n        v2 = this.v2,\r\n        v3 = this.v3;\r\n      point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v0.copy(source.v0);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      this.v3.copy(source.v3);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v0 = this.v0.toArray();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      data.v3 = this.v3.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v0.fromArray(json.v0);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      this.v3.fromArray(json.v3);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  CubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\n  class CubicBezierCurve3 extends Curve {\r\n    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3()) {\r\n      super();\r\n      this.type = 'CubicBezierCurve3';\r\n      this.v0 = v0;\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n      this.v3 = v3;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector3()) {\r\n      const point = optionalTarget;\r\n      const v0 = this.v0,\r\n        v1 = this.v1,\r\n        v2 = this.v2,\r\n        v3 = this.v3;\r\n      point.set(\r\n        CubicBezier(t, v0.x, v1.x, v2.x, v3.x),\r\n        CubicBezier(t, v0.y, v1.y, v2.y, v3.y),\r\n        CubicBezier(t, v0.z, v1.z, v2.z, v3.z),\r\n      );\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v0.copy(source.v0);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      this.v3.copy(source.v3);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v0 = this.v0.toArray();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      data.v3 = this.v3.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v0.fromArray(json.v0);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      this.v3.fromArray(json.v3);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\n  class LineCurve extends Curve {\r\n    constructor(v1 = new Vector2(), v2 = new Vector2()) {\r\n      super();\r\n      this.type = 'LineCurve';\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector2()) {\r\n      const point = optionalTarget;\r\n\r\n      if (t === 1) {\r\n        point.copy(this.v2);\r\n      } else {\r\n        point.copy(this.v2).sub(this.v1);\r\n        point.multiplyScalar(t).add(this.v1);\r\n      }\r\n\r\n      return point;\r\n    } // Line curve is linear, so we can overwrite default getPointAt\r\n\r\n    getPointAt(u, optionalTarget) {\r\n      return this.getPoint(u, optionalTarget);\r\n    }\r\n\r\n    getTangent(t, optionalTarget) {\r\n      const tangent = optionalTarget || new Vector2();\r\n      tangent.copy(this.v2).sub(this.v1).normalize();\r\n      return tangent;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  LineCurve.prototype.isLineCurve = true;\r\n\r\n  class LineCurve3 extends Curve {\r\n    constructor(v1 = new Vector3(), v2 = new Vector3()) {\r\n      super();\r\n      this.type = 'LineCurve3';\r\n      this.isLineCurve3 = true;\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector3()) {\r\n      const point = optionalTarget;\r\n\r\n      if (t === 1) {\r\n        point.copy(this.v2);\r\n      } else {\r\n        point.copy(this.v2).sub(this.v1);\r\n        point.multiplyScalar(t).add(this.v1);\r\n      }\r\n\r\n      return point;\r\n    } // Line curve is linear, so we can overwrite default getPointAt\r\n\r\n    getPointAt(u, optionalTarget) {\r\n      return this.getPoint(u, optionalTarget);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class QuadraticBezierCurve extends Curve {\r\n    constructor(v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2()) {\r\n      super();\r\n      this.type = 'QuadraticBezierCurve';\r\n      this.v0 = v0;\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector2()) {\r\n      const point = optionalTarget;\r\n      const v0 = this.v0,\r\n        v1 = this.v1,\r\n        v2 = this.v2;\r\n      point.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v0.copy(source.v0);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v0 = this.v0.toArray();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v0.fromArray(json.v0);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\n  class QuadraticBezierCurve3 extends Curve {\r\n    constructor(v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3()) {\r\n      super();\r\n      this.type = 'QuadraticBezierCurve3';\r\n      this.v0 = v0;\r\n      this.v1 = v1;\r\n      this.v2 = v2;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector3()) {\r\n      const point = optionalTarget;\r\n      const v0 = this.v0,\r\n        v1 = this.v1,\r\n        v2 = this.v2;\r\n      point.set(\r\n        QuadraticBezier(t, v0.x, v1.x, v2.x),\r\n        QuadraticBezier(t, v0.y, v1.y, v2.y),\r\n        QuadraticBezier(t, v0.z, v1.z, v2.z),\r\n      );\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.v0.copy(source.v0);\r\n      this.v1.copy(source.v1);\r\n      this.v2.copy(source.v2);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.v0 = this.v0.toArray();\r\n      data.v1 = this.v1.toArray();\r\n      data.v2 = this.v2.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.v0.fromArray(json.v0);\r\n      this.v1.fromArray(json.v1);\r\n      this.v2.fromArray(json.v2);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\n  class SplineCurve extends Curve {\r\n    constructor(points = []) {\r\n      super();\r\n      this.type = 'SplineCurve';\r\n      this.points = points;\r\n    }\r\n\r\n    getPoint(t, optionalTarget = new Vector2()) {\r\n      const point = optionalTarget;\r\n      const points = this.points;\r\n      const p = (points.length - 1) * t;\r\n      const intPoint = Math.floor(p);\r\n      const weight = p - intPoint;\r\n      const p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\r\n      const p1 = points[intPoint];\r\n      const p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\r\n      const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\r\n      point.set(\r\n        CatmullRom(weight, p0.x, p1.x, p2.x, p3.x),\r\n        CatmullRom(weight, p0.y, p1.y, p2.y, p3.y),\r\n      );\r\n      return point;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.points = [];\r\n\r\n      for (let i = 0, l = source.points.length; i < l; i++) {\r\n        const point = source.points[i];\r\n        this.points.push(point.clone());\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.points = [];\r\n\r\n      for (let i = 0, l = this.points.length; i < l; i++) {\r\n        const point = this.points[i];\r\n        data.points.push(point.toArray());\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.points = [];\r\n\r\n      for (let i = 0, l = json.points.length; i < l; i++) {\r\n        const point = json.points[i];\r\n        this.points.push(new Vector2().fromArray(point));\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  SplineCurve.prototype.isSplineCurve = true;\r\n\r\n  var Curves = /*#__PURE__*/ Object.freeze({\r\n    __proto__: null,\r\n    ArcCurve: ArcCurve,\r\n    CatmullRomCurve3: CatmullRomCurve3,\r\n    CubicBezierCurve: CubicBezierCurve,\r\n    CubicBezierCurve3: CubicBezierCurve3,\r\n    EllipseCurve: EllipseCurve,\r\n    LineCurve: LineCurve,\r\n    LineCurve3: LineCurve3,\r\n    QuadraticBezierCurve: QuadraticBezierCurve,\r\n    QuadraticBezierCurve3: QuadraticBezierCurve3,\r\n    SplineCurve: SplineCurve,\r\n  });\r\n\r\n  /**************************************************************\r\n   *\tCurved Path - a curve path is simply a array of connected\r\n   *\tcurves, but retains the api of a curve\r\n   **************************************************************/\r\n\r\n  class CurvePath extends Curve {\r\n    constructor() {\r\n      super();\r\n      this.type = 'CurvePath';\r\n      this.curves = [];\r\n      this.autoClose = false; // Automatically closes the path\r\n    }\r\n\r\n    add(curve) {\r\n      this.curves.push(curve);\r\n    }\r\n\r\n    closePath() {\r\n      // Add a line curve if start and end of lines are not connected\r\n      const startPoint = this.curves[0].getPoint(0);\r\n      const endPoint = this.curves[this.curves.length - 1].getPoint(1);\r\n\r\n      if (!startPoint.equals(endPoint)) {\r\n        this.curves.push(new LineCurve(endPoint, startPoint));\r\n      }\r\n    } // To get accurate point with reference to\r\n    // entire path distance at time t,\r\n    // following has to be done:\r\n    // 1. Length of each sub path have to be known\r\n    // 2. Locate and identify type of curve\r\n    // 3. Get t for the curve\r\n    // 4. Return curve.getPointAt(t')\r\n\r\n    getPoint(t) {\r\n      const d = t * this.getLength();\r\n      const curveLengths = this.getCurveLengths();\r\n      let i = 0; // To think about boundaries points.\r\n\r\n      while (i < curveLengths.length) {\r\n        if (curveLengths[i] >= d) {\r\n          const diff = curveLengths[i] - d;\r\n          const curve = this.curves[i];\r\n          const segmentLength = curve.getLength();\r\n          const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n          return curve.getPointAt(u);\r\n        }\r\n\r\n        i++;\r\n      }\r\n\r\n      return null; // loop where sum != 0, sum > d , sum+1 <d\r\n    } // We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n    // getPoint() depends on getLength\r\n\r\n    getLength() {\r\n      const lens = this.getCurveLengths();\r\n      return lens[lens.length - 1];\r\n    } // cacheLengths must be recalculated.\r\n\r\n    updateArcLengths() {\r\n      this.needsUpdate = true;\r\n      this.cacheLengths = null;\r\n      this.getCurveLengths();\r\n    } // Compute lengths and cache them\r\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n    getCurveLengths() {\r\n      // We use cache values if curves and cache array are same length\r\n      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\r\n        return this.cacheLengths;\r\n      } // Get length of sub-curve\r\n      // Push sums into cached array\r\n\r\n      const lengths = [];\r\n      let sums = 0;\r\n\r\n      for (let i = 0, l = this.curves.length; i < l; i++) {\r\n        sums += this.curves[i].getLength();\r\n        lengths.push(sums);\r\n      }\r\n\r\n      this.cacheLengths = lengths;\r\n      return lengths;\r\n    }\r\n\r\n    getSpacedPoints(divisions = 40) {\r\n      const points = [];\r\n\r\n      for (let i = 0; i <= divisions; i++) {\r\n        points.push(this.getPoint(i / divisions));\r\n      }\r\n\r\n      if (this.autoClose) {\r\n        points.push(points[0]);\r\n      }\r\n\r\n      return points;\r\n    }\r\n\r\n    getPoints(divisions = 12) {\r\n      const points = [];\r\n      let last;\r\n\r\n      for (let i = 0, curves = this.curves; i < curves.length; i++) {\r\n        const curve = curves[i];\r\n        const resolution =\r\n          curve && curve.isEllipseCurve\r\n            ? divisions * 2\r\n            : curve && (curve.isLineCurve || curve.isLineCurve3)\r\n            ? 1\r\n            : curve && curve.isSplineCurve\r\n            ? divisions * curve.points.length\r\n            : divisions;\r\n        const pts = curve.getPoints(resolution);\r\n\r\n        for (let j = 0; j < pts.length; j++) {\r\n          const point = pts[j];\r\n          if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\r\n\r\n          points.push(point);\r\n          last = point;\r\n        }\r\n      }\r\n\r\n      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\r\n        points.push(points[0]);\r\n      }\r\n\r\n      return points;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.curves = [];\r\n\r\n      for (let i = 0, l = source.curves.length; i < l; i++) {\r\n        const curve = source.curves[i];\r\n        this.curves.push(curve.clone());\r\n      }\r\n\r\n      this.autoClose = source.autoClose;\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.autoClose = this.autoClose;\r\n      data.curves = [];\r\n\r\n      for (let i = 0, l = this.curves.length; i < l; i++) {\r\n        const curve = this.curves[i];\r\n        data.curves.push(curve.toJSON());\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.autoClose = json.autoClose;\r\n      this.curves = [];\r\n\r\n      for (let i = 0, l = json.curves.length; i < l; i++) {\r\n        const curve = json.curves[i];\r\n        this.curves.push(new Curves[curve.type]().fromJSON(curve));\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class Path extends CurvePath {\r\n    constructor(points) {\r\n      super();\r\n      this.type = 'Path';\r\n      this.currentPoint = new Vector2();\r\n\r\n      if (points) {\r\n        this.setFromPoints(points);\r\n      }\r\n    }\r\n\r\n    setFromPoints(points) {\r\n      this.moveTo(points[0].x, points[0].y);\r\n\r\n      for (let i = 1, l = points.length; i < l; i++) {\r\n        this.lineTo(points[i].x, points[i].y);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    moveTo(x, y) {\r\n      this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\r\n\r\n      return this;\r\n    }\r\n\r\n    lineTo(x, y) {\r\n      const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\r\n      this.curves.push(curve);\r\n      this.currentPoint.set(x, y);\r\n      return this;\r\n    }\r\n\r\n    quadraticCurveTo(aCPx, aCPy, aX, aY) {\r\n      const curve = new QuadraticBezierCurve(\r\n        this.currentPoint.clone(),\r\n        new Vector2(aCPx, aCPy),\r\n        new Vector2(aX, aY),\r\n      );\r\n      this.curves.push(curve);\r\n      this.currentPoint.set(aX, aY);\r\n      return this;\r\n    }\r\n\r\n    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\r\n      const curve = new CubicBezierCurve(\r\n        this.currentPoint.clone(),\r\n        new Vector2(aCP1x, aCP1y),\r\n        new Vector2(aCP2x, aCP2y),\r\n        new Vector2(aX, aY),\r\n      );\r\n      this.curves.push(curve);\r\n      this.currentPoint.set(aX, aY);\r\n      return this;\r\n    }\r\n\r\n    splineThru(\r\n      pts,\r\n      /*Array of Vector*/\r\n    ) {\r\n      const npts = [this.currentPoint.clone()].concat(pts);\r\n      const curve = new SplineCurve(npts);\r\n      this.curves.push(curve);\r\n      this.currentPoint.copy(pts[pts.length - 1]);\r\n      return this;\r\n    }\r\n\r\n    arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\r\n      const x0 = this.currentPoint.x;\r\n      const y0 = this.currentPoint.y;\r\n      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n      return this;\r\n    }\r\n\r\n    absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\r\n      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\r\n      return this;\r\n    }\r\n\r\n    ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\r\n      const x0 = this.currentPoint.x;\r\n      const y0 = this.currentPoint.y;\r\n      this.absellipse(\r\n        aX + x0,\r\n        aY + y0,\r\n        xRadius,\r\n        yRadius,\r\n        aStartAngle,\r\n        aEndAngle,\r\n        aClockwise,\r\n        aRotation,\r\n      );\r\n      return this;\r\n    }\r\n\r\n    absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\r\n      const curve = new EllipseCurve(\r\n        aX,\r\n        aY,\r\n        xRadius,\r\n        yRadius,\r\n        aStartAngle,\r\n        aEndAngle,\r\n        aClockwise,\r\n        aRotation,\r\n      );\r\n\r\n      if (this.curves.length > 0) {\r\n        // if a previous curve is present, attempt to join\r\n        const firstPoint = curve.getPoint(0);\r\n\r\n        if (!firstPoint.equals(this.currentPoint)) {\r\n          this.lineTo(firstPoint.x, firstPoint.y);\r\n        }\r\n      }\r\n\r\n      this.curves.push(curve);\r\n      const lastPoint = curve.getPoint(1);\r\n      this.currentPoint.copy(lastPoint);\r\n      return this;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.currentPoint.copy(source.currentPoint);\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.currentPoint = this.currentPoint.toArray();\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.currentPoint.fromArray(json.currentPoint);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class Shape extends Path {\r\n    constructor(points) {\r\n      super(points);\r\n      this.uuid = generateUUID();\r\n      this.type = 'Shape';\r\n      this.holes = [];\r\n    }\r\n\r\n    getPointsHoles(divisions) {\r\n      const holesPts = [];\r\n\r\n      for (let i = 0, l = this.holes.length; i < l; i++) {\r\n        holesPts[i] = this.holes[i].getPoints(divisions);\r\n      }\r\n\r\n      return holesPts;\r\n    } // get points of shape and holes (keypoints based on segments parameter)\r\n\r\n    extractPoints(divisions) {\r\n      return {\r\n        shape: this.getPoints(divisions),\r\n        holes: this.getPointsHoles(divisions),\r\n      };\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.holes = [];\r\n\r\n      for (let i = 0, l = source.holes.length; i < l; i++) {\r\n        const hole = source.holes[i];\r\n        this.holes.push(hole.clone());\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.uuid = this.uuid;\r\n      data.holes = [];\r\n\r\n      for (let i = 0, l = this.holes.length; i < l; i++) {\r\n        const hole = this.holes[i];\r\n        data.holes.push(hole.toJSON());\r\n      }\r\n\r\n      return data;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      super.fromJSON(json);\r\n      this.uuid = json.uuid;\r\n      this.holes = [];\r\n\r\n      for (let i = 0, l = json.holes.length; i < l; i++) {\r\n        const hole = json.holes[i];\r\n        this.holes.push(new Path().fromJSON(hole));\r\n      }\r\n\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class Light extends Object3D {\r\n    constructor(color, intensity = 1) {\r\n      super();\r\n      this.type = 'Light';\r\n      this.color = new Color(color);\r\n      this.intensity = intensity;\r\n    }\r\n\r\n    dispose() {\r\n      // Empty here in base class; some subclasses override.\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.color.copy(source.color);\r\n      this.intensity = source.intensity;\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.object.color = this.color.getHex();\r\n      data.object.intensity = this.intensity;\r\n      if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\r\n      if (this.distance !== undefined) data.object.distance = this.distance;\r\n      if (this.angle !== undefined) data.object.angle = this.angle;\r\n      if (this.decay !== undefined) data.object.decay = this.decay;\r\n      if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\r\n      if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\r\n      return data;\r\n    }\r\n  }\r\n\r\n  Light.prototype.isLight = true;\r\n\r\n  class HemisphereLight extends Light {\r\n    constructor(skyColor, groundColor, intensity) {\r\n      super(skyColor, intensity);\r\n      this.type = 'HemisphereLight';\r\n      this.position.copy(Object3D.DefaultUp);\r\n      this.updateMatrix();\r\n      this.groundColor = new Color(groundColor);\r\n    }\r\n\r\n    copy(source) {\r\n      Light.prototype.copy.call(this, source);\r\n      this.groundColor.copy(source.groundColor);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  HemisphereLight.prototype.isHemisphereLight = true;\r\n\r\n  const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _lookTarget$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  class LightShadow {\r\n    constructor(camera) {\r\n      this.camera = camera;\r\n      this.bias = 0;\r\n      this.normalBias = 0;\r\n      this.radius = 1;\r\n      this.mapSize = new Vector2(512, 512);\r\n      this.map = null;\r\n      this.mapPass = null;\r\n      this.matrix = new Matrix4();\r\n      this.autoUpdate = true;\r\n      this.needsUpdate = false;\r\n      this._frustum = new Frustum();\r\n      this._frameExtents = new Vector2(1, 1);\r\n      this._viewportCount = 1;\r\n      this._viewports = [new Vector4(0, 0, 1, 1)];\r\n    }\r\n\r\n    getViewportCount() {\r\n      return this._viewportCount;\r\n    }\r\n\r\n    getFrustum() {\r\n      return this._frustum;\r\n    }\r\n\r\n    updateMatrices(light) {\r\n      const shadowCamera = this.camera;\r\n      const shadowMatrix = this.matrix;\r\n\r\n      _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\r\n\r\n      shadowCamera.position.copy(_lightPositionWorld$1);\r\n\r\n      _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);\r\n\r\n      shadowCamera.lookAt(_lookTarget$1);\r\n      shadowCamera.updateMatrixWorld();\r\n\r\n      _projScreenMatrix$1.multiplyMatrices(\r\n        shadowCamera.projectionMatrix,\r\n        shadowCamera.matrixWorldInverse,\r\n      );\r\n\r\n      this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\r\n\r\n      shadowMatrix.set(\r\n        0.5,\r\n        0.0,\r\n        0.0,\r\n        0.5,\r\n        0.0,\r\n        0.5,\r\n        0.0,\r\n        0.5,\r\n        0.0,\r\n        0.0,\r\n        0.5,\r\n        0.5,\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n        1.0,\r\n      );\r\n      shadowMatrix.multiply(shadowCamera.projectionMatrix);\r\n      shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\r\n    }\r\n\r\n    getViewport(viewportIndex) {\r\n      return this._viewports[viewportIndex];\r\n    }\r\n\r\n    getFrameExtents() {\r\n      return this._frameExtents;\r\n    }\r\n\r\n    dispose() {\r\n      if (this.map) {\r\n        this.map.dispose();\r\n      }\r\n\r\n      if (this.mapPass) {\r\n        this.mapPass.dispose();\r\n      }\r\n    }\r\n\r\n    copy(source) {\r\n      this.camera = source.camera.clone();\r\n      this.bias = source.bias;\r\n      this.radius = source.radius;\r\n      this.mapSize.copy(source.mapSize);\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    toJSON() {\r\n      const object = {};\r\n      if (this.bias !== 0) object.bias = this.bias;\r\n      if (this.normalBias !== 0) object.normalBias = this.normalBias;\r\n      if (this.radius !== 1) object.radius = this.radius;\r\n      if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\r\n      object.camera = this.camera.toJSON(false).object;\r\n      delete object.camera.matrix;\r\n      return object;\r\n    }\r\n  }\r\n\r\n  class SpotLightShadow extends LightShadow {\r\n    constructor() {\r\n      super(new PerspectiveCamera(50, 1, 0.5, 500));\r\n      this.focus = 1;\r\n    }\r\n\r\n    updateMatrices(light) {\r\n      const camera = this.camera;\r\n      const fov = RAD2DEG * 2 * light.angle * this.focus;\r\n      const aspect = this.mapSize.width / this.mapSize.height;\r\n      const far = light.distance || camera.far;\r\n\r\n      if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\r\n        camera.fov = fov;\r\n        camera.aspect = aspect;\r\n        camera.far = far;\r\n        camera.updateProjectionMatrix();\r\n      }\r\n\r\n      super.updateMatrices(light);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.focus = source.focus;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  SpotLightShadow.prototype.isSpotLightShadow = true;\r\n\r\n  class SpotLight extends Light {\r\n    constructor(color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1) {\r\n      super(color, intensity);\r\n      this.type = 'SpotLight';\r\n      this.position.copy(Object3D.DefaultUp);\r\n      this.updateMatrix();\r\n      this.target = new Object3D();\r\n      this.distance = distance;\r\n      this.angle = angle;\r\n      this.penumbra = penumbra;\r\n      this.decay = decay; // for physically correct lights, should be 2.\r\n\r\n      this.shadow = new SpotLightShadow();\r\n    }\r\n\r\n    get power() {\r\n      // intensity = power per solid angle.\r\n      // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n      return this.intensity * Math.PI;\r\n    }\r\n\r\n    set power(power) {\r\n      // intensity = power per solid angle.\r\n      // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n      this.intensity = power / Math.PI;\r\n    }\r\n\r\n    dispose() {\r\n      this.shadow.dispose();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.distance = source.distance;\r\n      this.angle = source.angle;\r\n      this.penumbra = source.penumbra;\r\n      this.decay = source.decay;\r\n      this.target = source.target.clone();\r\n      this.shadow = source.shadow.clone();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  SpotLight.prototype.isSpotLight = true;\r\n\r\n  const _projScreenMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _lightPositionWorld = /*@__PURE__*/ new Vector3();\r\n\r\n  const _lookTarget = /*@__PURE__*/ new Vector3();\r\n\r\n  class PointLightShadow extends LightShadow {\r\n    constructor() {\r\n      super(new PerspectiveCamera(90, 1, 0.5, 500));\r\n      this._frameExtents = new Vector2(4, 2);\r\n      this._viewportCount = 6;\r\n      this._viewports = [\r\n        // These viewports map a cube-map onto a 2D texture with the\r\n        // following orientation:\r\n        //\r\n        //\txzXZ\r\n        //\t y Y\r\n        //\r\n        // X - Positive x direction\r\n        // x - Negative x direction\r\n        // Y - Positive y direction\r\n        // y - Negative y direction\r\n        // Z - Positive z direction\r\n        // z - Negative z direction\r\n        // positive X\r\n        new Vector4(2, 1, 1, 1), // negative X\r\n        new Vector4(0, 1, 1, 1), // positive Z\r\n        new Vector4(3, 1, 1, 1), // negative Z\r\n        new Vector4(1, 1, 1, 1), // positive Y\r\n        new Vector4(3, 0, 1, 1), // negative Y\r\n        new Vector4(1, 0, 1, 1),\r\n      ];\r\n      this._cubeDirections = [\r\n        new Vector3(1, 0, 0),\r\n        new Vector3(-1, 0, 0),\r\n        new Vector3(0, 0, 1),\r\n        new Vector3(0, 0, -1),\r\n        new Vector3(0, 1, 0),\r\n        new Vector3(0, -1, 0),\r\n      ];\r\n      this._cubeUps = [\r\n        new Vector3(0, 1, 0),\r\n        new Vector3(0, 1, 0),\r\n        new Vector3(0, 1, 0),\r\n        new Vector3(0, 1, 0),\r\n        new Vector3(0, 0, 1),\r\n        new Vector3(0, 0, -1),\r\n      ];\r\n    }\r\n\r\n    updateMatrices(light, viewportIndex = 0) {\r\n      const camera = this.camera;\r\n      const shadowMatrix = this.matrix;\r\n      const far = light.distance || camera.far;\r\n\r\n      if (far !== camera.far) {\r\n        camera.far = far;\r\n        camera.updateProjectionMatrix();\r\n      }\r\n\r\n      _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\r\n\r\n      camera.position.copy(_lightPositionWorld);\r\n\r\n      _lookTarget.copy(camera.position);\r\n\r\n      _lookTarget.add(this._cubeDirections[viewportIndex]);\r\n\r\n      camera.up.copy(this._cubeUps[viewportIndex]);\r\n      camera.lookAt(_lookTarget);\r\n      camera.updateMatrixWorld();\r\n      shadowMatrix.makeTranslation(\r\n        -_lightPositionWorld.x,\r\n        -_lightPositionWorld.y,\r\n        -_lightPositionWorld.z,\r\n      );\r\n\r\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\r\n\r\n      this._frustum.setFromProjectionMatrix(_projScreenMatrix);\r\n    }\r\n  }\r\n\r\n  PointLightShadow.prototype.isPointLightShadow = true;\r\n\r\n  class PointLight extends Light {\r\n    constructor(color, intensity, distance = 0, decay = 1) {\r\n      super(color, intensity);\r\n      this.type = 'PointLight';\r\n      this.distance = distance;\r\n      this.decay = decay; // for physically correct lights, should be 2.\r\n\r\n      this.shadow = new PointLightShadow();\r\n    }\r\n\r\n    get power() {\r\n      // intensity = power per solid angle.\r\n      // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n      return this.intensity * 4 * Math.PI;\r\n    }\r\n\r\n    set power(power) {\r\n      // intensity = power per solid angle.\r\n      // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n      this.intensity = power / (4 * Math.PI);\r\n    }\r\n\r\n    dispose() {\r\n      this.shadow.dispose();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.distance = source.distance;\r\n      this.decay = source.decay;\r\n      this.shadow = source.shadow.clone();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  PointLight.prototype.isPointLight = true;\r\n\r\n  class OrthographicCamera extends Camera {\r\n    constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2000) {\r\n      super();\r\n      this.type = 'OrthographicCamera';\r\n      this.zoom = 1;\r\n      this.view = null;\r\n      this.left = left;\r\n      this.right = right;\r\n      this.top = top;\r\n      this.bottom = bottom;\r\n      this.near = near;\r\n      this.far = far;\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    copy(source, recursive) {\r\n      super.copy(source, recursive);\r\n      this.left = source.left;\r\n      this.right = source.right;\r\n      this.top = source.top;\r\n      this.bottom = source.bottom;\r\n      this.near = source.near;\r\n      this.far = source.far;\r\n      this.zoom = source.zoom;\r\n      this.view = source.view === null ? null : Object.assign({}, source.view);\r\n      return this;\r\n    }\r\n\r\n    setViewOffset(fullWidth, fullHeight, x, y, width, height) {\r\n      if (this.view === null) {\r\n        this.view = {\r\n          enabled: true,\r\n          fullWidth: 1,\r\n          fullHeight: 1,\r\n          offsetX: 0,\r\n          offsetY: 0,\r\n          width: 1,\r\n          height: 1,\r\n        };\r\n      }\r\n\r\n      this.view.enabled = true;\r\n      this.view.fullWidth = fullWidth;\r\n      this.view.fullHeight = fullHeight;\r\n      this.view.offsetX = x;\r\n      this.view.offsetY = y;\r\n      this.view.width = width;\r\n      this.view.height = height;\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    clearViewOffset() {\r\n      if (this.view !== null) {\r\n        this.view.enabled = false;\r\n      }\r\n\r\n      this.updateProjectionMatrix();\r\n    }\r\n\r\n    updateProjectionMatrix() {\r\n      const dx = (this.right - this.left) / (2 * this.zoom);\r\n      const dy = (this.top - this.bottom) / (2 * this.zoom);\r\n      const cx = (this.right + this.left) / 2;\r\n      const cy = (this.top + this.bottom) / 2;\r\n      let left = cx - dx;\r\n      let right = cx + dx;\r\n      let top = cy + dy;\r\n      let bottom = cy - dy;\r\n\r\n      if (this.view !== null && this.view.enabled) {\r\n        const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\r\n        const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\r\n        left += scaleW * this.view.offsetX;\r\n        right = left + scaleW * this.view.width;\r\n        top -= scaleH * this.view.offsetY;\r\n        bottom = top - scaleH * this.view.height;\r\n      }\r\n\r\n      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\r\n      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.object.zoom = this.zoom;\r\n      data.object.left = this.left;\r\n      data.object.right = this.right;\r\n      data.object.top = this.top;\r\n      data.object.bottom = this.bottom;\r\n      data.object.near = this.near;\r\n      data.object.far = this.far;\r\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\r\n      return data;\r\n    }\r\n  }\r\n\r\n  OrthographicCamera.prototype.isOrthographicCamera = true;\r\n\r\n  class DirectionalLightShadow extends LightShadow {\r\n    constructor() {\r\n      super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\r\n    }\r\n  }\r\n\r\n  DirectionalLightShadow.prototype.isDirectionalLightShadow = true;\r\n\r\n  class DirectionalLight extends Light {\r\n    constructor(color, intensity) {\r\n      super(color, intensity);\r\n      this.type = 'DirectionalLight';\r\n      this.position.copy(Object3D.DefaultUp);\r\n      this.updateMatrix();\r\n      this.target = new Object3D();\r\n      this.shadow = new DirectionalLightShadow();\r\n    }\r\n\r\n    dispose() {\r\n      this.shadow.dispose();\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.target = source.target.clone();\r\n      this.shadow = source.shadow.clone();\r\n      return this;\r\n    }\r\n  }\r\n\r\n  DirectionalLight.prototype.isDirectionalLight = true;\r\n\r\n  class AmbientLight extends Light {\r\n    constructor(color, intensity) {\r\n      super(color, intensity);\r\n      this.type = 'AmbientLight';\r\n    }\r\n  }\r\n\r\n  AmbientLight.prototype.isAmbientLight = true;\r\n\r\n  class RectAreaLight extends Light {\r\n    constructor(color, intensity, width = 10, height = 10) {\r\n      super(color, intensity);\r\n      this.type = 'RectAreaLight';\r\n      this.width = width;\r\n      this.height = height;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.width = source.width;\r\n      this.height = source.height;\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.object.width = this.width;\r\n      data.object.height = this.height;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  RectAreaLight.prototype.isRectAreaLight = true;\r\n\r\n  /**\r\n   * Primary reference:\r\n   *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n   *\r\n   * Secondary reference:\r\n   *\t https://www.ppsloan.org/publications/StupidSH36.pdf\r\n   */\r\n  // 3-band SH defined by 9 coefficients\r\n\r\n  class SphericalHarmonics3 {\r\n    constructor() {\r\n      this.coefficients = [];\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients.push(new Vector3());\r\n      }\r\n    }\r\n\r\n    set(coefficients) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].copy(coefficients[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    zero() {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].set(0, 0, 0);\r\n      }\r\n\r\n      return this;\r\n    } // get the radiance in the direction of the normal\r\n    // target is a Vector3\r\n\r\n    getAt(normal, target) {\r\n      // normal is assumed to be unit length\r\n      const x = normal.x,\r\n        y = normal.y,\r\n        z = normal.z;\r\n      const coeff = this.coefficients; // band 0\r\n\r\n      target.copy(coeff[0]).multiplyScalar(0.282095); // band 1\r\n\r\n      target.addScaledVector(coeff[1], 0.488603 * y);\r\n      target.addScaledVector(coeff[2], 0.488603 * z);\r\n      target.addScaledVector(coeff[3], 0.488603 * x); // band 2\r\n\r\n      target.addScaledVector(coeff[4], 1.092548 * (x * y));\r\n      target.addScaledVector(coeff[5], 1.092548 * (y * z));\r\n      target.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\r\n      target.addScaledVector(coeff[7], 1.092548 * (x * z));\r\n      target.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\r\n      return target;\r\n    } // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\r\n    // target is a Vector3\r\n    // https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\r\n    getIrradianceAt(normal, target) {\r\n      // normal is assumed to be unit length\r\n      const x = normal.x,\r\n        y = normal.y,\r\n        z = normal.z;\r\n      const coeff = this.coefficients; // band 0\r\n\r\n      target.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\r\n      // band 1\r\n\r\n      target.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\r\n\r\n      target.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\r\n      target.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\r\n\r\n      target.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\r\n\r\n      target.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\r\n      target.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\r\n\r\n      target.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\r\n      target.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\r\n\r\n      return target;\r\n    }\r\n\r\n    add(sh) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].add(sh.coefficients[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    addScaledSH(sh, s) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].addScaledVector(sh.coefficients[i], s);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    scale(s) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].multiplyScalar(s);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    lerp(sh, alpha) {\r\n      for (let i = 0; i < 9; i++) {\r\n        this.coefficients[i].lerp(sh.coefficients[i], alpha);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    equals(sh) {\r\n      for (let i = 0; i < 9; i++) {\r\n        if (!this.coefficients[i].equals(sh.coefficients[i])) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    copy(sh) {\r\n      return this.set(sh.coefficients);\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    fromArray(array, offset = 0) {\r\n      const coefficients = this.coefficients;\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        coefficients[i].fromArray(array, offset + i * 3);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    toArray(array = [], offset = 0) {\r\n      const coefficients = this.coefficients;\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        coefficients[i].toArray(array, offset + i * 3);\r\n      }\r\n\r\n      return array;\r\n    } // evaluate the basis functions\r\n    // shBasis is an Array[ 9 ]\r\n\r\n    static getBasisAt(normal, shBasis) {\r\n      // normal is assumed to be unit length\r\n      const x = normal.x,\r\n        y = normal.y,\r\n        z = normal.z; // band 0\r\n\r\n      shBasis[0] = 0.282095; // band 1\r\n\r\n      shBasis[1] = 0.488603 * y;\r\n      shBasis[2] = 0.488603 * z;\r\n      shBasis[3] = 0.488603 * x; // band 2\r\n\r\n      shBasis[4] = 1.092548 * x * y;\r\n      shBasis[5] = 1.092548 * y * z;\r\n      shBasis[6] = 0.315392 * (3 * z * z - 1);\r\n      shBasis[7] = 1.092548 * x * z;\r\n      shBasis[8] = 0.546274 * (x * x - y * y);\r\n    }\r\n  }\r\n\r\n  SphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\r\n\r\n  class LightProbe extends Light {\r\n    constructor(sh = new SphericalHarmonics3(), intensity = 1) {\r\n      super(undefined, intensity);\r\n      this.sh = sh;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.sh.copy(source.sh);\r\n      return this;\r\n    }\r\n\r\n    fromJSON(json) {\r\n      this.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\r\n\r\n      this.sh.fromArray(json.sh);\r\n      return this;\r\n    }\r\n\r\n    toJSON(meta) {\r\n      const data = super.toJSON(meta);\r\n      data.object.sh = this.sh.toArray();\r\n      return data;\r\n    }\r\n  }\r\n\r\n  LightProbe.prototype.isLightProbe = true;\r\n\r\n  class MaterialLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n      this.textures = {};\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const loader = new FileLoader(scope.manager);\r\n      loader.setPath(scope.path);\r\n      loader.setRequestHeader(scope.requestHeader);\r\n      loader.setWithCredentials(scope.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (text) {\r\n          try {\r\n            onLoad(scope.parse(JSON.parse(text)));\r\n          } catch (e) {\r\n            if (onError) {\r\n              onError(e);\r\n            } else {\r\n              console.error(e);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n\r\n    parse(json) {\r\n      const textures = this.textures;\r\n\r\n      function getTexture(name) {\r\n        if (textures[name] === undefined) {\r\n          console.warn('THREE.MaterialLoader: Undefined texture', name);\r\n        }\r\n\r\n        return textures[name];\r\n      }\r\n\r\n      const material = new Materials[json.type]();\r\n      if (json.uuid !== undefined) material.uuid = json.uuid;\r\n      if (json.name !== undefined) material.name = json.name;\r\n      if (json.color !== undefined && material.color !== undefined)\r\n        material.color.setHex(json.color);\r\n      if (json.roughness !== undefined) material.roughness = json.roughness;\r\n      if (json.metalness !== undefined) material.metalness = json.metalness;\r\n      if (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\r\n      if (json.emissive !== undefined && material.emissive !== undefined)\r\n        material.emissive.setHex(json.emissive);\r\n      if (json.specular !== undefined && material.specular !== undefined)\r\n        material.specular.setHex(json.specular);\r\n      if (json.shininess !== undefined) material.shininess = json.shininess;\r\n      if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\r\n      if (json.clearcoatRoughness !== undefined)\r\n        material.clearcoatRoughness = json.clearcoatRoughness;\r\n      if (json.transmission !== undefined) material.transmission = json.transmission;\r\n      if (json.thickness !== undefined) material.thickness = json.thickness;\r\n      if (json.attenuationDistance !== undefined)\r\n        material.attenuationDistance = json.attenuationDistance;\r\n      if (json.attenuationColor !== undefined && material.attenuationColor !== undefined)\r\n        material.attenuationColor.setHex(json.attenuationColor);\r\n      if (json.fog !== undefined) material.fog = json.fog;\r\n      if (json.flatShading !== undefined) material.flatShading = json.flatShading;\r\n      if (json.blending !== undefined) material.blending = json.blending;\r\n      if (json.combine !== undefined) material.combine = json.combine;\r\n      if (json.side !== undefined) material.side = json.side;\r\n      if (json.shadowSide !== undefined) material.shadowSide = json.shadowSide;\r\n      if (json.opacity !== undefined) material.opacity = json.opacity;\r\n      if (json.transparent !== undefined) material.transparent = json.transparent;\r\n      if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\r\n      if (json.depthTest !== undefined) material.depthTest = json.depthTest;\r\n      if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\r\n      if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\r\n      if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\r\n      if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\r\n      if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\r\n      if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\r\n      if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\r\n      if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\r\n      if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\r\n      if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\r\n      if (json.wireframe !== undefined) material.wireframe = json.wireframe;\r\n      if (json.wireframeLinewidth !== undefined)\r\n        material.wireframeLinewidth = json.wireframeLinewidth;\r\n      if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\r\n      if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\r\n      if (json.rotation !== undefined) material.rotation = json.rotation;\r\n      if (json.linewidth !== 1) material.linewidth = json.linewidth;\r\n      if (json.dashSize !== undefined) material.dashSize = json.dashSize;\r\n      if (json.gapSize !== undefined) material.gapSize = json.gapSize;\r\n      if (json.scale !== undefined) material.scale = json.scale;\r\n      if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\r\n      if (json.polygonOffsetFactor !== undefined)\r\n        material.polygonOffsetFactor = json.polygonOffsetFactor;\r\n      if (json.polygonOffsetUnits !== undefined)\r\n        material.polygonOffsetUnits = json.polygonOffsetUnits;\r\n      if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\r\n      if (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\r\n      if (json.dithering !== undefined) material.dithering = json.dithering;\r\n      if (json.alphaToCoverage !== undefined) material.alphaToCoverage = json.alphaToCoverage;\r\n      if (json.premultipliedAlpha !== undefined)\r\n        material.premultipliedAlpha = json.premultipliedAlpha;\r\n      if (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\r\n      if (json.visible !== undefined) material.visible = json.visible;\r\n      if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\r\n      if (json.userData !== undefined) material.userData = json.userData;\r\n\r\n      if (json.vertexColors !== undefined) {\r\n        if (typeof json.vertexColors === 'number') {\r\n          material.vertexColors = json.vertexColors > 0 ? true : false;\r\n        } else {\r\n          material.vertexColors = json.vertexColors;\r\n        }\r\n      } // Shader Material\r\n\r\n      if (json.uniforms !== undefined) {\r\n        for (const name in json.uniforms) {\r\n          const uniform = json.uniforms[name];\r\n          material.uniforms[name] = {};\r\n\r\n          switch (uniform.type) {\r\n            case 't':\r\n              material.uniforms[name].value = getTexture(uniform.value);\r\n              break;\r\n\r\n            case 'c':\r\n              material.uniforms[name].value = new Color().setHex(uniform.value);\r\n              break;\r\n\r\n            case 'v2':\r\n              material.uniforms[name].value = new Vector2().fromArray(uniform.value);\r\n              break;\r\n\r\n            case 'v3':\r\n              material.uniforms[name].value = new Vector3().fromArray(uniform.value);\r\n              break;\r\n\r\n            case 'v4':\r\n              material.uniforms[name].value = new Vector4().fromArray(uniform.value);\r\n              break;\r\n\r\n            case 'm3':\r\n              material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\r\n              break;\r\n\r\n            case 'm4':\r\n              material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\r\n              break;\r\n\r\n            default:\r\n              material.uniforms[name].value = uniform.value;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (json.defines !== undefined) material.defines = json.defines;\r\n      if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\r\n      if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\r\n\r\n      if (json.extensions !== undefined) {\r\n        for (const key in json.extensions) {\r\n          material.extensions[key] = json.extensions[key];\r\n        }\r\n      } // Deprecated\r\n\r\n      if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\r\n      // for PointsMaterial\r\n\r\n      if (json.size !== undefined) material.size = json.size;\r\n      if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\r\n\r\n      if (json.map !== undefined) material.map = getTexture(json.map);\r\n      if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\r\n      if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\r\n      if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\r\n      if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\r\n      if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\r\n      if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\r\n\r\n      if (json.normalScale !== undefined) {\r\n        let normalScale = json.normalScale;\r\n\r\n        if (Array.isArray(normalScale) === false) {\r\n          // Blender exporter used to export a scalar. See #7459\r\n          normalScale = [normalScale, normalScale];\r\n        }\r\n\r\n        material.normalScale = new Vector2().fromArray(normalScale);\r\n      }\r\n\r\n      if (json.displacementMap !== undefined)\r\n        material.displacementMap = getTexture(json.displacementMap);\r\n      if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\r\n      if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\r\n      if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\r\n      if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\r\n      if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\r\n      if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\r\n      if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\r\n      if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\r\n      if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\r\n      if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\r\n      if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\r\n      if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\r\n      if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\r\n      if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\r\n      if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\r\n      if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\r\n      if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\r\n      if (json.clearcoatRoughnessMap !== undefined)\r\n        material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\r\n      if (json.clearcoatNormalMap !== undefined)\r\n        material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\r\n      if (json.clearcoatNormalScale !== undefined)\r\n        material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\r\n      if (json.transmissionMap !== undefined)\r\n        material.transmissionMap = getTexture(json.transmissionMap);\r\n      if (json.thicknessMap !== undefined) material.thicknessMap = getTexture(json.thicknessMap);\r\n      return material;\r\n    }\r\n\r\n    setTextures(value) {\r\n      this.textures = value;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class LoaderUtils {\r\n    static decodeText(array) {\r\n      if (typeof TextDecoder !== 'undefined') {\r\n        return new TextDecoder().decode(array);\r\n      } // Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n      // throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n      let s = '';\r\n\r\n      for (let i = 0, il = array.length; i < il; i++) {\r\n        // Implicitly assumes little-endian.\r\n        s += String.fromCharCode(array[i]);\r\n      }\r\n\r\n      try {\r\n        // merges multi-byte utf-8 characters.\r\n        return decodeURIComponent(escape(s));\r\n      } catch (e) {\r\n        // see #16358\r\n        return s;\r\n      }\r\n    }\r\n\r\n    static extractUrlBase(url) {\r\n      const index = url.lastIndexOf('/');\r\n      if (index === -1) return './';\r\n      return url.substr(0, index + 1);\r\n    }\r\n  }\r\n\r\n  class InstancedBufferGeometry extends BufferGeometry {\r\n    constructor() {\r\n      super();\r\n      this.type = 'InstancedBufferGeometry';\r\n      this.instanceCount = Infinity;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.instanceCount = source.instanceCount;\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON(this);\r\n      data.instanceCount = this.instanceCount;\r\n      data.isInstancedBufferGeometry = true;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  InstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\r\n\r\n  class InstancedBufferAttribute extends BufferAttribute {\r\n    constructor(array, itemSize, normalized, meshPerAttribute) {\r\n      if (typeof normalized === 'number') {\r\n        meshPerAttribute = normalized;\r\n        normalized = false;\r\n        console.error(\r\n          'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.',\r\n        );\r\n      }\r\n\r\n      super(array, itemSize, normalized);\r\n      this.meshPerAttribute = meshPerAttribute || 1;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.meshPerAttribute = source.meshPerAttribute;\r\n      return this;\r\n    }\r\n\r\n    toJSON() {\r\n      const data = super.toJSON();\r\n      data.meshPerAttribute = this.meshPerAttribute;\r\n      data.isInstancedBufferAttribute = true;\r\n      return data;\r\n    }\r\n  }\r\n\r\n  InstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\r\n\r\n  class BufferGeometryLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const loader = new FileLoader(scope.manager);\r\n      loader.setPath(scope.path);\r\n      loader.setRequestHeader(scope.requestHeader);\r\n      loader.setWithCredentials(scope.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (text) {\r\n          try {\r\n            onLoad(scope.parse(JSON.parse(text)));\r\n          } catch (e) {\r\n            if (onError) {\r\n              onError(e);\r\n            } else {\r\n              console.error(e);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n\r\n    parse(json) {\r\n      const interleavedBufferMap = {};\r\n      const arrayBufferMap = {};\r\n\r\n      function getInterleavedBuffer(json, uuid) {\r\n        if (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\r\n        const interleavedBuffers = json.interleavedBuffers;\r\n        const interleavedBuffer = interleavedBuffers[uuid];\r\n        const buffer = getArrayBuffer(json, interleavedBuffer.buffer);\r\n        const array = getTypedArray(interleavedBuffer.type, buffer);\r\n        const ib = new InterleavedBuffer(array, interleavedBuffer.stride);\r\n        ib.uuid = interleavedBuffer.uuid;\r\n        interleavedBufferMap[uuid] = ib;\r\n        return ib;\r\n      }\r\n\r\n      function getArrayBuffer(json, uuid) {\r\n        if (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\r\n        const arrayBuffers = json.arrayBuffers;\r\n        const arrayBuffer = arrayBuffers[uuid];\r\n        const ab = new Uint32Array(arrayBuffer).buffer;\r\n        arrayBufferMap[uuid] = ab;\r\n        return ab;\r\n      }\r\n\r\n      const geometry = json.isInstancedBufferGeometry\r\n        ? new InstancedBufferGeometry()\r\n        : new BufferGeometry();\r\n      const index = json.data.index;\r\n\r\n      if (index !== undefined) {\r\n        const typedArray = getTypedArray(index.type, index.array);\r\n        geometry.setIndex(new BufferAttribute(typedArray, 1));\r\n      }\r\n\r\n      const attributes = json.data.attributes;\r\n\r\n      for (const key in attributes) {\r\n        const attribute = attributes[key];\r\n        let bufferAttribute;\r\n\r\n        if (attribute.isInterleavedBufferAttribute) {\r\n          const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\r\n          bufferAttribute = new InterleavedBufferAttribute(\r\n            interleavedBuffer,\r\n            attribute.itemSize,\r\n            attribute.offset,\r\n            attribute.normalized,\r\n          );\r\n        } else {\r\n          const typedArray = getTypedArray(attribute.type, attribute.array);\r\n          const bufferAttributeConstr = attribute.isInstancedBufferAttribute\r\n            ? InstancedBufferAttribute\r\n            : BufferAttribute;\r\n          bufferAttribute = new bufferAttributeConstr(\r\n            typedArray,\r\n            attribute.itemSize,\r\n            attribute.normalized,\r\n          );\r\n        }\r\n\r\n        if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\r\n        if (attribute.usage !== undefined) bufferAttribute.setUsage(attribute.usage);\r\n\r\n        if (attribute.updateRange !== undefined) {\r\n          bufferAttribute.updateRange.offset = attribute.updateRange.offset;\r\n          bufferAttribute.updateRange.count = attribute.updateRange.count;\r\n        }\r\n\r\n        geometry.setAttribute(key, bufferAttribute);\r\n      }\r\n\r\n      const morphAttributes = json.data.morphAttributes;\r\n\r\n      if (morphAttributes) {\r\n        for (const key in morphAttributes) {\r\n          const attributeArray = morphAttributes[key];\r\n          const array = [];\r\n\r\n          for (let i = 0, il = attributeArray.length; i < il; i++) {\r\n            const attribute = attributeArray[i];\r\n            let bufferAttribute;\r\n\r\n            if (attribute.isInterleavedBufferAttribute) {\r\n              const interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\r\n              bufferAttribute = new InterleavedBufferAttribute(\r\n                interleavedBuffer,\r\n                attribute.itemSize,\r\n                attribute.offset,\r\n                attribute.normalized,\r\n              );\r\n            } else {\r\n              const typedArray = getTypedArray(attribute.type, attribute.array);\r\n              bufferAttribute = new BufferAttribute(\r\n                typedArray,\r\n                attribute.itemSize,\r\n                attribute.normalized,\r\n              );\r\n            }\r\n\r\n            if (attribute.name !== undefined) bufferAttribute.name = attribute.name;\r\n            array.push(bufferAttribute);\r\n          }\r\n\r\n          geometry.morphAttributes[key] = array;\r\n        }\r\n      }\r\n\r\n      const morphTargetsRelative = json.data.morphTargetsRelative;\r\n\r\n      if (morphTargetsRelative) {\r\n        geometry.morphTargetsRelative = true;\r\n      }\r\n\r\n      const groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n      if (groups !== undefined) {\r\n        for (let i = 0, n = groups.length; i !== n; ++i) {\r\n          const group = groups[i];\r\n          geometry.addGroup(group.start, group.count, group.materialIndex);\r\n        }\r\n      }\r\n\r\n      const boundingSphere = json.data.boundingSphere;\r\n\r\n      if (boundingSphere !== undefined) {\r\n        const center = new Vector3();\r\n\r\n        if (boundingSphere.center !== undefined) {\r\n          center.fromArray(boundingSphere.center);\r\n        }\r\n\r\n        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\r\n      }\r\n\r\n      if (json.name) geometry.name = json.name;\r\n      if (json.userData) geometry.userData = json.userData;\r\n      return geometry;\r\n    }\r\n  }\r\n\r\n  class ObjectLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\r\n      this.resourcePath = this.resourcePath || path;\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setPath(this.path);\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setWithCredentials(this.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (text) {\r\n          let json = null;\r\n\r\n          try {\r\n            json = JSON.parse(text);\r\n          } catch (error) {\r\n            if (onError !== undefined) onError(error);\r\n            console.error(\"THREE:ObjectLoader: Can't parse \" + url + '.', error.message);\r\n            return;\r\n          }\r\n\r\n          const metadata = json.metadata;\r\n\r\n          if (\r\n            metadata === undefined ||\r\n            metadata.type === undefined ||\r\n            metadata.type.toLowerCase() === 'geometry'\r\n          ) {\r\n            console.error(\"THREE.ObjectLoader: Can't load \" + url);\r\n            return;\r\n          }\r\n\r\n          scope.parse(json, onLoad);\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n\r\n    parse(json, onLoad) {\r\n      const animations = this.parseAnimations(json.animations);\r\n      const shapes = this.parseShapes(json.shapes);\r\n      const geometries = this.parseGeometries(json.geometries, shapes);\r\n      const images = this.parseImages(json.images, function () {\r\n        if (onLoad !== undefined) onLoad(object);\r\n      });\r\n      const textures = this.parseTextures(json.textures, images);\r\n      const materials = this.parseMaterials(json.materials, textures);\r\n      const object = this.parseObject(json.object, geometries, materials, animations);\r\n      const skeletons = this.parseSkeletons(json.skeletons, object);\r\n      this.bindSkeletons(object, skeletons); //\r\n\r\n      if (onLoad !== undefined) {\r\n        let hasImages = false;\r\n\r\n        for (const uuid in images) {\r\n          if (images[uuid] instanceof HTMLImageElement) {\r\n            hasImages = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (hasImages === false) onLoad(object);\r\n      }\r\n\r\n      return object;\r\n    }\r\n\r\n    parseShapes(json) {\r\n      const shapes = {};\r\n\r\n      if (json !== undefined) {\r\n        for (let i = 0, l = json.length; i < l; i++) {\r\n          const shape = new Shape().fromJSON(json[i]);\r\n          shapes[shape.uuid] = shape;\r\n        }\r\n      }\r\n\r\n      return shapes;\r\n    }\r\n\r\n    parseSkeletons(json, object) {\r\n      const skeletons = {};\r\n      const bones = {}; // generate bone lookup table\r\n\r\n      object.traverse(function (child) {\r\n        if (child.isBone) bones[child.uuid] = child;\r\n      }); // create skeletons\r\n\r\n      if (json !== undefined) {\r\n        for (let i = 0, l = json.length; i < l; i++) {\r\n          const skeleton = new Skeleton().fromJSON(json[i], bones);\r\n          skeletons[skeleton.uuid] = skeleton;\r\n        }\r\n      }\r\n\r\n      return skeletons;\r\n    }\r\n\r\n    parseGeometries(json, shapes) {\r\n      const geometries = {};\r\n      let geometryShapes;\r\n\r\n      if (json !== undefined) {\r\n        const bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n        for (let i = 0, l = json.length; i < l; i++) {\r\n          let geometry;\r\n          const data = json[i];\r\n\r\n          switch (data.type) {\r\n            case 'PlaneGeometry':\r\n            case 'PlaneBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.width,\r\n                data.height,\r\n                data.widthSegments,\r\n                data.heightSegments,\r\n              );\r\n              break;\r\n\r\n            case 'BoxGeometry':\r\n            case 'BoxBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.width,\r\n                data.height,\r\n                data.depth,\r\n                data.widthSegments,\r\n                data.heightSegments,\r\n                data.depthSegments,\r\n              );\r\n              break;\r\n\r\n            case 'CircleGeometry':\r\n            case 'CircleBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radius,\r\n                data.segments,\r\n                data.thetaStart,\r\n                data.thetaLength,\r\n              );\r\n              break;\r\n\r\n            case 'CylinderGeometry':\r\n            case 'CylinderBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radiusTop,\r\n                data.radiusBottom,\r\n                data.height,\r\n                data.radialSegments,\r\n                data.heightSegments,\r\n                data.openEnded,\r\n                data.thetaStart,\r\n                data.thetaLength,\r\n              );\r\n              break;\r\n\r\n            case 'ConeGeometry':\r\n            case 'ConeBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radius,\r\n                data.height,\r\n                data.radialSegments,\r\n                data.heightSegments,\r\n                data.openEnded,\r\n                data.thetaStart,\r\n                data.thetaLength,\r\n              );\r\n              break;\r\n\r\n            case 'SphereGeometry':\r\n            case 'SphereBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radius,\r\n                data.widthSegments,\r\n                data.heightSegments,\r\n                data.phiStart,\r\n                data.phiLength,\r\n                data.thetaStart,\r\n                data.thetaLength,\r\n              );\r\n              break;\r\n\r\n            case 'DodecahedronGeometry':\r\n            case 'DodecahedronBufferGeometry':\r\n            case 'IcosahedronGeometry':\r\n            case 'IcosahedronBufferGeometry':\r\n            case 'OctahedronGeometry':\r\n            case 'OctahedronBufferGeometry':\r\n            case 'TetrahedronGeometry':\r\n            case 'TetrahedronBufferGeometry':\r\n              geometry = new Geometries[data.type](data.radius, data.detail);\r\n              break;\r\n\r\n            case 'RingGeometry':\r\n            case 'RingBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.innerRadius,\r\n                data.outerRadius,\r\n                data.thetaSegments,\r\n                data.phiSegments,\r\n                data.thetaStart,\r\n                data.thetaLength,\r\n              );\r\n              break;\r\n\r\n            case 'TorusGeometry':\r\n            case 'TorusBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radius,\r\n                data.tube,\r\n                data.radialSegments,\r\n                data.tubularSegments,\r\n                data.arc,\r\n              );\r\n              break;\r\n\r\n            case 'TorusKnotGeometry':\r\n            case 'TorusKnotBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.radius,\r\n                data.tube,\r\n                data.tubularSegments,\r\n                data.radialSegments,\r\n                data.p,\r\n                data.q,\r\n              );\r\n              break;\r\n\r\n            case 'TubeGeometry':\r\n            case 'TubeBufferGeometry':\r\n              // This only works for built-in curves (e.g. CatmullRomCurve3).\r\n              // User defined curves or instances of CurvePath will not be deserialized.\r\n              geometry = new Geometries[data.type](\r\n                new Curves[data.path.type]().fromJSON(data.path),\r\n                data.tubularSegments,\r\n                data.radius,\r\n                data.radialSegments,\r\n                data.closed,\r\n              );\r\n              break;\r\n\r\n            case 'LatheGeometry':\r\n            case 'LatheBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.points,\r\n                data.segments,\r\n                data.phiStart,\r\n                data.phiLength,\r\n              );\r\n              break;\r\n\r\n            case 'PolyhedronGeometry':\r\n            case 'PolyhedronBufferGeometry':\r\n              geometry = new Geometries[data.type](\r\n                data.vertices,\r\n                data.indices,\r\n                data.radius,\r\n                data.details,\r\n              );\r\n              break;\r\n\r\n            case 'ShapeGeometry':\r\n            case 'ShapeBufferGeometry':\r\n              geometryShapes = [];\r\n\r\n              for (let j = 0, jl = data.shapes.length; j < jl; j++) {\r\n                const shape = shapes[data.shapes[j]];\r\n                geometryShapes.push(shape);\r\n              }\r\n\r\n              geometry = new Geometries[data.type](geometryShapes, data.curveSegments);\r\n              break;\r\n\r\n            case 'ExtrudeGeometry':\r\n            case 'ExtrudeBufferGeometry':\r\n              geometryShapes = [];\r\n\r\n              for (let j = 0, jl = data.shapes.length; j < jl; j++) {\r\n                const shape = shapes[data.shapes[j]];\r\n                geometryShapes.push(shape);\r\n              }\r\n\r\n              const extrudePath = data.options.extrudePath;\r\n\r\n              if (extrudePath !== undefined) {\r\n                data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\r\n              }\r\n\r\n              geometry = new Geometries[data.type](geometryShapes, data.options);\r\n              break;\r\n\r\n            case 'BufferGeometry':\r\n            case 'InstancedBufferGeometry':\r\n              geometry = bufferGeometryLoader.parse(data);\r\n              break;\r\n\r\n            case 'Geometry':\r\n              console.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\r\n              break;\r\n\r\n            default:\r\n              console.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\r\n              continue;\r\n          }\r\n\r\n          geometry.uuid = data.uuid;\r\n          if (data.name !== undefined) geometry.name = data.name;\r\n          if (geometry.isBufferGeometry === true && data.userData !== undefined)\r\n            geometry.userData = data.userData;\r\n          geometries[data.uuid] = geometry;\r\n        }\r\n      }\r\n\r\n      return geometries;\r\n    }\r\n\r\n    parseMaterials(json, textures) {\r\n      const cache = {}; // MultiMaterial\r\n\r\n      const materials = {};\r\n\r\n      if (json !== undefined) {\r\n        const loader = new MaterialLoader();\r\n        loader.setTextures(textures);\r\n\r\n        for (let i = 0, l = json.length; i < l; i++) {\r\n          const data = json[i];\r\n\r\n          if (data.type === 'MultiMaterial') {\r\n            // Deprecated\r\n            const array = [];\r\n\r\n            for (let j = 0; j < data.materials.length; j++) {\r\n              const material = data.materials[j];\r\n\r\n              if (cache[material.uuid] === undefined) {\r\n                cache[material.uuid] = loader.parse(material);\r\n              }\r\n\r\n              array.push(cache[material.uuid]);\r\n            }\r\n\r\n            materials[data.uuid] = array;\r\n          } else {\r\n            if (cache[data.uuid] === undefined) {\r\n              cache[data.uuid] = loader.parse(data);\r\n            }\r\n\r\n            materials[data.uuid] = cache[data.uuid];\r\n          }\r\n        }\r\n      }\r\n\r\n      return materials;\r\n    }\r\n\r\n    parseAnimations(json) {\r\n      const animations = {};\r\n\r\n      if (json !== undefined) {\r\n        for (let i = 0; i < json.length; i++) {\r\n          const data = json[i];\r\n          const clip = AnimationClip.parse(data);\r\n          animations[clip.uuid] = clip;\r\n        }\r\n      }\r\n\r\n      return animations;\r\n    }\r\n\r\n    parseImages(json, onLoad) {\r\n      const scope = this;\r\n      const images = {};\r\n      let loader;\r\n\r\n      function loadImage(url) {\r\n        scope.manager.itemStart(url);\r\n        return loader.load(\r\n          url,\r\n          function () {\r\n            scope.manager.itemEnd(url);\r\n          },\r\n          undefined,\r\n          function () {\r\n            scope.manager.itemError(url);\r\n            scope.manager.itemEnd(url);\r\n          },\r\n        );\r\n      }\r\n\r\n      function deserializeImage(image) {\r\n        if (typeof image === 'string') {\r\n          const url = image;\r\n          const path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\r\n          return loadImage(path);\r\n        } else {\r\n          if (image.data) {\r\n            return {\r\n              data: getTypedArray(image.type, image.data),\r\n              width: image.width,\r\n              height: image.height,\r\n            };\r\n          } else {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (json !== undefined && json.length > 0) {\r\n        const manager = new LoadingManager(onLoad);\r\n        loader = new ImageLoader(manager);\r\n        loader.setCrossOrigin(this.crossOrigin);\r\n\r\n        for (let i = 0, il = json.length; i < il; i++) {\r\n          const image = json[i];\r\n          const url = image.url;\r\n\r\n          if (Array.isArray(url)) {\r\n            // load array of images e.g CubeTexture\r\n            images[image.uuid] = [];\r\n\r\n            for (let j = 0, jl = url.length; j < jl; j++) {\r\n              const currentUrl = url[j];\r\n              const deserializedImage = deserializeImage(currentUrl);\r\n\r\n              if (deserializedImage !== null) {\r\n                if (deserializedImage instanceof HTMLImageElement) {\r\n                  images[image.uuid].push(deserializedImage);\r\n                } else {\r\n                  // special case: handle array of data textures for cube textures\r\n                  images[image.uuid].push(\r\n                    new DataTexture(\r\n                      deserializedImage.data,\r\n                      deserializedImage.width,\r\n                      deserializedImage.height,\r\n                    ),\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            // load single image\r\n            const deserializedImage = deserializeImage(image.url);\r\n\r\n            if (deserializedImage !== null) {\r\n              images[image.uuid] = deserializedImage;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return images;\r\n    }\r\n\r\n    parseTextures(json, images) {\r\n      function parseConstant(value, type) {\r\n        if (typeof value === 'number') return value;\r\n        console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\r\n        return type[value];\r\n      }\r\n\r\n      const textures = {};\r\n\r\n      if (json !== undefined) {\r\n        for (let i = 0, l = json.length; i < l; i++) {\r\n          const data = json[i];\r\n\r\n          if (data.image === undefined) {\r\n            console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\r\n          }\r\n\r\n          if (images[data.image] === undefined) {\r\n            console.warn('THREE.ObjectLoader: Undefined image', data.image);\r\n          }\r\n\r\n          let texture;\r\n          const image = images[data.image];\r\n\r\n          if (Array.isArray(image)) {\r\n            texture = new CubeTexture(image);\r\n            if (image.length === 6) texture.needsUpdate = true;\r\n          } else {\r\n            if (image && image.data) {\r\n              texture = new DataTexture(image.data, image.width, image.height);\r\n            } else {\r\n              texture = new Texture(image);\r\n            }\r\n\r\n            if (image) texture.needsUpdate = true; // textures can have undefined image data\r\n          }\r\n\r\n          texture.uuid = data.uuid;\r\n          if (data.name !== undefined) texture.name = data.name;\r\n          if (data.mapping !== undefined)\r\n            texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\r\n          if (data.offset !== undefined) texture.offset.fromArray(data.offset);\r\n          if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\r\n          if (data.center !== undefined) texture.center.fromArray(data.center);\r\n          if (data.rotation !== undefined) texture.rotation = data.rotation;\r\n\r\n          if (data.wrap !== undefined) {\r\n            texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\r\n            texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\r\n          }\r\n\r\n          if (data.format !== undefined) texture.format = data.format;\r\n          if (data.type !== undefined) texture.type = data.type;\r\n          if (data.encoding !== undefined) texture.encoding = data.encoding;\r\n          if (data.minFilter !== undefined)\r\n            texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\r\n          if (data.magFilter !== undefined)\r\n            texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\r\n          if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\r\n          if (data.flipY !== undefined) texture.flipY = data.flipY;\r\n          if (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\r\n          if (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\r\n          textures[data.uuid] = texture;\r\n        }\r\n      }\r\n\r\n      return textures;\r\n    }\r\n\r\n    parseObject(data, geometries, materials, animations) {\r\n      let object;\r\n\r\n      function getGeometry(name) {\r\n        if (geometries[name] === undefined) {\r\n          console.warn('THREE.ObjectLoader: Undefined geometry', name);\r\n        }\r\n\r\n        return geometries[name];\r\n      }\r\n\r\n      function getMaterial(name) {\r\n        if (name === undefined) return undefined;\r\n\r\n        if (Array.isArray(name)) {\r\n          const array = [];\r\n\r\n          for (let i = 0, l = name.length; i < l; i++) {\r\n            const uuid = name[i];\r\n\r\n            if (materials[uuid] === undefined) {\r\n              console.warn('THREE.ObjectLoader: Undefined material', uuid);\r\n            }\r\n\r\n            array.push(materials[uuid]);\r\n          }\r\n\r\n          return array;\r\n        }\r\n\r\n        if (materials[name] === undefined) {\r\n          console.warn('THREE.ObjectLoader: Undefined material', name);\r\n        }\r\n\r\n        return materials[name];\r\n      }\r\n\r\n      let geometry, material;\r\n\r\n      switch (data.type) {\r\n        case 'Scene':\r\n          object = new Scene();\r\n\r\n          if (data.background !== undefined) {\r\n            if (Number.isInteger(data.background)) {\r\n              object.background = new Color(data.background);\r\n            }\r\n          }\r\n\r\n          if (data.fog !== undefined) {\r\n            if (data.fog.type === 'Fog') {\r\n              object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\r\n            } else if (data.fog.type === 'FogExp2') {\r\n              object.fog = new FogExp2(data.fog.color, data.fog.density);\r\n            }\r\n          }\r\n\r\n          break;\r\n\r\n        case 'PerspectiveCamera':\r\n          object = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\r\n          if (data.focus !== undefined) object.focus = data.focus;\r\n          if (data.zoom !== undefined) object.zoom = data.zoom;\r\n          if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\r\n          if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\r\n          if (data.view !== undefined) object.view = Object.assign({}, data.view);\r\n          break;\r\n\r\n        case 'OrthographicCamera':\r\n          object = new OrthographicCamera(\r\n            data.left,\r\n            data.right,\r\n            data.top,\r\n            data.bottom,\r\n            data.near,\r\n            data.far,\r\n          );\r\n          if (data.zoom !== undefined) object.zoom = data.zoom;\r\n          if (data.view !== undefined) object.view = Object.assign({}, data.view);\r\n          break;\r\n\r\n        case 'AmbientLight':\r\n          object = new AmbientLight(data.color, data.intensity);\r\n          break;\r\n\r\n        case 'DirectionalLight':\r\n          object = new DirectionalLight(data.color, data.intensity);\r\n          break;\r\n\r\n        case 'PointLight':\r\n          object = new PointLight(data.color, data.intensity, data.distance, data.decay);\r\n          break;\r\n\r\n        case 'RectAreaLight':\r\n          object = new RectAreaLight(data.color, data.intensity, data.width, data.height);\r\n          break;\r\n\r\n        case 'SpotLight':\r\n          object = new SpotLight(\r\n            data.color,\r\n            data.intensity,\r\n            data.distance,\r\n            data.angle,\r\n            data.penumbra,\r\n            data.decay,\r\n          );\r\n          break;\r\n\r\n        case 'HemisphereLight':\r\n          object = new HemisphereLight(data.color, data.groundColor, data.intensity);\r\n          break;\r\n\r\n        case 'LightProbe':\r\n          object = new LightProbe().fromJSON(data);\r\n          break;\r\n\r\n        case 'SkinnedMesh':\r\n          geometry = getGeometry(data.geometry);\r\n          material = getMaterial(data.material);\r\n          object = new SkinnedMesh(geometry, material);\r\n          if (data.bindMode !== undefined) object.bindMode = data.bindMode;\r\n          if (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\r\n          if (data.skeleton !== undefined) object.skeleton = data.skeleton;\r\n          break;\r\n\r\n        case 'Mesh':\r\n          geometry = getGeometry(data.geometry);\r\n          material = getMaterial(data.material);\r\n          object = new Mesh(geometry, material);\r\n          break;\r\n\r\n        case 'InstancedMesh':\r\n          geometry = getGeometry(data.geometry);\r\n          material = getMaterial(data.material);\r\n          const count = data.count;\r\n          const instanceMatrix = data.instanceMatrix;\r\n          const instanceColor = data.instanceColor;\r\n          object = new InstancedMesh(geometry, material, count);\r\n          object.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\r\n          if (instanceColor !== undefined)\r\n            object.instanceColor = new BufferAttribute(\r\n              new Float32Array(instanceColor.array),\r\n              instanceColor.itemSize,\r\n            );\r\n          break;\r\n\r\n        case 'LOD':\r\n          object = new LOD();\r\n          break;\r\n\r\n        case 'Line':\r\n          object = new Line(getGeometry(data.geometry), getMaterial(data.material));\r\n          break;\r\n\r\n        case 'LineLoop':\r\n          object = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\r\n          break;\r\n\r\n        case 'LineSegments':\r\n          object = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\r\n          break;\r\n\r\n        case 'PointCloud':\r\n        case 'Points':\r\n          object = new Points(getGeometry(data.geometry), getMaterial(data.material));\r\n          break;\r\n\r\n        case 'Sprite':\r\n          object = new Sprite(getMaterial(data.material));\r\n          break;\r\n\r\n        case 'Group':\r\n          object = new Group();\r\n          break;\r\n\r\n        case 'Bone':\r\n          object = new Bone();\r\n          break;\r\n\r\n        default:\r\n          object = new Object3D();\r\n      }\r\n\r\n      object.uuid = data.uuid;\r\n      if (data.name !== undefined) object.name = data.name;\r\n\r\n      if (data.matrix !== undefined) {\r\n        object.matrix.fromArray(data.matrix);\r\n        if (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\r\n        if (object.matrixAutoUpdate)\r\n          object.matrix.decompose(object.position, object.quaternion, object.scale);\r\n      } else {\r\n        if (data.position !== undefined) object.position.fromArray(data.position);\r\n        if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\r\n        if (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\r\n        if (data.scale !== undefined) object.scale.fromArray(data.scale);\r\n      }\r\n\r\n      if (data.castShadow !== undefined) object.castShadow = data.castShadow;\r\n      if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\r\n\r\n      if (data.shadow) {\r\n        if (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\r\n        if (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\r\n        if (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\r\n        if (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\r\n        if (data.shadow.camera !== undefined)\r\n          object.shadow.camera = this.parseObject(data.shadow.camera);\r\n      }\r\n\r\n      if (data.visible !== undefined) object.visible = data.visible;\r\n      if (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\r\n      if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\r\n      if (data.userData !== undefined) object.userData = data.userData;\r\n      if (data.layers !== undefined) object.layers.mask = data.layers;\r\n\r\n      if (data.children !== undefined) {\r\n        const children = data.children;\r\n\r\n        for (let i = 0; i < children.length; i++) {\r\n          object.add(this.parseObject(children[i], geometries, materials, animations));\r\n        }\r\n      }\r\n\r\n      if (data.animations !== undefined) {\r\n        const objectAnimations = data.animations;\r\n\r\n        for (let i = 0; i < objectAnimations.length; i++) {\r\n          const uuid = objectAnimations[i];\r\n          object.animations.push(animations[uuid]);\r\n        }\r\n      }\r\n\r\n      if (data.type === 'LOD') {\r\n        if (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\r\n        const levels = data.levels;\r\n\r\n        for (let l = 0; l < levels.length; l++) {\r\n          const level = levels[l];\r\n          const child = object.getObjectByProperty('uuid', level.object);\r\n\r\n          if (child !== undefined) {\r\n            object.addLevel(child, level.distance);\r\n          }\r\n        }\r\n      }\r\n\r\n      return object;\r\n    }\r\n\r\n    bindSkeletons(object, skeletons) {\r\n      if (Object.keys(skeletons).length === 0) return;\r\n      object.traverse(function (child) {\r\n        if (child.isSkinnedMesh === true && child.skeleton !== undefined) {\r\n          const skeleton = skeletons[child.skeleton];\r\n\r\n          if (skeleton === undefined) {\r\n            console.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\r\n          } else {\r\n            child.bind(skeleton, child.bindMatrix);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    /* DEPRECATED */\r\n\r\n    setTexturePath(value) {\r\n      console.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\r\n      return this.setResourcePath(value);\r\n    }\r\n  }\r\n\r\n  const TEXTURE_MAPPING = {\r\n    UVMapping: UVMapping,\r\n    CubeReflectionMapping: CubeReflectionMapping,\r\n    CubeRefractionMapping: CubeRefractionMapping,\r\n    EquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n    EquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n    CubeUVReflectionMapping: CubeUVReflectionMapping,\r\n    CubeUVRefractionMapping: CubeUVRefractionMapping,\r\n  };\r\n  const TEXTURE_WRAPPING = {\r\n    RepeatWrapping: RepeatWrapping,\r\n    ClampToEdgeWrapping: ClampToEdgeWrapping,\r\n    MirroredRepeatWrapping: MirroredRepeatWrapping,\r\n  };\r\n  const TEXTURE_FILTER = {\r\n    NearestFilter: NearestFilter,\r\n    NearestMipmapNearestFilter: NearestMipmapNearestFilter,\r\n    NearestMipmapLinearFilter: NearestMipmapLinearFilter,\r\n    LinearFilter: LinearFilter,\r\n    LinearMipmapNearestFilter: LinearMipmapNearestFilter,\r\n    LinearMipmapLinearFilter: LinearMipmapLinearFilter,\r\n  };\r\n\r\n  class ImageBitmapLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n\r\n      if (typeof createImageBitmap === 'undefined') {\r\n        console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\r\n      }\r\n\r\n      if (typeof fetch === 'undefined') {\r\n        console.warn('THREE.ImageBitmapLoader: fetch() not supported.');\r\n      }\r\n\r\n      this.options = {\r\n        premultiplyAlpha: 'none',\r\n      };\r\n    }\r\n\r\n    setOptions(options) {\r\n      this.options = options;\r\n      return this;\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      if (url === undefined) url = '';\r\n      if (this.path !== undefined) url = this.path + url;\r\n      url = this.manager.resolveURL(url);\r\n      const scope = this;\r\n      const cached = Cache.get(url);\r\n\r\n      if (cached !== undefined) {\r\n        scope.manager.itemStart(url);\r\n        setTimeout(function () {\r\n          if (onLoad) onLoad(cached);\r\n          scope.manager.itemEnd(url);\r\n        }, 0);\r\n        return cached;\r\n      }\r\n\r\n      const fetchOptions = {};\r\n      fetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\r\n      fetchOptions.headers = this.requestHeader;\r\n      fetch(url, fetchOptions)\r\n        .then(function (res) {\r\n          return res.blob();\r\n        })\r\n        .then(function (blob) {\r\n          return createImageBitmap(\r\n            blob,\r\n            Object.assign(scope.options, {\r\n              colorSpaceConversion: 'none',\r\n            }),\r\n          );\r\n        })\r\n        .then(function (imageBitmap) {\r\n          Cache.add(url, imageBitmap);\r\n          if (onLoad) onLoad(imageBitmap);\r\n          scope.manager.itemEnd(url);\r\n        })\r\n        .catch(function (e) {\r\n          if (onError) onError(e);\r\n          scope.manager.itemError(url);\r\n          scope.manager.itemEnd(url);\r\n        });\r\n      scope.manager.itemStart(url);\r\n    }\r\n  }\r\n\r\n  ImageBitmapLoader.prototype.isImageBitmapLoader = true;\r\n\r\n  class ShapePath {\r\n    constructor() {\r\n      this.type = 'ShapePath';\r\n      this.color = new Color();\r\n      this.subPaths = [];\r\n      this.currentPath = null;\r\n    }\r\n\r\n    moveTo(x, y) {\r\n      this.currentPath = new Path();\r\n      this.subPaths.push(this.currentPath);\r\n      this.currentPath.moveTo(x, y);\r\n      return this;\r\n    }\r\n\r\n    lineTo(x, y) {\r\n      this.currentPath.lineTo(x, y);\r\n      return this;\r\n    }\r\n\r\n    quadraticCurveTo(aCPx, aCPy, aX, aY) {\r\n      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\r\n      return this;\r\n    }\r\n\r\n    bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\r\n      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\r\n      return this;\r\n    }\r\n\r\n    splineThru(pts) {\r\n      this.currentPath.splineThru(pts);\r\n      return this;\r\n    }\r\n\r\n    toShapes(isCCW, noHoles) {\r\n      function toShapesNoHoles(inSubpaths) {\r\n        const shapes = [];\r\n\r\n        for (let i = 0, l = inSubpaths.length; i < l; i++) {\r\n          const tmpPath = inSubpaths[i];\r\n          const tmpShape = new Shape();\r\n          tmpShape.curves = tmpPath.curves;\r\n          shapes.push(tmpShape);\r\n        }\r\n\r\n        return shapes;\r\n      }\r\n\r\n      function isPointInsidePolygon(inPt, inPolygon) {\r\n        const polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\r\n        // toggling of inside/outside at every single! intersection point of an edge\r\n        //\twith the horizontal line through inPt, left of inPt\r\n        //\tnot counting lowerY endpoints of edges and whole edges on that line\r\n\r\n        let inside = false;\r\n\r\n        for (let p = polyLen - 1, q = 0; q < polyLen; p = q++) {\r\n          let edgeLowPt = inPolygon[p];\r\n          let edgeHighPt = inPolygon[q];\r\n          let edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n          let edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n          if (Math.abs(edgeDy) > Number.EPSILON) {\r\n            // not parallel\r\n            if (edgeDy < 0) {\r\n              edgeLowPt = inPolygon[q];\r\n              edgeDx = -edgeDx;\r\n              edgeHighPt = inPolygon[p];\r\n              edgeDy = -edgeDy;\r\n            }\r\n\r\n            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\r\n\r\n            if (inPt.y === edgeLowPt.y) {\r\n              if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\r\n              // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n            } else {\r\n              const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\r\n              if (perpEdge === 0) return true; // inPt is on contour ?\r\n\r\n              if (perpEdge < 0) continue;\r\n              inside = !inside; // true intersection left of inPt\r\n            }\r\n          } else {\r\n            // parallel or collinear\r\n            if (inPt.y !== edgeLowPt.y) continue; // parallel\r\n            // edge lies on the same horizontal line as inPt\r\n\r\n            if (\r\n              (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x) ||\r\n              (edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)\r\n            )\r\n              return true; // inPt: Point on contour !\r\n            // continue;\r\n          }\r\n        }\r\n\r\n        return inside;\r\n      }\r\n\r\n      const isClockWise = ShapeUtils.isClockWise;\r\n      const subPaths = this.subPaths;\r\n      if (subPaths.length === 0) return [];\r\n      if (noHoles === true) return toShapesNoHoles(subPaths);\r\n      let solid, tmpPath, tmpShape;\r\n      const shapes = [];\r\n\r\n      if (subPaths.length === 1) {\r\n        tmpPath = subPaths[0];\r\n        tmpShape = new Shape();\r\n        tmpShape.curves = tmpPath.curves;\r\n        shapes.push(tmpShape);\r\n        return shapes;\r\n      }\r\n\r\n      let holesFirst = !isClockWise(subPaths[0].getPoints());\r\n      holesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\r\n\r\n      const betterShapeHoles = [];\r\n      const newShapes = [];\r\n      let newShapeHoles = [];\r\n      let mainIdx = 0;\r\n      let tmpPoints;\r\n      newShapes[mainIdx] = undefined;\r\n      newShapeHoles[mainIdx] = [];\r\n\r\n      for (let i = 0, l = subPaths.length; i < l; i++) {\r\n        tmpPath = subPaths[i];\r\n        tmpPoints = tmpPath.getPoints();\r\n        solid = isClockWise(tmpPoints);\r\n        solid = isCCW ? !solid : solid;\r\n\r\n        if (solid) {\r\n          if (!holesFirst && newShapes[mainIdx]) mainIdx++;\r\n          newShapes[mainIdx] = {\r\n            s: new Shape(),\r\n            p: tmpPoints,\r\n          };\r\n          newShapes[mainIdx].s.curves = tmpPath.curves;\r\n          if (holesFirst) mainIdx++;\r\n          newShapeHoles[mainIdx] = []; //console.log('cw', i);\r\n        } else {\r\n          newShapeHoles[mainIdx].push({\r\n            h: tmpPath,\r\n            p: tmpPoints[0],\r\n          }); //console.log('ccw', i);\r\n        }\r\n      } // only Holes? -> probably all Shapes with wrong orientation\r\n\r\n      if (!newShapes[0]) return toShapesNoHoles(subPaths);\r\n\r\n      if (newShapes.length > 1) {\r\n        let ambiguous = false;\r\n        const toChange = [];\r\n\r\n        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\r\n          betterShapeHoles[sIdx] = [];\r\n        }\r\n\r\n        for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\r\n          const sho = newShapeHoles[sIdx];\r\n\r\n          for (let hIdx = 0; hIdx < sho.length; hIdx++) {\r\n            const ho = sho[hIdx];\r\n            let hole_unassigned = true;\r\n\r\n            for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\r\n              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\r\n                if (sIdx !== s2Idx)\r\n                  toChange.push({\r\n                    froms: sIdx,\r\n                    tos: s2Idx,\r\n                    hole: hIdx,\r\n                  });\r\n\r\n                if (hole_unassigned) {\r\n                  hole_unassigned = false;\r\n                  betterShapeHoles[s2Idx].push(ho);\r\n                } else {\r\n                  ambiguous = true;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (hole_unassigned) {\r\n              betterShapeHoles[sIdx].push(ho);\r\n            }\r\n          }\r\n        } // console.log(\"ambiguous: \", ambiguous);\r\n\r\n        if (toChange.length > 0) {\r\n          // console.log(\"to change: \", toChange);\r\n          if (!ambiguous) newShapeHoles = betterShapeHoles;\r\n        }\r\n      }\r\n\r\n      let tmpHoles;\r\n\r\n      for (let i = 0, il = newShapes.length; i < il; i++) {\r\n        tmpShape = newShapes[i].s;\r\n        shapes.push(tmpShape);\r\n        tmpHoles = newShapeHoles[i];\r\n\r\n        for (let j = 0, jl = tmpHoles.length; j < jl; j++) {\r\n          tmpShape.holes.push(tmpHoles[j].h);\r\n        }\r\n      } //console.log(\"shape\", shapes);\r\n\r\n      return shapes;\r\n    }\r\n  }\r\n\r\n  class Font {\r\n    constructor(data) {\r\n      this.type = 'Font';\r\n      this.data = data;\r\n    }\r\n\r\n    generateShapes(text, size = 100) {\r\n      const shapes = [];\r\n      const paths = createPaths(text, size, this.data);\r\n\r\n      for (let p = 0, pl = paths.length; p < pl; p++) {\r\n        Array.prototype.push.apply(shapes, paths[p].toShapes());\r\n      }\r\n\r\n      return shapes;\r\n    }\r\n  }\r\n\r\n  function createPaths(text, size, data) {\r\n    const chars = Array.from(text);\r\n    const scale = size / data.resolution;\r\n    const line_height =\r\n      (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\r\n    const paths = [];\r\n    let offsetX = 0,\r\n      offsetY = 0;\r\n\r\n    for (let i = 0; i < chars.length; i++) {\r\n      const char = chars[i];\r\n\r\n      if (char === '\\n') {\r\n        offsetX = 0;\r\n        offsetY -= line_height;\r\n      } else {\r\n        const ret = createPath(char, scale, offsetX, offsetY, data);\r\n        offsetX += ret.offsetX;\r\n        paths.push(ret.path);\r\n      }\r\n    }\r\n\r\n    return paths;\r\n  }\r\n\r\n  function createPath(char, scale, offsetX, offsetY, data) {\r\n    const glyph = data.glyphs[char] || data.glyphs['?'];\r\n\r\n    if (!glyph) {\r\n      console.error(\r\n        'THREE.Font: character \"' +\r\n          char +\r\n          '\" does not exists in font family ' +\r\n          data.familyName +\r\n          '.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    const path = new ShapePath();\r\n    let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n    if (glyph.o) {\r\n      const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\r\n\r\n      for (let i = 0, l = outline.length; i < l; ) {\r\n        const action = outline[i++];\r\n\r\n        switch (action) {\r\n          case 'm':\r\n            // moveTo\r\n            x = outline[i++] * scale + offsetX;\r\n            y = outline[i++] * scale + offsetY;\r\n            path.moveTo(x, y);\r\n            break;\r\n\r\n          case 'l':\r\n            // lineTo\r\n            x = outline[i++] * scale + offsetX;\r\n            y = outline[i++] * scale + offsetY;\r\n            path.lineTo(x, y);\r\n            break;\r\n\r\n          case 'q':\r\n            // quadraticCurveTo\r\n            cpx = outline[i++] * scale + offsetX;\r\n            cpy = outline[i++] * scale + offsetY;\r\n            cpx1 = outline[i++] * scale + offsetX;\r\n            cpy1 = outline[i++] * scale + offsetY;\r\n            path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\r\n            break;\r\n\r\n          case 'b':\r\n            // bezierCurveTo\r\n            cpx = outline[i++] * scale + offsetX;\r\n            cpy = outline[i++] * scale + offsetY;\r\n            cpx1 = outline[i++] * scale + offsetX;\r\n            cpy1 = outline[i++] * scale + offsetY;\r\n            cpx2 = outline[i++] * scale + offsetX;\r\n            cpy2 = outline[i++] * scale + offsetY;\r\n            path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\r\n            break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      offsetX: glyph.ha * scale,\r\n      path: path,\r\n    };\r\n  }\r\n\r\n  Font.prototype.isFont = true;\r\n\r\n  class FontLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setPath(this.path);\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setWithCredentials(scope.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (text) {\r\n          let json;\r\n\r\n          try {\r\n            json = JSON.parse(text);\r\n          } catch (e) {\r\n            console.warn(\r\n              'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.',\r\n            );\r\n            json = JSON.parse(text.substring(65, text.length - 2));\r\n          }\r\n\r\n          const font = scope.parse(json);\r\n          if (onLoad) onLoad(font);\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n\r\n    parse(json) {\r\n      return new Font(json);\r\n    }\r\n  }\r\n\r\n  let _context;\r\n\r\n  const AudioContext = {\r\n    getContext: function () {\r\n      if (_context === undefined) {\r\n        _context = new (window.AudioContext || window.webkitAudioContext)();\r\n      }\r\n\r\n      return _context;\r\n    },\r\n    setContext: function (value) {\r\n      _context = value;\r\n    },\r\n  };\r\n\r\n  class AudioLoader extends Loader {\r\n    constructor(manager) {\r\n      super(manager);\r\n    }\r\n\r\n    load(url, onLoad, onProgress, onError) {\r\n      const scope = this;\r\n      const loader = new FileLoader(this.manager);\r\n      loader.setResponseType('arraybuffer');\r\n      loader.setPath(this.path);\r\n      loader.setRequestHeader(this.requestHeader);\r\n      loader.setWithCredentials(this.withCredentials);\r\n      loader.load(\r\n        url,\r\n        function (buffer) {\r\n          try {\r\n            // Create a copy of the buffer. The `decodeAudioData` method\r\n            // detaches the buffer when complete, preventing reuse.\r\n            const bufferCopy = buffer.slice(0);\r\n            const context = AudioContext.getContext();\r\n            context.decodeAudioData(bufferCopy, function (audioBuffer) {\r\n              onLoad(audioBuffer);\r\n            });\r\n          } catch (e) {\r\n            if (onError) {\r\n              onError(e);\r\n            } else {\r\n              console.error(e);\r\n            }\r\n\r\n            scope.manager.itemError(url);\r\n          }\r\n        },\r\n        onProgress,\r\n        onError,\r\n      );\r\n    }\r\n  }\r\n\r\n  class HemisphereLightProbe extends LightProbe {\r\n    constructor(skyColor, groundColor, intensity = 1) {\r\n      super(undefined, intensity);\r\n      const color1 = new Color().set(skyColor);\r\n      const color2 = new Color().set(groundColor);\r\n      const sky = new Vector3(color1.r, color1.g, color1.b);\r\n      const ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\r\n\r\n      const c0 = Math.sqrt(Math.PI);\r\n      const c1 = c0 * Math.sqrt(0.75);\r\n      this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\r\n      this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\r\n    }\r\n  }\r\n\r\n  HemisphereLightProbe.prototype.isHemisphereLightProbe = true;\r\n\r\n  class AmbientLightProbe extends LightProbe {\r\n    constructor(color, intensity = 1) {\r\n      super(undefined, intensity);\r\n      const color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\r\n\r\n      this.sh.coefficients[0]\r\n        .set(color1.r, color1.g, color1.b)\r\n        .multiplyScalar(2 * Math.sqrt(Math.PI));\r\n    }\r\n  }\r\n\r\n  AmbientLightProbe.prototype.isAmbientLightProbe = true;\r\n\r\n  const _eyeRight = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _eyeLeft = /*@__PURE__*/ new Matrix4();\r\n\r\n  class StereoCamera {\r\n    constructor() {\r\n      this.type = 'StereoCamera';\r\n      this.aspect = 1;\r\n      this.eyeSep = 0.064;\r\n      this.cameraL = new PerspectiveCamera();\r\n      this.cameraL.layers.enable(1);\r\n      this.cameraL.matrixAutoUpdate = false;\r\n      this.cameraR = new PerspectiveCamera();\r\n      this.cameraR.layers.enable(2);\r\n      this.cameraR.matrixAutoUpdate = false;\r\n      this._cache = {\r\n        focus: null,\r\n        fov: null,\r\n        aspect: null,\r\n        near: null,\r\n        far: null,\r\n        zoom: null,\r\n        eyeSep: null,\r\n      };\r\n    }\r\n\r\n    update(camera) {\r\n      const cache = this._cache;\r\n      const needsUpdate =\r\n        cache.focus !== camera.focus ||\r\n        cache.fov !== camera.fov ||\r\n        cache.aspect !== camera.aspect * this.aspect ||\r\n        cache.near !== camera.near ||\r\n        cache.far !== camera.far ||\r\n        cache.zoom !== camera.zoom ||\r\n        cache.eyeSep !== this.eyeSep;\r\n\r\n      if (needsUpdate) {\r\n        cache.focus = camera.focus;\r\n        cache.fov = camera.fov;\r\n        cache.aspect = camera.aspect * this.aspect;\r\n        cache.near = camera.near;\r\n        cache.far = camera.far;\r\n        cache.zoom = camera.zoom;\r\n        cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\r\n        // http://paulbourke.net/stereographics/stereorender/\r\n\r\n        const projectionMatrix = camera.projectionMatrix.clone();\r\n        const eyeSepHalf = cache.eyeSep / 2;\r\n        const eyeSepOnProjection = (eyeSepHalf * cache.near) / cache.focus;\r\n        const ymax = (cache.near * Math.tan(DEG2RAD * cache.fov * 0.5)) / cache.zoom;\r\n        let xmin, xmax; // translate xOffset\r\n\r\n        _eyeLeft.elements[12] = -eyeSepHalf;\r\n        _eyeRight.elements[12] = eyeSepHalf; // for left eye\r\n\r\n        xmin = -ymax * cache.aspect + eyeSepOnProjection;\r\n        xmax = ymax * cache.aspect + eyeSepOnProjection;\r\n        projectionMatrix.elements[0] = (2 * cache.near) / (xmax - xmin);\r\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\r\n        this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\r\n\r\n        xmin = -ymax * cache.aspect - eyeSepOnProjection;\r\n        xmax = ymax * cache.aspect - eyeSepOnProjection;\r\n        projectionMatrix.elements[0] = (2 * cache.near) / (xmax - xmin);\r\n        projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\r\n        this.cameraR.projectionMatrix.copy(projectionMatrix);\r\n      }\r\n\r\n      this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\r\n      this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\r\n    }\r\n  }\r\n\r\n  class Clock {\r\n    constructor(autoStart = true) {\r\n      this.autoStart = autoStart;\r\n      this.startTime = 0;\r\n      this.oldTime = 0;\r\n      this.elapsedTime = 0;\r\n      this.running = false;\r\n    }\r\n\r\n    start() {\r\n      this.startTime = now();\r\n      this.oldTime = this.startTime;\r\n      this.elapsedTime = 0;\r\n      this.running = true;\r\n    }\r\n\r\n    stop() {\r\n      this.getElapsedTime();\r\n      this.running = false;\r\n      this.autoStart = false;\r\n    }\r\n\r\n    getElapsedTime() {\r\n      this.getDelta();\r\n      return this.elapsedTime;\r\n    }\r\n\r\n    getDelta() {\r\n      let diff = 0;\r\n\r\n      if (this.autoStart && !this.running) {\r\n        this.start();\r\n        return 0;\r\n      }\r\n\r\n      if (this.running) {\r\n        const newTime = now();\r\n        diff = (newTime - this.oldTime) / 1000;\r\n        this.oldTime = newTime;\r\n        this.elapsedTime += diff;\r\n      }\r\n\r\n      return diff;\r\n    }\r\n  }\r\n\r\n  function now() {\r\n    return (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\r\n  }\r\n\r\n  const _position$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _quaternion$1 = /*@__PURE__*/ new Quaternion();\r\n\r\n  const _scale$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _orientation$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  class AudioListener extends Object3D {\r\n    constructor() {\r\n      super();\r\n      this.type = 'AudioListener';\r\n      this.context = AudioContext.getContext();\r\n      this.gain = this.context.createGain();\r\n      this.gain.connect(this.context.destination);\r\n      this.filter = null;\r\n      this.timeDelta = 0; // private\r\n\r\n      this._clock = new Clock();\r\n    }\r\n\r\n    getInput() {\r\n      return this.gain;\r\n    }\r\n\r\n    removeFilter() {\r\n      if (this.filter !== null) {\r\n        this.gain.disconnect(this.filter);\r\n        this.filter.disconnect(this.context.destination);\r\n        this.gain.connect(this.context.destination);\r\n        this.filter = null;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getFilter() {\r\n      return this.filter;\r\n    }\r\n\r\n    setFilter(value) {\r\n      if (this.filter !== null) {\r\n        this.gain.disconnect(this.filter);\r\n        this.filter.disconnect(this.context.destination);\r\n      } else {\r\n        this.gain.disconnect(this.context.destination);\r\n      }\r\n\r\n      this.filter = value;\r\n      this.gain.connect(this.filter);\r\n      this.filter.connect(this.context.destination);\r\n      return this;\r\n    }\r\n\r\n    getMasterVolume() {\r\n      return this.gain.gain.value;\r\n    }\r\n\r\n    setMasterVolume(value) {\r\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\r\n      return this;\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      super.updateMatrixWorld(force);\r\n      const listener = this.context.listener;\r\n      const up = this.up;\r\n      this.timeDelta = this._clock.getDelta();\r\n      this.matrixWorld.decompose(_position$1, _quaternion$1, _scale$1);\r\n\r\n      _orientation$1.set(0, 0, -1).applyQuaternion(_quaternion$1);\r\n\r\n      if (listener.positionX) {\r\n        // code path for Chrome (see #14393)\r\n        const endTime = this.context.currentTime + this.timeDelta;\r\n        listener.positionX.linearRampToValueAtTime(_position$1.x, endTime);\r\n        listener.positionY.linearRampToValueAtTime(_position$1.y, endTime);\r\n        listener.positionZ.linearRampToValueAtTime(_position$1.z, endTime);\r\n        listener.forwardX.linearRampToValueAtTime(_orientation$1.x, endTime);\r\n        listener.forwardY.linearRampToValueAtTime(_orientation$1.y, endTime);\r\n        listener.forwardZ.linearRampToValueAtTime(_orientation$1.z, endTime);\r\n        listener.upX.linearRampToValueAtTime(up.x, endTime);\r\n        listener.upY.linearRampToValueAtTime(up.y, endTime);\r\n        listener.upZ.linearRampToValueAtTime(up.z, endTime);\r\n      } else {\r\n        listener.setPosition(_position$1.x, _position$1.y, _position$1.z);\r\n        listener.setOrientation(\r\n          _orientation$1.x,\r\n          _orientation$1.y,\r\n          _orientation$1.z,\r\n          up.x,\r\n          up.y,\r\n          up.z,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  class Audio extends Object3D {\r\n    constructor(listener) {\r\n      super();\r\n      this.type = 'Audio';\r\n      this.listener = listener;\r\n      this.context = listener.context;\r\n      this.gain = this.context.createGain();\r\n      this.gain.connect(listener.getInput());\r\n      this.autoplay = false;\r\n      this.buffer = null;\r\n      this.detune = 0;\r\n      this.loop = false;\r\n      this.loopStart = 0;\r\n      this.loopEnd = 0;\r\n      this.offset = 0;\r\n      this.duration = undefined;\r\n      this.playbackRate = 1;\r\n      this.isPlaying = false;\r\n      this.hasPlaybackControl = true;\r\n      this.source = null;\r\n      this.sourceType = 'empty';\r\n      this._startedAt = 0;\r\n      this._progress = 0;\r\n      this._connected = false;\r\n      this.filters = [];\r\n    }\r\n\r\n    getOutput() {\r\n      return this.gain;\r\n    }\r\n\r\n    setNodeSource(audioNode) {\r\n      this.hasPlaybackControl = false;\r\n      this.sourceType = 'audioNode';\r\n      this.source = audioNode;\r\n      this.connect();\r\n      return this;\r\n    }\r\n\r\n    setMediaElementSource(mediaElement) {\r\n      this.hasPlaybackControl = false;\r\n      this.sourceType = 'mediaNode';\r\n      this.source = this.context.createMediaElementSource(mediaElement);\r\n      this.connect();\r\n      return this;\r\n    }\r\n\r\n    setMediaStreamSource(mediaStream) {\r\n      this.hasPlaybackControl = false;\r\n      this.sourceType = 'mediaStreamNode';\r\n      this.source = this.context.createMediaStreamSource(mediaStream);\r\n      this.connect();\r\n      return this;\r\n    }\r\n\r\n    setBuffer(audioBuffer) {\r\n      this.buffer = audioBuffer;\r\n      this.sourceType = 'buffer';\r\n      if (this.autoplay) this.play();\r\n      return this;\r\n    }\r\n\r\n    play(delay = 0) {\r\n      if (this.isPlaying === true) {\r\n        console.warn('THREE.Audio: Audio is already playing.');\r\n        return;\r\n      }\r\n\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return;\r\n      }\r\n\r\n      this._startedAt = this.context.currentTime + delay;\r\n      const source = this.context.createBufferSource();\r\n      source.buffer = this.buffer;\r\n      source.loop = this.loop;\r\n      source.loopStart = this.loopStart;\r\n      source.loopEnd = this.loopEnd;\r\n      source.onended = this.onEnded.bind(this);\r\n      source.start(this._startedAt, this._progress + this.offset, this.duration);\r\n      this.isPlaying = true;\r\n      this.source = source;\r\n      this.setDetune(this.detune);\r\n      this.setPlaybackRate(this.playbackRate);\r\n      return this.connect();\r\n    }\r\n\r\n    pause() {\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return;\r\n      }\r\n\r\n      if (this.isPlaying === true) {\r\n        // update current progress\r\n        this._progress +=\r\n          Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\r\n\r\n        if (this.loop === true) {\r\n          // ensure _progress does not exceed duration with looped audios\r\n          this._progress = this._progress % (this.duration || this.buffer.duration);\r\n        }\r\n\r\n        this.source.stop();\r\n        this.source.onended = null;\r\n        this.isPlaying = false;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    stop() {\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return;\r\n      }\r\n\r\n      this._progress = 0;\r\n      this.source.stop();\r\n      this.source.onended = null;\r\n      this.isPlaying = false;\r\n      return this;\r\n    }\r\n\r\n    connect() {\r\n      if (this.filters.length > 0) {\r\n        this.source.connect(this.filters[0]);\r\n\r\n        for (let i = 1, l = this.filters.length; i < l; i++) {\r\n          this.filters[i - 1].connect(this.filters[i]);\r\n        }\r\n\r\n        this.filters[this.filters.length - 1].connect(this.getOutput());\r\n      } else {\r\n        this.source.connect(this.getOutput());\r\n      }\r\n\r\n      this._connected = true;\r\n      return this;\r\n    }\r\n\r\n    disconnect() {\r\n      if (this.filters.length > 0) {\r\n        this.source.disconnect(this.filters[0]);\r\n\r\n        for (let i = 1, l = this.filters.length; i < l; i++) {\r\n          this.filters[i - 1].disconnect(this.filters[i]);\r\n        }\r\n\r\n        this.filters[this.filters.length - 1].disconnect(this.getOutput());\r\n      } else {\r\n        this.source.disconnect(this.getOutput());\r\n      }\r\n\r\n      this._connected = false;\r\n      return this;\r\n    }\r\n\r\n    getFilters() {\r\n      return this.filters;\r\n    }\r\n\r\n    setFilters(value) {\r\n      if (!value) value = [];\r\n\r\n      if (this._connected === true) {\r\n        this.disconnect();\r\n        this.filters = value.slice();\r\n        this.connect();\r\n      } else {\r\n        this.filters = value.slice();\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setDetune(value) {\r\n      this.detune = value;\r\n      if (this.source.detune === undefined) return; // only set detune when available\r\n\r\n      if (this.isPlaying === true) {\r\n        this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getDetune() {\r\n      return this.detune;\r\n    }\r\n\r\n    getFilter() {\r\n      return this.getFilters()[0];\r\n    }\r\n\r\n    setFilter(filter) {\r\n      return this.setFilters(filter ? [filter] : []);\r\n    }\r\n\r\n    setPlaybackRate(value) {\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return;\r\n      }\r\n\r\n      this.playbackRate = value;\r\n\r\n      if (this.isPlaying === true) {\r\n        this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    getPlaybackRate() {\r\n      return this.playbackRate;\r\n    }\r\n\r\n    onEnded() {\r\n      this.isPlaying = false;\r\n    }\r\n\r\n    getLoop() {\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return false;\r\n      }\r\n\r\n      return this.loop;\r\n    }\r\n\r\n    setLoop(value) {\r\n      if (this.hasPlaybackControl === false) {\r\n        console.warn('THREE.Audio: this Audio has no playback control.');\r\n        return;\r\n      }\r\n\r\n      this.loop = value;\r\n\r\n      if (this.isPlaying === true) {\r\n        this.source.loop = this.loop;\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setLoopStart(value) {\r\n      this.loopStart = value;\r\n      return this;\r\n    }\r\n\r\n    setLoopEnd(value) {\r\n      this.loopEnd = value;\r\n      return this;\r\n    }\r\n\r\n    getVolume() {\r\n      return this.gain.gain.value;\r\n    }\r\n\r\n    setVolume(value) {\r\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  const _position = /*@__PURE__*/ new Vector3();\r\n\r\n  const _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\n  const _scale = /*@__PURE__*/ new Vector3();\r\n\r\n  const _orientation = /*@__PURE__*/ new Vector3();\r\n\r\n  class PositionalAudio extends Audio {\r\n    constructor(listener) {\r\n      super(listener);\r\n      this.panner = this.context.createPanner();\r\n      this.panner.panningModel = 'HRTF';\r\n      this.panner.connect(this.gain);\r\n    }\r\n\r\n    getOutput() {\r\n      return this.panner;\r\n    }\r\n\r\n    getRefDistance() {\r\n      return this.panner.refDistance;\r\n    }\r\n\r\n    setRefDistance(value) {\r\n      this.panner.refDistance = value;\r\n      return this;\r\n    }\r\n\r\n    getRolloffFactor() {\r\n      return this.panner.rolloffFactor;\r\n    }\r\n\r\n    setRolloffFactor(value) {\r\n      this.panner.rolloffFactor = value;\r\n      return this;\r\n    }\r\n\r\n    getDistanceModel() {\r\n      return this.panner.distanceModel;\r\n    }\r\n\r\n    setDistanceModel(value) {\r\n      this.panner.distanceModel = value;\r\n      return this;\r\n    }\r\n\r\n    getMaxDistance() {\r\n      return this.panner.maxDistance;\r\n    }\r\n\r\n    setMaxDistance(value) {\r\n      this.panner.maxDistance = value;\r\n      return this;\r\n    }\r\n\r\n    setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\r\n      this.panner.coneInnerAngle = coneInnerAngle;\r\n      this.panner.coneOuterAngle = coneOuterAngle;\r\n      this.panner.coneOuterGain = coneOuterGain;\r\n      return this;\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      super.updateMatrixWorld(force);\r\n      if (this.hasPlaybackControl === true && this.isPlaying === false) return;\r\n      this.matrixWorld.decompose(_position, _quaternion, _scale);\r\n\r\n      _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\r\n\r\n      const panner = this.panner;\r\n\r\n      if (panner.positionX) {\r\n        // code path for Chrome and Firefox (see #14393)\r\n        const endTime = this.context.currentTime + this.listener.timeDelta;\r\n        panner.positionX.linearRampToValueAtTime(_position.x, endTime);\r\n        panner.positionY.linearRampToValueAtTime(_position.y, endTime);\r\n        panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\r\n        panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\r\n        panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\r\n        panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\r\n      } else {\r\n        panner.setPosition(_position.x, _position.y, _position.z);\r\n        panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\r\n      }\r\n    }\r\n  }\r\n\r\n  class AudioAnalyser {\r\n    constructor(audio, fftSize = 2048) {\r\n      this.analyser = audio.context.createAnalyser();\r\n      this.analyser.fftSize = fftSize;\r\n      this.data = new Uint8Array(this.analyser.frequencyBinCount);\r\n      audio.getOutput().connect(this.analyser);\r\n    }\r\n\r\n    getFrequencyData() {\r\n      this.analyser.getByteFrequencyData(this.data);\r\n      return this.data;\r\n    }\r\n\r\n    getAverageFrequency() {\r\n      let value = 0;\r\n      const data = this.getFrequencyData();\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        value += data[i];\r\n      }\r\n\r\n      return value / data.length;\r\n    }\r\n  }\r\n\r\n  class PropertyMixer {\r\n    constructor(binding, typeName, valueSize) {\r\n      this.binding = binding;\r\n      this.valueSize = valueSize;\r\n      let mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\r\n      //\r\n      // interpolators can use .buffer as their .result\r\n      // the data then goes to 'incoming'\r\n      //\r\n      // 'accu0' and 'accu1' are used frame-interleaved for\r\n      // the cumulative result and are compared to detect\r\n      // changes\r\n      //\r\n      // 'orig' stores the original state of the property\r\n      //\r\n      // 'add' is used for additive cumulative results\r\n      //\r\n      // 'work' is optional and is only present for quaternion types. It is used\r\n      // to store intermediate quaternion multiplication results\r\n\r\n      switch (typeName) {\r\n        case 'quaternion':\r\n          mixFunction = this._slerp;\r\n          mixFunctionAdditive = this._slerpAdditive;\r\n          setIdentity = this._setAdditiveIdentityQuaternion;\r\n          this.buffer = new Float64Array(valueSize * 6);\r\n          this._workIndex = 5;\r\n          break;\r\n\r\n        case 'string':\r\n        case 'bool':\r\n          mixFunction = this._select; // Use the regular mix function and for additive on these types,\r\n          // additive is not relevant for non-numeric types\r\n\r\n          mixFunctionAdditive = this._select;\r\n          setIdentity = this._setAdditiveIdentityOther;\r\n          this.buffer = new Array(valueSize * 5);\r\n          break;\r\n\r\n        default:\r\n          mixFunction = this._lerp;\r\n          mixFunctionAdditive = this._lerpAdditive;\r\n          setIdentity = this._setAdditiveIdentityNumeric;\r\n          this.buffer = new Float64Array(valueSize * 5);\r\n      }\r\n\r\n      this._mixBufferRegion = mixFunction;\r\n      this._mixBufferRegionAdditive = mixFunctionAdditive;\r\n      this._setIdentity = setIdentity;\r\n      this._origIndex = 3;\r\n      this._addIndex = 4;\r\n      this.cumulativeWeight = 0;\r\n      this.cumulativeWeightAdditive = 0;\r\n      this.useCount = 0;\r\n      this.referenceCount = 0;\r\n    } // accumulate data in the 'incoming' region into 'accu<i>'\r\n\r\n    accumulate(accuIndex, weight) {\r\n      // note: happily accumulating nothing when weight = 0, the caller knows\r\n      // the weight and shouldn't have made the call in the first place\r\n      const buffer = this.buffer,\r\n        stride = this.valueSize,\r\n        offset = accuIndex * stride + stride;\r\n      let currentWeight = this.cumulativeWeight;\r\n\r\n      if (currentWeight === 0) {\r\n        // accuN := incoming * weight\r\n        for (let i = 0; i !== stride; ++i) {\r\n          buffer[offset + i] = buffer[i];\r\n        }\r\n\r\n        currentWeight = weight;\r\n      } else {\r\n        // accuN := accuN + incoming * weight\r\n        currentWeight += weight;\r\n        const mix = weight / currentWeight;\r\n\r\n        this._mixBufferRegion(buffer, offset, 0, mix, stride);\r\n      }\r\n\r\n      this.cumulativeWeight = currentWeight;\r\n    } // accumulate data in the 'incoming' region into 'add'\r\n\r\n    accumulateAdditive(weight) {\r\n      const buffer = this.buffer,\r\n        stride = this.valueSize,\r\n        offset = stride * this._addIndex;\r\n\r\n      if (this.cumulativeWeightAdditive === 0) {\r\n        // add = identity\r\n        this._setIdentity();\r\n      } // add := add + incoming * weight\r\n\r\n      this._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\r\n\r\n      this.cumulativeWeightAdditive += weight;\r\n    } // apply the state of 'accu<i>' to the binding when accus differ\r\n\r\n    apply(accuIndex) {\r\n      const stride = this.valueSize,\r\n        buffer = this.buffer,\r\n        offset = accuIndex * stride + stride,\r\n        weight = this.cumulativeWeight,\r\n        weightAdditive = this.cumulativeWeightAdditive,\r\n        binding = this.binding;\r\n      this.cumulativeWeight = 0;\r\n      this.cumulativeWeightAdditive = 0;\r\n\r\n      if (weight < 1) {\r\n        // accuN := accuN + original * ( 1 - cumulativeWeight )\r\n        const originalValueOffset = stride * this._origIndex;\r\n\r\n        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\r\n      }\r\n\r\n      if (weightAdditive > 0) {\r\n        // accuN := accuN + additive accuN\r\n        this._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\r\n      }\r\n\r\n      for (let i = stride, e = stride + stride; i !== e; ++i) {\r\n        if (buffer[i] !== buffer[i + stride]) {\r\n          // value has changed -> update scene graph\r\n          binding.setValue(buffer, offset);\r\n          break;\r\n        }\r\n      }\r\n    } // remember the state of the bound property and copy it to both accus\r\n\r\n    saveOriginalState() {\r\n      const binding = this.binding;\r\n      const buffer = this.buffer,\r\n        stride = this.valueSize,\r\n        originalValueOffset = stride * this._origIndex;\r\n      binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\r\n\r\n      for (let i = stride, e = originalValueOffset; i !== e; ++i) {\r\n        buffer[i] = buffer[originalValueOffset + (i % stride)];\r\n      } // Add to identity for additive\r\n\r\n      this._setIdentity();\r\n\r\n      this.cumulativeWeight = 0;\r\n      this.cumulativeWeightAdditive = 0;\r\n    } // apply the state previously taken via 'saveOriginalState' to the binding\r\n\r\n    restoreOriginalState() {\r\n      const originalValueOffset = this.valueSize * 3;\r\n      this.binding.setValue(this.buffer, originalValueOffset);\r\n    }\r\n\r\n    _setAdditiveIdentityNumeric() {\r\n      const startIndex = this._addIndex * this.valueSize;\r\n      const endIndex = startIndex + this.valueSize;\r\n\r\n      for (let i = startIndex; i < endIndex; i++) {\r\n        this.buffer[i] = 0;\r\n      }\r\n    }\r\n\r\n    _setAdditiveIdentityQuaternion() {\r\n      this._setAdditiveIdentityNumeric();\r\n\r\n      this.buffer[this._addIndex * this.valueSize + 3] = 1;\r\n    }\r\n\r\n    _setAdditiveIdentityOther() {\r\n      const startIndex = this._origIndex * this.valueSize;\r\n      const targetIndex = this._addIndex * this.valueSize;\r\n\r\n      for (let i = 0; i < this.valueSize; i++) {\r\n        this.buffer[targetIndex + i] = this.buffer[startIndex + i];\r\n      }\r\n    } // mix functions\r\n\r\n    _select(buffer, dstOffset, srcOffset, t, stride) {\r\n      if (t >= 0.5) {\r\n        for (let i = 0; i !== stride; ++i) {\r\n          buffer[dstOffset + i] = buffer[srcOffset + i];\r\n        }\r\n      }\r\n    }\r\n\r\n    _slerp(buffer, dstOffset, srcOffset, t) {\r\n      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\r\n    }\r\n\r\n    _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\r\n      const workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\r\n\r\n      Quaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\r\n\r\n      Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\r\n    }\r\n\r\n    _lerp(buffer, dstOffset, srcOffset, t, stride) {\r\n      const s = 1 - t;\r\n\r\n      for (let i = 0; i !== stride; ++i) {\r\n        const j = dstOffset + i;\r\n        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\r\n      }\r\n    }\r\n\r\n    _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\r\n      for (let i = 0; i !== stride; ++i) {\r\n        const j = dstOffset + i;\r\n        buffer[j] = buffer[j] + buffer[srcOffset + i] * t;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Characters [].:/ are reserved for track binding syntax.\r\n  const _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\n\r\n  const _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n  // only latin characters, and the unicode \\p{L} is not yet supported. So\r\n  // instead, we exclude reserved characters and match everything else.\r\n\r\n  const _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\r\n\r\n  const _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n  // be matched to parse the rest of the track name.\r\n\r\n  const _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\n\r\n  const _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\r\n  // characters. Accessor may contain any character except closing bracket.\r\n\r\n  const _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\r\n  // contain any non-bracket characters.\r\n\r\n  const _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\r\n\r\n  const _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\r\n\r\n  const _supportedObjectNames = ['material', 'materials', 'bones'];\r\n\r\n  class Composite {\r\n    constructor(targetGroup, path, optionalParsedPath) {\r\n      const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\r\n      this._targetGroup = targetGroup;\r\n      this._bindings = targetGroup.subscribe_(path, parsedPath);\r\n    }\r\n\r\n    getValue(array, offset) {\r\n      this.bind(); // bind all binding\r\n\r\n      const firstValidIndex = this._targetGroup.nCachedObjects_,\r\n        binding = this._bindings[firstValidIndex]; // and only call .getValue on the first\r\n\r\n      if (binding !== undefined) binding.getValue(array, offset);\r\n    }\r\n\r\n    setValue(array, offset) {\r\n      const bindings = this._bindings;\r\n\r\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\r\n        bindings[i].setValue(array, offset);\r\n      }\r\n    }\r\n\r\n    bind() {\r\n      const bindings = this._bindings;\r\n\r\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\r\n        bindings[i].bind();\r\n      }\r\n    }\r\n\r\n    unbind() {\r\n      const bindings = this._bindings;\r\n\r\n      for (let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\r\n        bindings[i].unbind();\r\n      }\r\n    }\r\n  } // Note: This class uses a State pattern on a per-method basis:\r\n  // 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n  // prototype version of these methods with one that represents\r\n  // the bound state. When the property is not found, the methods\r\n  // become no-ops.\r\n\r\n  class PropertyBinding {\r\n    constructor(rootNode, path, parsedPath) {\r\n      this.path = path;\r\n      this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\r\n      this.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\r\n      this.rootNode = rootNode; // initial state of these methods that calls 'bind'\r\n\r\n      this.getValue = this._getValue_unbound;\r\n      this.setValue = this._setValue_unbound;\r\n    }\r\n\r\n    static create(root, path, parsedPath) {\r\n      if (!(root && root.isAnimationObjectGroup)) {\r\n        return new PropertyBinding(root, path, parsedPath);\r\n      } else {\r\n        return new PropertyBinding.Composite(root, path, parsedPath);\r\n      }\r\n    }\r\n    /**\r\n     * Replaces spaces with underscores and removes unsupported characters from\r\n     * node names, to ensure compatibility with parseTrackName().\r\n     *\r\n     * @param {string} name Node name to be sanitized.\r\n     * @return {string}\r\n     */\r\n\r\n    static sanitizeNodeName(name) {\r\n      return name.replace(/\\s/g, '_').replace(_reservedRe, '');\r\n    }\r\n\r\n    static parseTrackName(trackName) {\r\n      const matches = _trackRe.exec(trackName);\r\n\r\n      if (!matches) {\r\n        throw new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\r\n      }\r\n\r\n      const results = {\r\n        // directoryName: matches[ 1 ], // (tschw) currently unused\r\n        nodeName: matches[2],\r\n        objectName: matches[3],\r\n        objectIndex: matches[4],\r\n        propertyName: matches[5],\r\n        // required\r\n        propertyIndex: matches[6],\r\n      };\r\n      const lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\r\n\r\n      if (lastDot !== undefined && lastDot !== -1) {\r\n        const objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\r\n        // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n        // 'bar' could be the objectName, or part of a nodeName (which can\r\n        // include '.' characters).\r\n\r\n        if (_supportedObjectNames.indexOf(objectName) !== -1) {\r\n          results.nodeName = results.nodeName.substring(0, lastDot);\r\n          results.objectName = objectName;\r\n        }\r\n      }\r\n\r\n      if (results.propertyName === null || results.propertyName.length === 0) {\r\n        throw new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\r\n      }\r\n\r\n      return results;\r\n    }\r\n\r\n    static findNode(root, nodeName) {\r\n      if (\r\n        !nodeName ||\r\n        nodeName === '' ||\r\n        nodeName === '.' ||\r\n        nodeName === -1 ||\r\n        nodeName === root.name ||\r\n        nodeName === root.uuid\r\n      ) {\r\n        return root;\r\n      } // search into skeleton bones.\r\n\r\n      if (root.skeleton) {\r\n        const bone = root.skeleton.getBoneByName(nodeName);\r\n\r\n        if (bone !== undefined) {\r\n          return bone;\r\n        }\r\n      } // search into node subtree.\r\n\r\n      if (root.children) {\r\n        const searchNodeSubtree = function (children) {\r\n          for (let i = 0; i < children.length; i++) {\r\n            const childNode = children[i];\r\n\r\n            if (childNode.name === nodeName || childNode.uuid === nodeName) {\r\n              return childNode;\r\n            }\r\n\r\n            const result = searchNodeSubtree(childNode.children);\r\n            if (result) return result;\r\n          }\r\n\r\n          return null;\r\n        };\r\n\r\n        const subTreeNode = searchNodeSubtree(root.children);\r\n\r\n        if (subTreeNode) {\r\n          return subTreeNode;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    } // these are used to \"bind\" a nonexistent property\r\n\r\n    _getValue_unavailable() {}\r\n\r\n    _setValue_unavailable() {} // Getters\r\n\r\n    _getValue_direct(buffer, offset) {\r\n      buffer[offset] = this.node[this.propertyName];\r\n    }\r\n\r\n    _getValue_array(buffer, offset) {\r\n      const source = this.resolvedProperty;\r\n\r\n      for (let i = 0, n = source.length; i !== n; ++i) {\r\n        buffer[offset++] = source[i];\r\n      }\r\n    }\r\n\r\n    _getValue_arrayElement(buffer, offset) {\r\n      buffer[offset] = this.resolvedProperty[this.propertyIndex];\r\n    }\r\n\r\n    _getValue_toArray(buffer, offset) {\r\n      this.resolvedProperty.toArray(buffer, offset);\r\n    } // Direct\r\n\r\n    _setValue_direct(buffer, offset) {\r\n      this.targetObject[this.propertyName] = buffer[offset];\r\n    }\r\n\r\n    _setValue_direct_setNeedsUpdate(buffer, offset) {\r\n      this.targetObject[this.propertyName] = buffer[offset];\r\n      this.targetObject.needsUpdate = true;\r\n    }\r\n\r\n    _setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\r\n      this.targetObject[this.propertyName] = buffer[offset];\r\n      this.targetObject.matrixWorldNeedsUpdate = true;\r\n    } // EntireArray\r\n\r\n    _setValue_array(buffer, offset) {\r\n      const dest = this.resolvedProperty;\r\n\r\n      for (let i = 0, n = dest.length; i !== n; ++i) {\r\n        dest[i] = buffer[offset++];\r\n      }\r\n    }\r\n\r\n    _setValue_array_setNeedsUpdate(buffer, offset) {\r\n      const dest = this.resolvedProperty;\r\n\r\n      for (let i = 0, n = dest.length; i !== n; ++i) {\r\n        dest[i] = buffer[offset++];\r\n      }\r\n\r\n      this.targetObject.needsUpdate = true;\r\n    }\r\n\r\n    _setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\r\n      const dest = this.resolvedProperty;\r\n\r\n      for (let i = 0, n = dest.length; i !== n; ++i) {\r\n        dest[i] = buffer[offset++];\r\n      }\r\n\r\n      this.targetObject.matrixWorldNeedsUpdate = true;\r\n    } // ArrayElement\r\n\r\n    _setValue_arrayElement(buffer, offset) {\r\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\r\n    }\r\n\r\n    _setValue_arrayElement_setNeedsUpdate(buffer, offset) {\r\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\r\n      this.targetObject.needsUpdate = true;\r\n    }\r\n\r\n    _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\r\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\r\n      this.targetObject.matrixWorldNeedsUpdate = true;\r\n    } // HasToFromArray\r\n\r\n    _setValue_fromArray(buffer, offset) {\r\n      this.resolvedProperty.fromArray(buffer, offset);\r\n    }\r\n\r\n    _setValue_fromArray_setNeedsUpdate(buffer, offset) {\r\n      this.resolvedProperty.fromArray(buffer, offset);\r\n      this.targetObject.needsUpdate = true;\r\n    }\r\n\r\n    _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\r\n      this.resolvedProperty.fromArray(buffer, offset);\r\n      this.targetObject.matrixWorldNeedsUpdate = true;\r\n    }\r\n\r\n    _getValue_unbound(targetArray, offset) {\r\n      this.bind();\r\n      this.getValue(targetArray, offset);\r\n    }\r\n\r\n    _setValue_unbound(sourceArray, offset) {\r\n      this.bind();\r\n      this.setValue(sourceArray, offset);\r\n    } // create getter / setter pair for a property in the scene graph\r\n\r\n    bind() {\r\n      let targetObject = this.node;\r\n      const parsedPath = this.parsedPath;\r\n      const objectName = parsedPath.objectName;\r\n      const propertyName = parsedPath.propertyName;\r\n      let propertyIndex = parsedPath.propertyIndex;\r\n\r\n      if (!targetObject) {\r\n        targetObject =\r\n          PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\r\n        this.node = targetObject;\r\n      } // set fail state so we can just 'return' on error\r\n\r\n      this.getValue = this._getValue_unavailable;\r\n      this.setValue = this._setValue_unavailable; // ensure there is a value node\r\n\r\n      if (!targetObject) {\r\n        console.error(\r\n          'THREE.PropertyBinding: Trying to update node for track: ' +\r\n            this.path +\r\n            \" but it wasn't found.\",\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (objectName) {\r\n        let objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\r\n        switch (objectName) {\r\n          case 'materials':\r\n            if (!targetObject.material) {\r\n              console.error(\r\n                'THREE.PropertyBinding: Can not bind to material as node does not have a material.',\r\n                this,\r\n              );\r\n              return;\r\n            }\r\n\r\n            if (!targetObject.material.materials) {\r\n              console.error(\r\n                'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',\r\n                this,\r\n              );\r\n              return;\r\n            }\r\n\r\n            targetObject = targetObject.material.materials;\r\n            break;\r\n\r\n          case 'bones':\r\n            if (!targetObject.skeleton) {\r\n              console.error(\r\n                'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',\r\n                this,\r\n              );\r\n              return;\r\n            } // potential future optimization: skip this if propertyIndex is already an integer\r\n            // and convert the integer string to a true integer.\r\n\r\n            targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\r\n\r\n            for (let i = 0; i < targetObject.length; i++) {\r\n              if (targetObject[i].name === objectIndex) {\r\n                objectIndex = i;\r\n                break;\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          default:\r\n            if (targetObject[objectName] === undefined) {\r\n              console.error(\r\n                'THREE.PropertyBinding: Can not bind to objectName of node undefined.',\r\n                this,\r\n              );\r\n              return;\r\n            }\r\n\r\n            targetObject = targetObject[objectName];\r\n        }\r\n\r\n        if (objectIndex !== undefined) {\r\n          if (targetObject[objectIndex] === undefined) {\r\n            console.error(\r\n              'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',\r\n              this,\r\n              targetObject,\r\n            );\r\n            return;\r\n          }\r\n\r\n          targetObject = targetObject[objectIndex];\r\n        }\r\n      } // resolve property\r\n\r\n      const nodeProperty = targetObject[propertyName];\r\n\r\n      if (nodeProperty === undefined) {\r\n        const nodeName = parsedPath.nodeName;\r\n        console.error(\r\n          'THREE.PropertyBinding: Trying to update property for track: ' +\r\n            nodeName +\r\n            '.' +\r\n            propertyName +\r\n            \" but it wasn't found.\",\r\n          targetObject,\r\n        );\r\n        return;\r\n      } // determine versioning scheme\r\n\r\n      let versioning = this.Versioning.None;\r\n      this.targetObject = targetObject;\r\n\r\n      if (targetObject.needsUpdate !== undefined) {\r\n        // material\r\n        versioning = this.Versioning.NeedsUpdate;\r\n      } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\r\n        // node transform\r\n        versioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n      } // determine how the property gets bound\r\n\r\n      let bindingType = this.BindingType.Direct;\r\n\r\n      if (propertyIndex !== undefined) {\r\n        // access a sub element of the property array (only primitives are supported right now)\r\n        if (propertyName === 'morphTargetInfluences') {\r\n          // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n          // support resolving morphTarget names into indices.\r\n          if (!targetObject.geometry) {\r\n            console.error(\r\n              'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',\r\n              this,\r\n            );\r\n            return;\r\n          }\r\n\r\n          if (targetObject.geometry.isBufferGeometry) {\r\n            if (!targetObject.geometry.morphAttributes) {\r\n              console.error(\r\n                'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',\r\n                this,\r\n              );\r\n              return;\r\n            }\r\n\r\n            if (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\r\n              propertyIndex = targetObject.morphTargetDictionary[propertyIndex];\r\n            }\r\n          } else {\r\n            console.error(\r\n              'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.',\r\n              this,\r\n            );\r\n            return;\r\n          }\r\n        }\r\n\r\n        bindingType = this.BindingType.ArrayElement;\r\n        this.resolvedProperty = nodeProperty;\r\n        this.propertyIndex = propertyIndex;\r\n      } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\r\n        // must use copy for Object3D.Euler/Quaternion\r\n        bindingType = this.BindingType.HasFromToArray;\r\n        this.resolvedProperty = nodeProperty;\r\n      } else if (Array.isArray(nodeProperty)) {\r\n        bindingType = this.BindingType.EntireArray;\r\n        this.resolvedProperty = nodeProperty;\r\n      } else {\r\n        this.propertyName = propertyName;\r\n      } // select getter / setter\r\n\r\n      this.getValue = this.GetterByBindingType[bindingType];\r\n      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\r\n    }\r\n\r\n    unbind() {\r\n      this.node = null; // back to the prototype version of getValue / setValue\r\n      // note: avoiding to mutate the shape of 'this' via 'delete'\r\n\r\n      this.getValue = this._getValue_unbound;\r\n      this.setValue = this._setValue_unbound;\r\n    }\r\n  }\r\n\r\n  PropertyBinding.Composite = Composite;\r\n  PropertyBinding.prototype.BindingType = {\r\n    Direct: 0,\r\n    EntireArray: 1,\r\n    ArrayElement: 2,\r\n    HasFromToArray: 3,\r\n  };\r\n  PropertyBinding.prototype.Versioning = {\r\n    None: 0,\r\n    NeedsUpdate: 1,\r\n    MatrixWorldNeedsUpdate: 2,\r\n  };\r\n  PropertyBinding.prototype.GetterByBindingType = [\r\n    PropertyBinding.prototype._getValue_direct,\r\n    PropertyBinding.prototype._getValue_array,\r\n    PropertyBinding.prototype._getValue_arrayElement,\r\n    PropertyBinding.prototype._getValue_toArray,\r\n  ];\r\n  PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\r\n    [\r\n      // Direct\r\n      PropertyBinding.prototype._setValue_direct,\r\n      PropertyBinding.prototype._setValue_direct_setNeedsUpdate,\r\n      PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\r\n    ],\r\n    [\r\n      // EntireArray\r\n      PropertyBinding.prototype._setValue_array,\r\n      PropertyBinding.prototype._setValue_array_setNeedsUpdate,\r\n      PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\r\n    ],\r\n    [\r\n      // ArrayElement\r\n      PropertyBinding.prototype._setValue_arrayElement,\r\n      PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\r\n      PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\r\n    ],\r\n    [\r\n      // HasToFromArray\r\n      PropertyBinding.prototype._setValue_fromArray,\r\n      PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\r\n      PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\r\n    ],\r\n  ];\r\n\r\n  /**\r\n   *\r\n   * A group of objects that receives a shared animation state.\r\n   *\r\n   * Usage:\r\n   *\r\n   *\t- Add objects you would otherwise pass as 'root' to the\r\n   *\t\tconstructor or the .clipAction method of AnimationMixer.\r\n   *\r\n   *\t- Instead pass this object as 'root'.\r\n   *\r\n   *\t- You can also add and remove objects later when the mixer\r\n   *\t\tis running.\r\n   *\r\n   * Note:\r\n   *\r\n   *\t\tObjects of this class appear as one object to the mixer,\r\n   *\t\tso cache control of the individual objects must be done\r\n   *\t\ton the group.\r\n   *\r\n   * Limitation:\r\n   *\r\n   *\t- The animated properties must be compatible among the\r\n   *\t\tall objects in the group.\r\n   *\r\n   *\t- A single property can either be controlled through a\r\n   *\t\ttarget group or directly, but not both.\r\n   */\r\n\r\n  class AnimationObjectGroup {\r\n    constructor() {\r\n      this.uuid = generateUUID(); // cached objects followed by the active ones\r\n\r\n      this._objects = Array.prototype.slice.call(arguments);\r\n      this.nCachedObjects_ = 0; // threshold\r\n      // note: read by PropertyBinding.Composite\r\n\r\n      const indices = {};\r\n      this._indicesByUUID = indices; // for bookkeeping\r\n\r\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\r\n        indices[arguments[i].uuid] = i;\r\n      }\r\n\r\n      this._paths = []; // inside: string\r\n\r\n      this._parsedPaths = []; // inside: { we don't care, here }\r\n\r\n      this._bindings = []; // inside: Array< PropertyBinding >\r\n\r\n      this._bindingsIndicesByPath = {}; // inside: indices in these arrays\r\n\r\n      const scope = this;\r\n      this.stats = {\r\n        objects: {\r\n          get total() {\r\n            return scope._objects.length;\r\n          },\r\n\r\n          get inUse() {\r\n            return this.total - scope.nCachedObjects_;\r\n          },\r\n        },\r\n\r\n        get bindingsPerObject() {\r\n          return scope._bindings.length;\r\n        },\r\n      };\r\n    }\r\n\r\n    add() {\r\n      const objects = this._objects,\r\n        indicesByUUID = this._indicesByUUID,\r\n        paths = this._paths,\r\n        parsedPaths = this._parsedPaths,\r\n        bindings = this._bindings,\r\n        nBindings = bindings.length;\r\n      let knownObject = undefined,\r\n        nObjects = objects.length,\r\n        nCachedObjects = this.nCachedObjects_;\r\n\r\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\r\n        const object = arguments[i],\r\n          uuid = object.uuid;\r\n        let index = indicesByUUID[uuid];\r\n\r\n        if (index === undefined) {\r\n          // unknown object -> add it to the ACTIVE region\r\n          index = nObjects++;\r\n          indicesByUUID[uuid] = index;\r\n          objects.push(object); // accounting is done, now do the same for all bindings\r\n\r\n          for (let j = 0, m = nBindings; j !== m; ++j) {\r\n            bindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\r\n          }\r\n        } else if (index < nCachedObjects) {\r\n          knownObject = objects[index]; // move existing object to the ACTIVE region\r\n\r\n          const firstActiveIndex = --nCachedObjects,\r\n            lastCachedObject = objects[firstActiveIndex];\r\n          indicesByUUID[lastCachedObject.uuid] = index;\r\n          objects[index] = lastCachedObject;\r\n          indicesByUUID[uuid] = firstActiveIndex;\r\n          objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\r\n\r\n          for (let j = 0, m = nBindings; j !== m; ++j) {\r\n            const bindingsForPath = bindings[j],\r\n              lastCached = bindingsForPath[firstActiveIndex];\r\n            let binding = bindingsForPath[index];\r\n            bindingsForPath[index] = lastCached;\r\n\r\n            if (binding === undefined) {\r\n              // since we do not bother to create new bindings\r\n              // for objects that are cached, the binding may\r\n              // or may not exist\r\n              binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\r\n            }\r\n\r\n            bindingsForPath[firstActiveIndex] = binding;\r\n          }\r\n        } else if (objects[index] !== knownObject) {\r\n          console.error(\r\n            'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n              'detected. Clean the caches or recreate your infrastructure when reloading scenes.',\r\n          );\r\n        } // else the object is already where we want it to be\r\n      } // for arguments\r\n\r\n      this.nCachedObjects_ = nCachedObjects;\r\n    }\r\n\r\n    remove() {\r\n      const objects = this._objects,\r\n        indicesByUUID = this._indicesByUUID,\r\n        bindings = this._bindings,\r\n        nBindings = bindings.length;\r\n      let nCachedObjects = this.nCachedObjects_;\r\n\r\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\r\n        const object = arguments[i],\r\n          uuid = object.uuid,\r\n          index = indicesByUUID[uuid];\r\n\r\n        if (index !== undefined && index >= nCachedObjects) {\r\n          // move existing object into the CACHED region\r\n          const lastCachedIndex = nCachedObjects++,\r\n            firstActiveObject = objects[lastCachedIndex];\r\n          indicesByUUID[firstActiveObject.uuid] = index;\r\n          objects[index] = firstActiveObject;\r\n          indicesByUUID[uuid] = lastCachedIndex;\r\n          objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\r\n\r\n          for (let j = 0, m = nBindings; j !== m; ++j) {\r\n            const bindingsForPath = bindings[j],\r\n              firstActive = bindingsForPath[lastCachedIndex],\r\n              binding = bindingsForPath[index];\r\n            bindingsForPath[index] = firstActive;\r\n            bindingsForPath[lastCachedIndex] = binding;\r\n          }\r\n        }\r\n      } // for arguments\r\n\r\n      this.nCachedObjects_ = nCachedObjects;\r\n    } // remove & forget\r\n\r\n    uncache() {\r\n      const objects = this._objects,\r\n        indicesByUUID = this._indicesByUUID,\r\n        bindings = this._bindings,\r\n        nBindings = bindings.length;\r\n      let nCachedObjects = this.nCachedObjects_,\r\n        nObjects = objects.length;\r\n\r\n      for (let i = 0, n = arguments.length; i !== n; ++i) {\r\n        const object = arguments[i],\r\n          uuid = object.uuid,\r\n          index = indicesByUUID[uuid];\r\n\r\n        if (index !== undefined) {\r\n          delete indicesByUUID[uuid];\r\n\r\n          if (index < nCachedObjects) {\r\n            // object is cached, shrink the CACHED region\r\n            const firstActiveIndex = --nCachedObjects,\r\n              lastCachedObject = objects[firstActiveIndex],\r\n              lastIndex = --nObjects,\r\n              lastObject = objects[lastIndex]; // last cached object takes this object's place\r\n\r\n            indicesByUUID[lastCachedObject.uuid] = index;\r\n            objects[index] = lastCachedObject; // last object goes to the activated slot and pop\r\n\r\n            indicesByUUID[lastObject.uuid] = firstActiveIndex;\r\n            objects[firstActiveIndex] = lastObject;\r\n            objects.pop(); // accounting is done, now do the same for all bindings\r\n\r\n            for (let j = 0, m = nBindings; j !== m; ++j) {\r\n              const bindingsForPath = bindings[j],\r\n                lastCached = bindingsForPath[firstActiveIndex],\r\n                last = bindingsForPath[lastIndex];\r\n              bindingsForPath[index] = lastCached;\r\n              bindingsForPath[firstActiveIndex] = last;\r\n              bindingsForPath.pop();\r\n            }\r\n          } else {\r\n            // object is active, just swap with the last and pop\r\n            const lastIndex = --nObjects,\r\n              lastObject = objects[lastIndex];\r\n\r\n            if (lastIndex > 0) {\r\n              indicesByUUID[lastObject.uuid] = index;\r\n            }\r\n\r\n            objects[index] = lastObject;\r\n            objects.pop(); // accounting is done, now do the same for all bindings\r\n\r\n            for (let j = 0, m = nBindings; j !== m; ++j) {\r\n              const bindingsForPath = bindings[j];\r\n              bindingsForPath[index] = bindingsForPath[lastIndex];\r\n              bindingsForPath.pop();\r\n            }\r\n          } // cached or active\r\n        } // if object is known\r\n      } // for arguments\r\n\r\n      this.nCachedObjects_ = nCachedObjects;\r\n    } // Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n    subscribe_(path, parsedPath) {\r\n      // returns an array of bindings for the given path that is changed\r\n      // according to the contained objects in the group\r\n      const indicesByPath = this._bindingsIndicesByPath;\r\n      let index = indicesByPath[path];\r\n      const bindings = this._bindings;\r\n      if (index !== undefined) return bindings[index];\r\n      const paths = this._paths,\r\n        parsedPaths = this._parsedPaths,\r\n        objects = this._objects,\r\n        nObjects = objects.length,\r\n        nCachedObjects = this.nCachedObjects_,\r\n        bindingsForPath = new Array(nObjects);\r\n      index = bindings.length;\r\n      indicesByPath[path] = index;\r\n      paths.push(path);\r\n      parsedPaths.push(parsedPath);\r\n      bindings.push(bindingsForPath);\r\n\r\n      for (let i = nCachedObjects, n = objects.length; i !== n; ++i) {\r\n        const object = objects[i];\r\n        bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\r\n      }\r\n\r\n      return bindingsForPath;\r\n    }\r\n\r\n    unsubscribe_(path) {\r\n      // tells the group to forget about a property path and no longer\r\n      // update the array previously obtained with 'subscribe_'\r\n      const indicesByPath = this._bindingsIndicesByPath,\r\n        index = indicesByPath[path];\r\n\r\n      if (index !== undefined) {\r\n        const paths = this._paths,\r\n          parsedPaths = this._parsedPaths,\r\n          bindings = this._bindings,\r\n          lastBindingsIndex = bindings.length - 1,\r\n          lastBindings = bindings[lastBindingsIndex],\r\n          lastBindingsPath = path[lastBindingsIndex];\r\n        indicesByPath[lastBindingsPath] = index;\r\n        bindings[index] = lastBindings;\r\n        bindings.pop();\r\n        parsedPaths[index] = parsedPaths[lastBindingsIndex];\r\n        parsedPaths.pop();\r\n        paths[index] = paths[lastBindingsIndex];\r\n        paths.pop();\r\n      }\r\n    }\r\n  }\r\n\r\n  AnimationObjectGroup.prototype.isAnimationObjectGroup = true;\r\n\r\n  class AnimationAction {\r\n    constructor(mixer, clip, localRoot = null, blendMode = clip.blendMode) {\r\n      this._mixer = mixer;\r\n      this._clip = clip;\r\n      this._localRoot = localRoot;\r\n      this.blendMode = blendMode;\r\n      const tracks = clip.tracks,\r\n        nTracks = tracks.length,\r\n        interpolants = new Array(nTracks);\r\n      const interpolantSettings = {\r\n        endingStart: ZeroCurvatureEnding,\r\n        endingEnd: ZeroCurvatureEnding,\r\n      };\r\n\r\n      for (let i = 0; i !== nTracks; ++i) {\r\n        const interpolant = tracks[i].createInterpolant(null);\r\n        interpolants[i] = interpolant;\r\n        interpolant.settings = interpolantSettings;\r\n      }\r\n\r\n      this._interpolantSettings = interpolantSettings;\r\n      this._interpolants = interpolants; // bound by the mixer\r\n      // inside: PropertyMixer (managed by the mixer)\r\n\r\n      this._propertyBindings = new Array(nTracks);\r\n      this._cacheIndex = null; // for the memory manager\r\n\r\n      this._byClipCacheIndex = null; // for the memory manager\r\n\r\n      this._timeScaleInterpolant = null;\r\n      this._weightInterpolant = null;\r\n      this.loop = LoopRepeat;\r\n      this._loopCount = -1; // global mixer time when the action is to be started\r\n      // it's set back to 'null' upon start of the action\r\n\r\n      this._startTime = null; // scaled local time of the action\r\n      // gets clamped or wrapped to 0..clip.duration according to loop\r\n\r\n      this.time = 0;\r\n      this.timeScale = 1;\r\n      this._effectiveTimeScale = 1;\r\n      this.weight = 1;\r\n      this._effectiveWeight = 1;\r\n      this.repetitions = Infinity; // no. of repetitions when looping\r\n\r\n      this.paused = false; // true -> zero effective time scale\r\n\r\n      this.enabled = true; // false -> zero effective weight\r\n\r\n      this.clampWhenFinished = false; // keep feeding the last frame?\r\n\r\n      this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\r\n\r\n      this.zeroSlopeAtEnd = true; // clips for start, loop and end\r\n    } // State & Scheduling\r\n\r\n    play() {\r\n      this._mixer._activateAction(this);\r\n\r\n      return this;\r\n    }\r\n\r\n    stop() {\r\n      this._mixer._deactivateAction(this);\r\n\r\n      return this.reset();\r\n    }\r\n\r\n    reset() {\r\n      this.paused = false;\r\n      this.enabled = true;\r\n      this.time = 0; // restart clip\r\n\r\n      this._loopCount = -1; // forget previous loops\r\n\r\n      this._startTime = null; // forget scheduling\r\n\r\n      return this.stopFading().stopWarping();\r\n    }\r\n\r\n    isRunning() {\r\n      return (\r\n        this.enabled &&\r\n        !this.paused &&\r\n        this.timeScale !== 0 &&\r\n        this._startTime === null &&\r\n        this._mixer._isActiveAction(this)\r\n      );\r\n    } // return true when play has been called\r\n\r\n    isScheduled() {\r\n      return this._mixer._isActiveAction(this);\r\n    }\r\n\r\n    startAt(time) {\r\n      this._startTime = time;\r\n      return this;\r\n    }\r\n\r\n    setLoop(mode, repetitions) {\r\n      this.loop = mode;\r\n      this.repetitions = repetitions;\r\n      return this;\r\n    } // Weight\r\n    // set the weight stopping any scheduled fading\r\n    // although .enabled = false yields an effective weight of zero, this\r\n    // method does *not* change .enabled, because it would be confusing\r\n\r\n    setEffectiveWeight(weight) {\r\n      this.weight = weight; // note: same logic as when updated at runtime\r\n\r\n      this._effectiveWeight = this.enabled ? weight : 0;\r\n      return this.stopFading();\r\n    } // return the weight considering fading and .enabled\r\n\r\n    getEffectiveWeight() {\r\n      return this._effectiveWeight;\r\n    }\r\n\r\n    fadeIn(duration) {\r\n      return this._scheduleFading(duration, 0, 1);\r\n    }\r\n\r\n    fadeOut(duration) {\r\n      return this._scheduleFading(duration, 1, 0);\r\n    }\r\n\r\n    crossFadeFrom(fadeOutAction, duration, warp) {\r\n      fadeOutAction.fadeOut(duration);\r\n      this.fadeIn(duration);\r\n\r\n      if (warp) {\r\n        const fadeInDuration = this._clip.duration,\r\n          fadeOutDuration = fadeOutAction._clip.duration,\r\n          startEndRatio = fadeOutDuration / fadeInDuration,\r\n          endStartRatio = fadeInDuration / fadeOutDuration;\r\n        fadeOutAction.warp(1.0, startEndRatio, duration);\r\n        this.warp(endStartRatio, 1.0, duration);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    crossFadeTo(fadeInAction, duration, warp) {\r\n      return fadeInAction.crossFadeFrom(this, duration, warp);\r\n    }\r\n\r\n    stopFading() {\r\n      const weightInterpolant = this._weightInterpolant;\r\n\r\n      if (weightInterpolant !== null) {\r\n        this._weightInterpolant = null;\r\n\r\n        this._mixer._takeBackControlInterpolant(weightInterpolant);\r\n      }\r\n\r\n      return this;\r\n    } // Time Scale Control\r\n    // set the time scale stopping any scheduled warping\r\n    // although .paused = true yields an effective time scale of zero, this\r\n    // method does *not* change .paused, because it would be confusing\r\n\r\n    setEffectiveTimeScale(timeScale) {\r\n      this.timeScale = timeScale;\r\n      this._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n      return this.stopWarping();\r\n    } // return the time scale considering warping and .paused\r\n\r\n    getEffectiveTimeScale() {\r\n      return this._effectiveTimeScale;\r\n    }\r\n\r\n    setDuration(duration) {\r\n      this.timeScale = this._clip.duration / duration;\r\n      return this.stopWarping();\r\n    }\r\n\r\n    syncWith(action) {\r\n      this.time = action.time;\r\n      this.timeScale = action.timeScale;\r\n      return this.stopWarping();\r\n    }\r\n\r\n    halt(duration) {\r\n      return this.warp(this._effectiveTimeScale, 0, duration);\r\n    }\r\n\r\n    warp(startTimeScale, endTimeScale, duration) {\r\n      const mixer = this._mixer,\r\n        now = mixer.time,\r\n        timeScale = this.timeScale;\r\n      let interpolant = this._timeScaleInterpolant;\r\n\r\n      if (interpolant === null) {\r\n        interpolant = mixer._lendControlInterpolant();\r\n        this._timeScaleInterpolant = interpolant;\r\n      }\r\n\r\n      const times = interpolant.parameterPositions,\r\n        values = interpolant.sampleValues;\r\n      times[0] = now;\r\n      times[1] = now + duration;\r\n      values[0] = startTimeScale / timeScale;\r\n      values[1] = endTimeScale / timeScale;\r\n      return this;\r\n    }\r\n\r\n    stopWarping() {\r\n      const timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n      if (timeScaleInterpolant !== null) {\r\n        this._timeScaleInterpolant = null;\r\n\r\n        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\r\n      }\r\n\r\n      return this;\r\n    } // Object Accessors\r\n\r\n    getMixer() {\r\n      return this._mixer;\r\n    }\r\n\r\n    getClip() {\r\n      return this._clip;\r\n    }\r\n\r\n    getRoot() {\r\n      return this._localRoot || this._mixer._root;\r\n    } // Interna\r\n\r\n    _update(time, deltaTime, timeDirection, accuIndex) {\r\n      // called by the mixer\r\n      if (!this.enabled) {\r\n        // call ._updateWeight() to update ._effectiveWeight\r\n        this._updateWeight(time);\r\n\r\n        return;\r\n      }\r\n\r\n      const startTime = this._startTime;\r\n\r\n      if (startTime !== null) {\r\n        // check for scheduled start of action\r\n        const timeRunning = (time - startTime) * timeDirection;\r\n\r\n        if (timeRunning < 0 || timeDirection === 0) {\r\n          return; // yet to come / don't decide when delta = 0\r\n        } // start\r\n\r\n        this._startTime = null; // unschedule\r\n\r\n        deltaTime = timeDirection * timeRunning;\r\n      } // apply time scale and advance time\r\n\r\n      deltaTime *= this._updateTimeScale(time);\r\n\r\n      const clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\r\n      // an effective weight of 0\r\n\r\n      const weight = this._updateWeight(time);\r\n\r\n      if (weight > 0) {\r\n        const interpolants = this._interpolants;\r\n        const propertyMixers = this._propertyBindings;\r\n\r\n        switch (this.blendMode) {\r\n          case AdditiveAnimationBlendMode:\r\n            for (let j = 0, m = interpolants.length; j !== m; ++j) {\r\n              interpolants[j].evaluate(clipTime);\r\n              propertyMixers[j].accumulateAdditive(weight);\r\n            }\r\n\r\n            break;\r\n\r\n          case NormalAnimationBlendMode:\r\n          default:\r\n            for (let j = 0, m = interpolants.length; j !== m; ++j) {\r\n              interpolants[j].evaluate(clipTime);\r\n              propertyMixers[j].accumulate(accuIndex, weight);\r\n            }\r\n        }\r\n      }\r\n    }\r\n\r\n    _updateWeight(time) {\r\n      let weight = 0;\r\n\r\n      if (this.enabled) {\r\n        weight = this.weight;\r\n        const interpolant = this._weightInterpolant;\r\n\r\n        if (interpolant !== null) {\r\n          const interpolantValue = interpolant.evaluate(time)[0];\r\n          weight *= interpolantValue;\r\n\r\n          if (time > interpolant.parameterPositions[1]) {\r\n            this.stopFading();\r\n\r\n            if (interpolantValue === 0) {\r\n              // faded out, disable\r\n              this.enabled = false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this._effectiveWeight = weight;\r\n      return weight;\r\n    }\r\n\r\n    _updateTimeScale(time) {\r\n      let timeScale = 0;\r\n\r\n      if (!this.paused) {\r\n        timeScale = this.timeScale;\r\n        const interpolant = this._timeScaleInterpolant;\r\n\r\n        if (interpolant !== null) {\r\n          const interpolantValue = interpolant.evaluate(time)[0];\r\n          timeScale *= interpolantValue;\r\n\r\n          if (time > interpolant.parameterPositions[1]) {\r\n            this.stopWarping();\r\n\r\n            if (timeScale === 0) {\r\n              // motion has halted, pause\r\n              this.paused = true;\r\n            } else {\r\n              // warp done - apply final time scale\r\n              this.timeScale = timeScale;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this._effectiveTimeScale = timeScale;\r\n      return timeScale;\r\n    }\r\n\r\n    _updateTime(deltaTime) {\r\n      const duration = this._clip.duration;\r\n      const loop = this.loop;\r\n      let time = this.time + deltaTime;\r\n      let loopCount = this._loopCount;\r\n      const pingPong = loop === LoopPingPong;\r\n\r\n      if (deltaTime === 0) {\r\n        if (loopCount === -1) return time;\r\n        return pingPong && (loopCount & 1) === 1 ? duration - time : time;\r\n      }\r\n\r\n      if (loop === LoopOnce) {\r\n        if (loopCount === -1) {\r\n          // just started\r\n          this._loopCount = 0;\r\n\r\n          this._setEndings(true, true, false);\r\n        }\r\n\r\n        handle_stop: {\r\n          if (time >= duration) {\r\n            time = duration;\r\n          } else if (time < 0) {\r\n            time = 0;\r\n          } else {\r\n            this.time = time;\r\n            break handle_stop;\r\n          }\r\n\r\n          if (this.clampWhenFinished) this.paused = true;\r\n          else this.enabled = false;\r\n          this.time = time;\r\n\r\n          this._mixer.dispatchEvent({\r\n            type: 'finished',\r\n            action: this,\r\n            direction: deltaTime < 0 ? -1 : 1,\r\n          });\r\n        }\r\n      } else {\r\n        // repetitive Repeat or PingPong\r\n        if (loopCount === -1) {\r\n          // just started\r\n          if (deltaTime >= 0) {\r\n            loopCount = 0;\r\n\r\n            this._setEndings(true, this.repetitions === 0, pingPong);\r\n          } else {\r\n            // when looping in reverse direction, the initial\r\n            // transition through zero counts as a repetition,\r\n            // so leave loopCount at -1\r\n            this._setEndings(this.repetitions === 0, true, pingPong);\r\n          }\r\n        }\r\n\r\n        if (time >= duration || time < 0) {\r\n          // wrap around\r\n          const loopDelta = Math.floor(time / duration); // signed\r\n\r\n          time -= duration * loopDelta;\r\n          loopCount += Math.abs(loopDelta);\r\n          const pending = this.repetitions - loopCount;\r\n\r\n          if (pending <= 0) {\r\n            // have to stop (switch state, clamp time, fire event)\r\n            if (this.clampWhenFinished) this.paused = true;\r\n            else this.enabled = false;\r\n            time = deltaTime > 0 ? duration : 0;\r\n            this.time = time;\r\n\r\n            this._mixer.dispatchEvent({\r\n              type: 'finished',\r\n              action: this,\r\n              direction: deltaTime > 0 ? 1 : -1,\r\n            });\r\n          } else {\r\n            // keep running\r\n            if (pending === 1) {\r\n              // entering the last round\r\n              const atStart = deltaTime < 0;\r\n\r\n              this._setEndings(atStart, !atStart, pingPong);\r\n            } else {\r\n              this._setEndings(false, false, pingPong);\r\n            }\r\n\r\n            this._loopCount = loopCount;\r\n            this.time = time;\r\n\r\n            this._mixer.dispatchEvent({\r\n              type: 'loop',\r\n              action: this,\r\n              loopDelta: loopDelta,\r\n            });\r\n          }\r\n        } else {\r\n          this.time = time;\r\n        }\r\n\r\n        if (pingPong && (loopCount & 1) === 1) {\r\n          // invert time for the \"pong round\"\r\n          return duration - time;\r\n        }\r\n      }\r\n\r\n      return time;\r\n    }\r\n\r\n    _setEndings(atStart, atEnd, pingPong) {\r\n      const settings = this._interpolantSettings;\r\n\r\n      if (pingPong) {\r\n        settings.endingStart = ZeroSlopeEnding;\r\n        settings.endingEnd = ZeroSlopeEnding;\r\n      } else {\r\n        // assuming for LoopOnce atStart == atEnd == true\r\n        if (atStart) {\r\n          settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n        } else {\r\n          settings.endingStart = WrapAroundEnding;\r\n        }\r\n\r\n        if (atEnd) {\r\n          settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n        } else {\r\n          settings.endingEnd = WrapAroundEnding;\r\n        }\r\n      }\r\n    }\r\n\r\n    _scheduleFading(duration, weightNow, weightThen) {\r\n      const mixer = this._mixer,\r\n        now = mixer.time;\r\n      let interpolant = this._weightInterpolant;\r\n\r\n      if (interpolant === null) {\r\n        interpolant = mixer._lendControlInterpolant();\r\n        this._weightInterpolant = interpolant;\r\n      }\r\n\r\n      const times = interpolant.parameterPositions,\r\n        values = interpolant.sampleValues;\r\n      times[0] = now;\r\n      values[0] = weightNow;\r\n      times[1] = now + duration;\r\n      values[1] = weightThen;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class AnimationMixer extends EventDispatcher {\r\n    constructor(root) {\r\n      super();\r\n      this._root = root;\r\n\r\n      this._initMemoryManager();\r\n\r\n      this._accuIndex = 0;\r\n      this.time = 0;\r\n      this.timeScale = 1.0;\r\n    }\r\n\r\n    _bindAction(action, prototypeAction) {\r\n      const root = action._localRoot || this._root,\r\n        tracks = action._clip.tracks,\r\n        nTracks = tracks.length,\r\n        bindings = action._propertyBindings,\r\n        interpolants = action._interpolants,\r\n        rootUuid = root.uuid,\r\n        bindingsByRoot = this._bindingsByRootAndName;\r\n      let bindingsByName = bindingsByRoot[rootUuid];\r\n\r\n      if (bindingsByName === undefined) {\r\n        bindingsByName = {};\r\n        bindingsByRoot[rootUuid] = bindingsByName;\r\n      }\r\n\r\n      for (let i = 0; i !== nTracks; ++i) {\r\n        const track = tracks[i],\r\n          trackName = track.name;\r\n        let binding = bindingsByName[trackName];\r\n\r\n        if (binding !== undefined) {\r\n          bindings[i] = binding;\r\n        } else {\r\n          binding = bindings[i];\r\n\r\n          if (binding !== undefined) {\r\n            // existing binding, make sure the cache knows\r\n            if (binding._cacheIndex === null) {\r\n              ++binding.referenceCount;\r\n\r\n              this._addInactiveBinding(binding, rootUuid, trackName);\r\n            }\r\n\r\n            continue;\r\n          }\r\n\r\n          const path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\r\n          binding = new PropertyMixer(\r\n            PropertyBinding.create(root, trackName, path),\r\n            track.ValueTypeName,\r\n            track.getValueSize(),\r\n          );\r\n          ++binding.referenceCount;\r\n\r\n          this._addInactiveBinding(binding, rootUuid, trackName);\r\n\r\n          bindings[i] = binding;\r\n        }\r\n\r\n        interpolants[i].resultBuffer = binding.buffer;\r\n      }\r\n    }\r\n\r\n    _activateAction(action) {\r\n      if (!this._isActiveAction(action)) {\r\n        if (action._cacheIndex === null) {\r\n          // this action has been forgotten by the cache, but the user\r\n          // appears to be still using it -> rebind\r\n          const rootUuid = (action._localRoot || this._root).uuid,\r\n            clipUuid = action._clip.uuid,\r\n            actionsForClip = this._actionsByClip[clipUuid];\r\n\r\n          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\r\n\r\n          this._addInactiveAction(action, clipUuid, rootUuid);\r\n        }\r\n\r\n        const bindings = action._propertyBindings; // increment reference counts / sort out state\r\n\r\n        for (let i = 0, n = bindings.length; i !== n; ++i) {\r\n          const binding = bindings[i];\r\n\r\n          if (binding.useCount++ === 0) {\r\n            this._lendBinding(binding);\r\n\r\n            binding.saveOriginalState();\r\n          }\r\n        }\r\n\r\n        this._lendAction(action);\r\n      }\r\n    }\r\n\r\n    _deactivateAction(action) {\r\n      if (this._isActiveAction(action)) {\r\n        const bindings = action._propertyBindings; // decrement reference counts / sort out state\r\n\r\n        for (let i = 0, n = bindings.length; i !== n; ++i) {\r\n          const binding = bindings[i];\r\n\r\n          if (--binding.useCount === 0) {\r\n            binding.restoreOriginalState();\r\n\r\n            this._takeBackBinding(binding);\r\n          }\r\n        }\r\n\r\n        this._takeBackAction(action);\r\n      }\r\n    } // Memory manager\r\n\r\n    _initMemoryManager() {\r\n      this._actions = []; // 'nActiveActions' followed by inactive ones\r\n\r\n      this._nActiveActions = 0;\r\n      this._actionsByClip = {}; // inside:\r\n      // {\r\n      // \tknownActions: Array< AnimationAction > - used as prototypes\r\n      // \tactionByRoot: AnimationAction - lookup\r\n      // }\r\n\r\n      this._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\r\n      this._nActiveBindings = 0;\r\n      this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n      this._controlInterpolants = []; // same game as above\r\n\r\n      this._nActiveControlInterpolants = 0;\r\n      const scope = this;\r\n      this.stats = {\r\n        actions: {\r\n          get total() {\r\n            return scope._actions.length;\r\n          },\r\n\r\n          get inUse() {\r\n            return scope._nActiveActions;\r\n          },\r\n        },\r\n        bindings: {\r\n          get total() {\r\n            return scope._bindings.length;\r\n          },\r\n\r\n          get inUse() {\r\n            return scope._nActiveBindings;\r\n          },\r\n        },\r\n        controlInterpolants: {\r\n          get total() {\r\n            return scope._controlInterpolants.length;\r\n          },\r\n\r\n          get inUse() {\r\n            return scope._nActiveControlInterpolants;\r\n          },\r\n        },\r\n      };\r\n    } // Memory management for AnimationAction objects\r\n\r\n    _isActiveAction(action) {\r\n      const index = action._cacheIndex;\r\n      return index !== null && index < this._nActiveActions;\r\n    }\r\n\r\n    _addInactiveAction(action, clipUuid, rootUuid) {\r\n      const actions = this._actions,\r\n        actionsByClip = this._actionsByClip;\r\n      let actionsForClip = actionsByClip[clipUuid];\r\n\r\n      if (actionsForClip === undefined) {\r\n        actionsForClip = {\r\n          knownActions: [action],\r\n          actionByRoot: {},\r\n        };\r\n        action._byClipCacheIndex = 0;\r\n        actionsByClip[clipUuid] = actionsForClip;\r\n      } else {\r\n        const knownActions = actionsForClip.knownActions;\r\n        action._byClipCacheIndex = knownActions.length;\r\n        knownActions.push(action);\r\n      }\r\n\r\n      action._cacheIndex = actions.length;\r\n      actions.push(action);\r\n      actionsForClip.actionByRoot[rootUuid] = action;\r\n    }\r\n\r\n    _removeInactiveAction(action) {\r\n      const actions = this._actions,\r\n        lastInactiveAction = actions[actions.length - 1],\r\n        cacheIndex = action._cacheIndex;\r\n      lastInactiveAction._cacheIndex = cacheIndex;\r\n      actions[cacheIndex] = lastInactiveAction;\r\n      actions.pop();\r\n      action._cacheIndex = null;\r\n      const clipUuid = action._clip.uuid,\r\n        actionsByClip = this._actionsByClip,\r\n        actionsForClip = actionsByClip[clipUuid],\r\n        knownActionsForClip = actionsForClip.knownActions,\r\n        lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\r\n        byClipCacheIndex = action._byClipCacheIndex;\r\n      lastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n      knownActionsForClip[byClipCacheIndex] = lastKnownAction;\r\n      knownActionsForClip.pop();\r\n      action._byClipCacheIndex = null;\r\n      const actionByRoot = actionsForClip.actionByRoot,\r\n        rootUuid = (action._localRoot || this._root).uuid;\r\n      delete actionByRoot[rootUuid];\r\n\r\n      if (knownActionsForClip.length === 0) {\r\n        delete actionsByClip[clipUuid];\r\n      }\r\n\r\n      this._removeInactiveBindingsForAction(action);\r\n    }\r\n\r\n    _removeInactiveBindingsForAction(action) {\r\n      const bindings = action._propertyBindings;\r\n\r\n      for (let i = 0, n = bindings.length; i !== n; ++i) {\r\n        const binding = bindings[i];\r\n\r\n        if (--binding.referenceCount === 0) {\r\n          this._removeInactiveBinding(binding);\r\n        }\r\n      }\r\n    }\r\n\r\n    _lendAction(action) {\r\n      // [ active actions |\tinactive actions\t]\r\n      // [\tactive actions >| inactive actions ]\r\n      //\t\t\t\t\t\t\t\t s\t\t\t\ta\r\n      //\t\t\t\t\t\t\t\t\t<-swap->\r\n      //\t\t\t\t\t\t\t\t a\t\t\t\ts\r\n      const actions = this._actions,\r\n        prevIndex = action._cacheIndex,\r\n        lastActiveIndex = this._nActiveActions++,\r\n        firstInactiveAction = actions[lastActiveIndex];\r\n      action._cacheIndex = lastActiveIndex;\r\n      actions[lastActiveIndex] = action;\r\n      firstInactiveAction._cacheIndex = prevIndex;\r\n      actions[prevIndex] = firstInactiveAction;\r\n    }\r\n\r\n    _takeBackAction(action) {\r\n      // [\tactive actions\t| inactive actions ]\r\n      // [ active actions |< inactive actions\t]\r\n      //\t\t\t\ta\t\t\t\ts\r\n      //\t\t\t\t <-swap->\r\n      //\t\t\t\ts\t\t\t\ta\r\n      const actions = this._actions,\r\n        prevIndex = action._cacheIndex,\r\n        firstInactiveIndex = --this._nActiveActions,\r\n        lastActiveAction = actions[firstInactiveIndex];\r\n      action._cacheIndex = firstInactiveIndex;\r\n      actions[firstInactiveIndex] = action;\r\n      lastActiveAction._cacheIndex = prevIndex;\r\n      actions[prevIndex] = lastActiveAction;\r\n    } // Memory management for PropertyMixer objects\r\n\r\n    _addInactiveBinding(binding, rootUuid, trackName) {\r\n      const bindingsByRoot = this._bindingsByRootAndName,\r\n        bindings = this._bindings;\r\n      let bindingByName = bindingsByRoot[rootUuid];\r\n\r\n      if (bindingByName === undefined) {\r\n        bindingByName = {};\r\n        bindingsByRoot[rootUuid] = bindingByName;\r\n      }\r\n\r\n      bindingByName[trackName] = binding;\r\n      binding._cacheIndex = bindings.length;\r\n      bindings.push(binding);\r\n    }\r\n\r\n    _removeInactiveBinding(binding) {\r\n      const bindings = this._bindings,\r\n        propBinding = binding.binding,\r\n        rootUuid = propBinding.rootNode.uuid,\r\n        trackName = propBinding.path,\r\n        bindingsByRoot = this._bindingsByRootAndName,\r\n        bindingByName = bindingsByRoot[rootUuid],\r\n        lastInactiveBinding = bindings[bindings.length - 1],\r\n        cacheIndex = binding._cacheIndex;\r\n      lastInactiveBinding._cacheIndex = cacheIndex;\r\n      bindings[cacheIndex] = lastInactiveBinding;\r\n      bindings.pop();\r\n      delete bindingByName[trackName];\r\n\r\n      if (Object.keys(bindingByName).length === 0) {\r\n        delete bindingsByRoot[rootUuid];\r\n      }\r\n    }\r\n\r\n    _lendBinding(binding) {\r\n      const bindings = this._bindings,\r\n        prevIndex = binding._cacheIndex,\r\n        lastActiveIndex = this._nActiveBindings++,\r\n        firstInactiveBinding = bindings[lastActiveIndex];\r\n      binding._cacheIndex = lastActiveIndex;\r\n      bindings[lastActiveIndex] = binding;\r\n      firstInactiveBinding._cacheIndex = prevIndex;\r\n      bindings[prevIndex] = firstInactiveBinding;\r\n    }\r\n\r\n    _takeBackBinding(binding) {\r\n      const bindings = this._bindings,\r\n        prevIndex = binding._cacheIndex,\r\n        firstInactiveIndex = --this._nActiveBindings,\r\n        lastActiveBinding = bindings[firstInactiveIndex];\r\n      binding._cacheIndex = firstInactiveIndex;\r\n      bindings[firstInactiveIndex] = binding;\r\n      lastActiveBinding._cacheIndex = prevIndex;\r\n      bindings[prevIndex] = lastActiveBinding;\r\n    } // Memory management of Interpolants for weight and time scale\r\n\r\n    _lendControlInterpolant() {\r\n      const interpolants = this._controlInterpolants,\r\n        lastActiveIndex = this._nActiveControlInterpolants++;\r\n      let interpolant = interpolants[lastActiveIndex];\r\n\r\n      if (interpolant === undefined) {\r\n        interpolant = new LinearInterpolant(\r\n          new Float32Array(2),\r\n          new Float32Array(2),\r\n          1,\r\n          this._controlInterpolantsResultBuffer,\r\n        );\r\n        interpolant.__cacheIndex = lastActiveIndex;\r\n        interpolants[lastActiveIndex] = interpolant;\r\n      }\r\n\r\n      return interpolant;\r\n    }\r\n\r\n    _takeBackControlInterpolant(interpolant) {\r\n      const interpolants = this._controlInterpolants,\r\n        prevIndex = interpolant.__cacheIndex,\r\n        firstInactiveIndex = --this._nActiveControlInterpolants,\r\n        lastActiveInterpolant = interpolants[firstInactiveIndex];\r\n      interpolant.__cacheIndex = firstInactiveIndex;\r\n      interpolants[firstInactiveIndex] = interpolant;\r\n      lastActiveInterpolant.__cacheIndex = prevIndex;\r\n      interpolants[prevIndex] = lastActiveInterpolant;\r\n    } // return an action for a clip optionally using a custom root target\r\n    // object (this method allocates a lot of dynamic memory in case a\r\n    // previously unknown clip/root combination is specified)\r\n\r\n    clipAction(clip, optionalRoot, blendMode) {\r\n      const root = optionalRoot || this._root,\r\n        rootUuid = root.uuid;\r\n      let clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\r\n      const clipUuid = clipObject !== null ? clipObject.uuid : clip;\r\n      const actionsForClip = this._actionsByClip[clipUuid];\r\n      let prototypeAction = null;\r\n\r\n      if (blendMode === undefined) {\r\n        if (clipObject !== null) {\r\n          blendMode = clipObject.blendMode;\r\n        } else {\r\n          blendMode = NormalAnimationBlendMode;\r\n        }\r\n      }\r\n\r\n      if (actionsForClip !== undefined) {\r\n        const existingAction = actionsForClip.actionByRoot[rootUuid];\r\n\r\n        if (existingAction !== undefined && existingAction.blendMode === blendMode) {\r\n          return existingAction;\r\n        } // we know the clip, so we don't have to parse all\r\n        // the bindings again but can just copy\r\n\r\n        prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\r\n\r\n        if (clipObject === null) clipObject = prototypeAction._clip;\r\n      } // clip must be known when specified via string\r\n\r\n      if (clipObject === null) return null; // allocate all resources required to run it\r\n\r\n      const newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\r\n\r\n      this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\r\n\r\n      this._addInactiveAction(newAction, clipUuid, rootUuid);\r\n\r\n      return newAction;\r\n    } // get an existing action\r\n\r\n    existingAction(clip, optionalRoot) {\r\n      const root = optionalRoot || this._root,\r\n        rootUuid = root.uuid,\r\n        clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\r\n        clipUuid = clipObject ? clipObject.uuid : clip,\r\n        actionsForClip = this._actionsByClip[clipUuid];\r\n\r\n      if (actionsForClip !== undefined) {\r\n        return actionsForClip.actionByRoot[rootUuid] || null;\r\n      }\r\n\r\n      return null;\r\n    } // deactivates all previously scheduled actions\r\n\r\n    stopAllAction() {\r\n      const actions = this._actions,\r\n        nActions = this._nActiveActions;\r\n\r\n      for (let i = nActions - 1; i >= 0; --i) {\r\n        actions[i].stop();\r\n      }\r\n\r\n      return this;\r\n    } // advance the time and update apply the animation\r\n\r\n    update(deltaTime) {\r\n      deltaTime *= this.timeScale;\r\n      const actions = this._actions,\r\n        nActions = this._nActiveActions,\r\n        time = (this.time += deltaTime),\r\n        timeDirection = Math.sign(deltaTime),\r\n        accuIndex = (this._accuIndex ^= 1); // run active actions\r\n\r\n      for (let i = 0; i !== nActions; ++i) {\r\n        const action = actions[i];\r\n\r\n        action._update(time, deltaTime, timeDirection, accuIndex);\r\n      } // update scene graph\r\n\r\n      const bindings = this._bindings,\r\n        nBindings = this._nActiveBindings;\r\n\r\n      for (let i = 0; i !== nBindings; ++i) {\r\n        bindings[i].apply(accuIndex);\r\n      }\r\n\r\n      return this;\r\n    } // Allows you to seek to a specific time in an animation.\r\n\r\n    setTime(timeInSeconds) {\r\n      this.time = 0; // Zero out time attribute for AnimationMixer object;\r\n\r\n      for (let i = 0; i < this._actions.length; i++) {\r\n        this._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\r\n      }\r\n\r\n      return this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\r\n    } // return this mixer's root target object\r\n\r\n    getRoot() {\r\n      return this._root;\r\n    } // free all resources specific to a particular clip\r\n\r\n    uncacheClip(clip) {\r\n      const actions = this._actions,\r\n        clipUuid = clip.uuid,\r\n        actionsByClip = this._actionsByClip,\r\n        actionsForClip = actionsByClip[clipUuid];\r\n\r\n      if (actionsForClip !== undefined) {\r\n        // note: just calling _removeInactiveAction would mess up the\r\n        // iteration state and also require updating the state we can\r\n        // just throw away\r\n        const actionsToRemove = actionsForClip.knownActions;\r\n\r\n        for (let i = 0, n = actionsToRemove.length; i !== n; ++i) {\r\n          const action = actionsToRemove[i];\r\n\r\n          this._deactivateAction(action);\r\n\r\n          const cacheIndex = action._cacheIndex,\r\n            lastInactiveAction = actions[actions.length - 1];\r\n          action._cacheIndex = null;\r\n          action._byClipCacheIndex = null;\r\n          lastInactiveAction._cacheIndex = cacheIndex;\r\n          actions[cacheIndex] = lastInactiveAction;\r\n          actions.pop();\r\n\r\n          this._removeInactiveBindingsForAction(action);\r\n        }\r\n\r\n        delete actionsByClip[clipUuid];\r\n      }\r\n    } // free all resources specific to a particular root target object\r\n\r\n    uncacheRoot(root) {\r\n      const rootUuid = root.uuid,\r\n        actionsByClip = this._actionsByClip;\r\n\r\n      for (const clipUuid in actionsByClip) {\r\n        const actionByRoot = actionsByClip[clipUuid].actionByRoot,\r\n          action = actionByRoot[rootUuid];\r\n\r\n        if (action !== undefined) {\r\n          this._deactivateAction(action);\r\n\r\n          this._removeInactiveAction(action);\r\n        }\r\n      }\r\n\r\n      const bindingsByRoot = this._bindingsByRootAndName,\r\n        bindingByName = bindingsByRoot[rootUuid];\r\n\r\n      if (bindingByName !== undefined) {\r\n        for (const trackName in bindingByName) {\r\n          const binding = bindingByName[trackName];\r\n          binding.restoreOriginalState();\r\n\r\n          this._removeInactiveBinding(binding);\r\n        }\r\n      }\r\n    } // remove a targeted clip from the cache\r\n\r\n    uncacheAction(clip, optionalRoot) {\r\n      const action = this.existingAction(clip, optionalRoot);\r\n\r\n      if (action !== null) {\r\n        this._deactivateAction(action);\r\n\r\n        this._removeInactiveAction(action);\r\n      }\r\n    }\r\n  }\r\n\r\n  AnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\r\n\r\n  class Uniform {\r\n    constructor(value) {\r\n      if (typeof value === 'string') {\r\n        console.warn('THREE.Uniform: Type parameter is no longer needed.');\r\n        value = arguments[1];\r\n      }\r\n\r\n      this.value = value;\r\n    }\r\n\r\n    clone() {\r\n      return new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\r\n    }\r\n  }\r\n\r\n  class InstancedInterleavedBuffer extends InterleavedBuffer {\r\n    constructor(array, stride, meshPerAttribute = 1) {\r\n      super(array, stride);\r\n      this.meshPerAttribute = meshPerAttribute || 1;\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      this.meshPerAttribute = source.meshPerAttribute;\r\n      return this;\r\n    }\r\n\r\n    clone(data) {\r\n      const ib = super.clone(data);\r\n      ib.meshPerAttribute = this.meshPerAttribute;\r\n      return ib;\r\n    }\r\n\r\n    toJSON(data) {\r\n      const json = super.toJSON(data);\r\n      json.isInstancedInterleavedBuffer = true;\r\n      json.meshPerAttribute = this.meshPerAttribute;\r\n      return json;\r\n    }\r\n  }\r\n\r\n  InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\r\n\r\n  class GLBufferAttribute {\r\n    constructor(buffer, type, itemSize, elementSize, count) {\r\n      this.buffer = buffer;\r\n      this.type = type;\r\n      this.itemSize = itemSize;\r\n      this.elementSize = elementSize;\r\n      this.count = count;\r\n      this.version = 0;\r\n    }\r\n\r\n    set needsUpdate(value) {\r\n      if (value === true) this.version++;\r\n    }\r\n\r\n    setBuffer(buffer) {\r\n      this.buffer = buffer;\r\n      return this;\r\n    }\r\n\r\n    setType(type, elementSize) {\r\n      this.type = type;\r\n      this.elementSize = elementSize;\r\n      return this;\r\n    }\r\n\r\n    setItemSize(itemSize) {\r\n      this.itemSize = itemSize;\r\n      return this;\r\n    }\r\n\r\n    setCount(count) {\r\n      this.count = count;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  GLBufferAttribute.prototype.isGLBufferAttribute = true;\r\n\r\n  class Raycaster {\r\n    constructor(origin, direction, near = 0, far = Infinity) {\r\n      this.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n      this.near = near;\r\n      this.far = far;\r\n      this.camera = null;\r\n      this.layers = new Layers();\r\n      this.params = {\r\n        Mesh: {},\r\n        Line: {\r\n          threshold: 1,\r\n        },\r\n        LOD: {},\r\n        Points: {\r\n          threshold: 1,\r\n        },\r\n        Sprite: {},\r\n      };\r\n    }\r\n\r\n    set(origin, direction) {\r\n      // direction is assumed to be normalized (for accurate distance calculations)\r\n      this.ray.set(origin, direction);\r\n    }\r\n\r\n    setFromCamera(coords, camera) {\r\n      if (camera && camera.isPerspectiveCamera) {\r\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n        this.ray.direction\r\n          .set(coords.x, coords.y, 0.5)\r\n          .unproject(camera)\r\n          .sub(this.ray.origin)\r\n          .normalize();\r\n        this.camera = camera;\r\n      } else if (camera && camera.isOrthographicCamera) {\r\n        this.ray.origin\r\n          .set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far))\r\n          .unproject(camera); // set origin in plane of camera\r\n\r\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n        this.camera = camera;\r\n      } else {\r\n        console.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\r\n      }\r\n    }\r\n\r\n    intersectObject(object, recursive = false, intersects = []) {\r\n      intersectObject(object, this, intersects, recursive);\r\n      intersects.sort(ascSort);\r\n      return intersects;\r\n    }\r\n\r\n    intersectObjects(objects, recursive = false, intersects = []) {\r\n      for (let i = 0, l = objects.length; i < l; i++) {\r\n        intersectObject(objects[i], this, intersects, recursive);\r\n      }\r\n\r\n      intersects.sort(ascSort);\r\n      return intersects;\r\n    }\r\n  }\r\n\r\n  function ascSort(a, b) {\r\n    return a.distance - b.distance;\r\n  }\r\n\r\n  function intersectObject(object, raycaster, intersects, recursive) {\r\n    if (object.layers.test(raycaster.layers)) {\r\n      object.raycast(raycaster, intersects);\r\n    }\r\n\r\n    if (recursive === true) {\r\n      const children = object.children;\r\n\r\n      for (let i = 0, l = children.length; i < l; i++) {\r\n        intersectObject(children[i], raycaster, intersects, true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n   *\r\n   * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n   * The azimuthal angle (theta) is measured from the positive z-axis.\r\n   */\r\n\r\n  class Spherical {\r\n    constructor(radius = 1, phi = 0, theta = 0) {\r\n      this.radius = radius;\r\n      this.phi = phi; // polar angle\r\n\r\n      this.theta = theta; // azimuthal angle\r\n\r\n      return this;\r\n    }\r\n\r\n    set(radius, phi, theta) {\r\n      this.radius = radius;\r\n      this.phi = phi;\r\n      this.theta = theta;\r\n      return this;\r\n    }\r\n\r\n    copy(other) {\r\n      this.radius = other.radius;\r\n      this.phi = other.phi;\r\n      this.theta = other.theta;\r\n      return this;\r\n    } // restrict phi to be betwee EPS and PI-EPS\r\n\r\n    makeSafe() {\r\n      const EPS = 0.000001;\r\n      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\r\n      return this;\r\n    }\r\n\r\n    setFromVector3(v) {\r\n      return this.setFromCartesianCoords(v.x, v.y, v.z);\r\n    }\r\n\r\n    setFromCartesianCoords(x, y, z) {\r\n      this.radius = Math.sqrt(x * x + y * y + z * z);\r\n\r\n      if (this.radius === 0) {\r\n        this.theta = 0;\r\n        this.phi = 0;\r\n      } else {\r\n        this.theta = Math.atan2(x, z);\r\n        this.phi = Math.acos(clamp(y / this.radius, -1, 1));\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n   */\r\n  class Cylindrical {\r\n    constructor(radius = 1, theta = 0, y = 0) {\r\n      this.radius = radius; // distance from the origin to a point in the x-z plane\r\n\r\n      this.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\r\n      this.y = y; // height above the x-z plane\r\n\r\n      return this;\r\n    }\r\n\r\n    set(radius, theta, y) {\r\n      this.radius = radius;\r\n      this.theta = theta;\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    copy(other) {\r\n      this.radius = other.radius;\r\n      this.theta = other.theta;\r\n      this.y = other.y;\r\n      return this;\r\n    }\r\n\r\n    setFromVector3(v) {\r\n      return this.setFromCartesianCoords(v.x, v.y, v.z);\r\n    }\r\n\r\n    setFromCartesianCoords(x, y, z) {\r\n      this.radius = Math.sqrt(x * x + z * z);\r\n      this.theta = Math.atan2(x, z);\r\n      this.y = y;\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  const _vector$4 = /*@__PURE__*/ new Vector2();\r\n\r\n  class Box2 {\r\n    constructor(min = new Vector2(+Infinity, +Infinity), max = new Vector2(-Infinity, -Infinity)) {\r\n      this.min = min;\r\n      this.max = max;\r\n    }\r\n\r\n    set(min, max) {\r\n      this.min.copy(min);\r\n      this.max.copy(max);\r\n      return this;\r\n    }\r\n\r\n    setFromPoints(points) {\r\n      this.makeEmpty();\r\n\r\n      for (let i = 0, il = points.length; i < il; i++) {\r\n        this.expandByPoint(points[i]);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    setFromCenterAndSize(center, size) {\r\n      const halfSize = _vector$4.copy(size).multiplyScalar(0.5);\r\n\r\n      this.min.copy(center).sub(halfSize);\r\n      this.max.copy(center).add(halfSize);\r\n      return this;\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n\r\n    copy(box) {\r\n      this.min.copy(box.min);\r\n      this.max.copy(box.max);\r\n      return this;\r\n    }\r\n\r\n    makeEmpty() {\r\n      this.min.x = this.min.y = +Infinity;\r\n      this.max.x = this.max.y = -Infinity;\r\n      return this;\r\n    }\r\n\r\n    isEmpty() {\r\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n      return this.max.x < this.min.x || this.max.y < this.min.y;\r\n    }\r\n\r\n    getCenter(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box2: .getCenter() target is now required');\r\n        target = new Vector2();\r\n      }\r\n\r\n      return this.isEmpty()\r\n        ? target.set(0, 0)\r\n        : target.addVectors(this.min, this.max).multiplyScalar(0.5);\r\n    }\r\n\r\n    getSize(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box2: .getSize() target is now required');\r\n        target = new Vector2();\r\n      }\r\n\r\n      return this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\r\n    }\r\n\r\n    expandByPoint(point) {\r\n      this.min.min(point);\r\n      this.max.max(point);\r\n      return this;\r\n    }\r\n\r\n    expandByVector(vector) {\r\n      this.min.sub(vector);\r\n      this.max.add(vector);\r\n      return this;\r\n    }\r\n\r\n    expandByScalar(scalar) {\r\n      this.min.addScalar(-scalar);\r\n      this.max.addScalar(scalar);\r\n      return this;\r\n    }\r\n\r\n    containsPoint(point) {\r\n      return point.x < this.min.x ||\r\n        point.x > this.max.x ||\r\n        point.y < this.min.y ||\r\n        point.y > this.max.y\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    containsBox(box) {\r\n      return (\r\n        this.min.x <= box.min.x &&\r\n        box.max.x <= this.max.x &&\r\n        this.min.y <= box.min.y &&\r\n        box.max.y <= this.max.y\r\n      );\r\n    }\r\n\r\n    getParameter(point, target) {\r\n      // This can potentially have a divide by zero if the box\r\n      // has a size dimension of 0.\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box2: .getParameter() target is now required');\r\n        target = new Vector2();\r\n      }\r\n\r\n      return target.set(\r\n        (point.x - this.min.x) / (this.max.x - this.min.x),\r\n        (point.y - this.min.y) / (this.max.y - this.min.y),\r\n      );\r\n    }\r\n\r\n    intersectsBox(box) {\r\n      // using 4 splitting planes to rule out intersections\r\n      return box.max.x < this.min.x ||\r\n        box.min.x > this.max.x ||\r\n        box.max.y < this.min.y ||\r\n        box.min.y > this.max.y\r\n        ? false\r\n        : true;\r\n    }\r\n\r\n    clampPoint(point, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Box2: .clampPoint() target is now required');\r\n        target = new Vector2();\r\n      }\r\n\r\n      return target.copy(point).clamp(this.min, this.max);\r\n    }\r\n\r\n    distanceToPoint(point) {\r\n      const clampedPoint = _vector$4.copy(point).clamp(this.min, this.max);\r\n\r\n      return clampedPoint.sub(point).length();\r\n    }\r\n\r\n    intersect(box) {\r\n      this.min.max(box.min);\r\n      this.max.min(box.max);\r\n      return this;\r\n    }\r\n\r\n    union(box) {\r\n      this.min.min(box.min);\r\n      this.max.max(box.max);\r\n      return this;\r\n    }\r\n\r\n    translate(offset) {\r\n      this.min.add(offset);\r\n      this.max.add(offset);\r\n      return this;\r\n    }\r\n\r\n    equals(box) {\r\n      return box.min.equals(this.min) && box.max.equals(this.max);\r\n    }\r\n  }\r\n\r\n  Box2.prototype.isBox2 = true;\r\n\r\n  const _startP = /*@__PURE__*/ new Vector3();\r\n\r\n  const _startEnd = /*@__PURE__*/ new Vector3();\r\n\r\n  class Line3 {\r\n    constructor(start = new Vector3(), end = new Vector3()) {\r\n      this.start = start;\r\n      this.end = end;\r\n    }\r\n\r\n    set(start, end) {\r\n      this.start.copy(start);\r\n      this.end.copy(end);\r\n      return this;\r\n    }\r\n\r\n    copy(line) {\r\n      this.start.copy(line.start);\r\n      this.end.copy(line.end);\r\n      return this;\r\n    }\r\n\r\n    getCenter(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Line3: .getCenter() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.addVectors(this.start, this.end).multiplyScalar(0.5);\r\n    }\r\n\r\n    delta(target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Line3: .delta() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return target.subVectors(this.end, this.start);\r\n    }\r\n\r\n    distanceSq() {\r\n      return this.start.distanceToSquared(this.end);\r\n    }\r\n\r\n    distance() {\r\n      return this.start.distanceTo(this.end);\r\n    }\r\n\r\n    at(t, target) {\r\n      if (target === undefined) {\r\n        console.warn('THREE.Line3: .at() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    closestPointToPointParameter(point, clampToLine) {\r\n      _startP.subVectors(point, this.start);\r\n\r\n      _startEnd.subVectors(this.end, this.start);\r\n\r\n      const startEnd2 = _startEnd.dot(_startEnd);\r\n\r\n      const startEnd_startP = _startEnd.dot(_startP);\r\n\r\n      let t = startEnd_startP / startEnd2;\r\n\r\n      if (clampToLine) {\r\n        t = clamp(t, 0, 1);\r\n      }\r\n\r\n      return t;\r\n    }\r\n\r\n    closestPointToPoint(point, clampToLine, target) {\r\n      const t = this.closestPointToPointParameter(point, clampToLine);\r\n\r\n      if (target === undefined) {\r\n        console.warn('THREE.Line3: .closestPointToPoint() target is now required');\r\n        target = new Vector3();\r\n      }\r\n\r\n      return this.delta(target).multiplyScalar(t).add(this.start);\r\n    }\r\n\r\n    applyMatrix4(matrix) {\r\n      this.start.applyMatrix4(matrix);\r\n      this.end.applyMatrix4(matrix);\r\n      return this;\r\n    }\r\n\r\n    equals(line) {\r\n      return line.start.equals(this.start) && line.end.equals(this.end);\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this);\r\n    }\r\n  }\r\n\r\n  class ImmediateRenderObject extends Object3D {\r\n    constructor(material) {\r\n      super();\r\n      this.material = material;\r\n\r\n      this.render = function () /* renderCallback */\r\n      {};\r\n\r\n      this.hasPositions = false;\r\n      this.hasNormals = false;\r\n      this.hasColors = false;\r\n      this.hasUvs = false;\r\n      this.positionArray = null;\r\n      this.normalArray = null;\r\n      this.colorArray = null;\r\n      this.uvArray = null;\r\n      this.count = 0;\r\n    }\r\n  }\r\n\r\n  ImmediateRenderObject.prototype.isImmediateRenderObject = true;\r\n\r\n  const _vector$3 = /*@__PURE__*/ new Vector3();\r\n\r\n  class SpotLightHelper extends Object3D {\r\n    constructor(light, color) {\r\n      super();\r\n      this.light = light;\r\n      this.light.updateMatrixWorld();\r\n      this.matrix = light.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n      this.color = color;\r\n      const geometry = new BufferGeometry();\r\n      const positions = [\r\n        0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1,\r\n      ];\r\n\r\n      for (let i = 0, j = 1, l = 32; i < l; i++, j++) {\r\n        const p1 = (i / l) * Math.PI * 2;\r\n        const p2 = (j / l) * Math.PI * 2;\r\n        positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\r\n      }\r\n\r\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\r\n      const material = new LineBasicMaterial({\r\n        fog: false,\r\n        toneMapped: false,\r\n      });\r\n      this.cone = new LineSegments(geometry, material);\r\n      this.add(this.cone);\r\n      this.update();\r\n    }\r\n\r\n    dispose() {\r\n      this.cone.geometry.dispose();\r\n      this.cone.material.dispose();\r\n    }\r\n\r\n    update() {\r\n      this.light.updateMatrixWorld();\r\n      const coneLength = this.light.distance ? this.light.distance : 1000;\r\n      const coneWidth = coneLength * Math.tan(this.light.angle);\r\n      this.cone.scale.set(coneWidth, coneWidth, coneLength);\r\n\r\n      _vector$3.setFromMatrixPosition(this.light.target.matrixWorld);\r\n\r\n      this.cone.lookAt(_vector$3);\r\n\r\n      if (this.color !== undefined) {\r\n        this.cone.material.color.set(this.color);\r\n      } else {\r\n        this.cone.material.color.copy(this.light.color);\r\n      }\r\n    }\r\n  }\r\n\r\n  const _vector$2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _boneMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n  const _matrixWorldInv = /*@__PURE__*/ new Matrix4();\r\n\r\n  class SkeletonHelper extends LineSegments {\r\n    constructor(object) {\r\n      const bones = getBoneList(object);\r\n      const geometry = new BufferGeometry();\r\n      const vertices = [];\r\n      const colors = [];\r\n      const color1 = new Color(0, 0, 1);\r\n      const color2 = new Color(0, 1, 0);\r\n\r\n      for (let i = 0; i < bones.length; i++) {\r\n        const bone = bones[i];\r\n\r\n        if (bone.parent && bone.parent.isBone) {\r\n          vertices.push(0, 0, 0);\r\n          vertices.push(0, 0, 0);\r\n          colors.push(color1.r, color1.g, color1.b);\r\n          colors.push(color2.r, color2.g, color2.b);\r\n        }\r\n      }\r\n\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\r\n      const material = new LineBasicMaterial({\r\n        vertexColors: true,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        toneMapped: false,\r\n        transparent: true,\r\n      });\r\n      super(geometry, material);\r\n      this.type = 'SkeletonHelper';\r\n      this.isSkeletonHelper = true;\r\n      this.root = object;\r\n      this.bones = bones;\r\n      this.matrix = object.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      const bones = this.bones;\r\n      const geometry = this.geometry;\r\n      const position = geometry.getAttribute('position');\r\n\r\n      _matrixWorldInv.copy(this.root.matrixWorld).invert();\r\n\r\n      for (let i = 0, j = 0; i < bones.length; i++) {\r\n        const bone = bones[i];\r\n\r\n        if (bone.parent && bone.parent.isBone) {\r\n          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\r\n\r\n          _vector$2.setFromMatrixPosition(_boneMatrix);\r\n\r\n          position.setXYZ(j, _vector$2.x, _vector$2.y, _vector$2.z);\r\n\r\n          _boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\r\n\r\n          _vector$2.setFromMatrixPosition(_boneMatrix);\r\n\r\n          position.setXYZ(j + 1, _vector$2.x, _vector$2.y, _vector$2.z);\r\n          j += 2;\r\n        }\r\n      }\r\n\r\n      geometry.getAttribute('position').needsUpdate = true;\r\n      super.updateMatrixWorld(force);\r\n    }\r\n  }\r\n\r\n  function getBoneList(object) {\r\n    const boneList = [];\r\n\r\n    if (object && object.isBone) {\r\n      boneList.push(object);\r\n    }\r\n\r\n    for (let i = 0; i < object.children.length; i++) {\r\n      boneList.push.apply(boneList, getBoneList(object.children[i]));\r\n    }\r\n\r\n    return boneList;\r\n  }\r\n\r\n  class PointLightHelper extends Mesh {\r\n    constructor(light, sphereSize, color) {\r\n      const geometry = new SphereGeometry(sphereSize, 4, 2);\r\n      const material = new MeshBasicMaterial({\r\n        wireframe: true,\r\n        fog: false,\r\n        toneMapped: false,\r\n      });\r\n      super(geometry, material);\r\n      this.light = light;\r\n      this.light.updateMatrixWorld();\r\n      this.color = color;\r\n      this.type = 'PointLightHelper';\r\n      this.matrix = this.light.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n      this.update();\r\n      /*\r\n\t\t\t// TODO: delete this comment?\r\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\r\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\t\t\tconst d = light.distance;\r\n\t\t\tif ( d === 0.0 ) {\r\n\t\t\t\tthis.lightDistance.visible = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\t\t}\r\n\t\t\tthis.add( this.lightDistance );\r\n\t\t\t*/\r\n    }\r\n\r\n    dispose() {\r\n      this.geometry.dispose();\r\n      this.material.dispose();\r\n    }\r\n\r\n    update() {\r\n      if (this.color !== undefined) {\r\n        this.material.color.set(this.color);\r\n      } else {\r\n        this.material.color.copy(this.light.color);\r\n      }\r\n      /*\r\n\t\t\tconst d = this.light.distance;\r\n\t\t\t\tif ( d === 0.0 ) {\r\n\t\t\t\t\tthis.lightDistance.visible = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.lightDistance.visible = true;\r\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\t\t\t}\r\n\t\t\t*/\r\n    }\r\n  }\r\n\r\n  const _vector$1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _color1 = /*@__PURE__*/ new Color();\r\n\r\n  const _color2 = /*@__PURE__*/ new Color();\r\n\r\n  class HemisphereLightHelper extends Object3D {\r\n    constructor(light, size, color) {\r\n      super();\r\n      this.light = light;\r\n      this.light.updateMatrixWorld();\r\n      this.matrix = light.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n      this.color = color;\r\n      const geometry = new OctahedronGeometry(size);\r\n      geometry.rotateY(Math.PI * 0.5);\r\n      this.material = new MeshBasicMaterial({\r\n        wireframe: true,\r\n        fog: false,\r\n        toneMapped: false,\r\n      });\r\n      if (this.color === undefined) this.material.vertexColors = true;\r\n      const position = geometry.getAttribute('position');\r\n      const colors = new Float32Array(position.count * 3);\r\n      geometry.setAttribute('color', new BufferAttribute(colors, 3));\r\n      this.add(new Mesh(geometry, this.material));\r\n      this.update();\r\n    }\r\n\r\n    dispose() {\r\n      this.children[0].geometry.dispose();\r\n      this.children[0].material.dispose();\r\n    }\r\n\r\n    update() {\r\n      const mesh = this.children[0];\r\n\r\n      if (this.color !== undefined) {\r\n        this.material.color.set(this.color);\r\n      } else {\r\n        const colors = mesh.geometry.getAttribute('color');\r\n\r\n        _color1.copy(this.light.color);\r\n\r\n        _color2.copy(this.light.groundColor);\r\n\r\n        for (let i = 0, l = colors.count; i < l; i++) {\r\n          const color = i < l / 2 ? _color1 : _color2;\r\n          colors.setXYZ(i, color.r, color.g, color.b);\r\n        }\r\n\r\n        colors.needsUpdate = true;\r\n      }\r\n\r\n      mesh.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate());\r\n    }\r\n  }\r\n\r\n  class GridHelper extends LineSegments {\r\n    constructor(size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888) {\r\n      color1 = new Color(color1);\r\n      color2 = new Color(color2);\r\n      const center = divisions / 2;\r\n      const step = size / divisions;\r\n      const halfSize = size / 2;\r\n      const vertices = [],\r\n        colors = [];\r\n\r\n      for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\r\n        vertices.push(-halfSize, 0, k, halfSize, 0, k);\r\n        vertices.push(k, 0, -halfSize, k, 0, halfSize);\r\n        const color = i === center ? color1 : color2;\r\n        color.toArray(colors, j);\r\n        j += 3;\r\n        color.toArray(colors, j);\r\n        j += 3;\r\n        color.toArray(colors, j);\r\n        j += 3;\r\n        color.toArray(colors, j);\r\n        j += 3;\r\n      }\r\n\r\n      const geometry = new BufferGeometry();\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\r\n      const material = new LineBasicMaterial({\r\n        vertexColors: true,\r\n        toneMapped: false,\r\n      });\r\n      super(geometry, material);\r\n      this.type = 'GridHelper';\r\n    }\r\n  }\r\n\r\n  class PolarGridHelper extends LineSegments {\r\n    constructor(\r\n      radius = 10,\r\n      radials = 16,\r\n      circles = 8,\r\n      divisions = 64,\r\n      color1 = 0x444444,\r\n      color2 = 0x888888,\r\n    ) {\r\n      color1 = new Color(color1);\r\n      color2 = new Color(color2);\r\n      const vertices = [];\r\n      const colors = []; // create the radials\r\n\r\n      for (let i = 0; i <= radials; i++) {\r\n        const v = (i / radials) * (Math.PI * 2);\r\n        const x = Math.sin(v) * radius;\r\n        const z = Math.cos(v) * radius;\r\n        vertices.push(0, 0, 0);\r\n        vertices.push(x, 0, z);\r\n        const color = i & 1 ? color1 : color2;\r\n        colors.push(color.r, color.g, color.b);\r\n        colors.push(color.r, color.g, color.b);\r\n      } // create the circles\r\n\r\n      for (let i = 0; i <= circles; i++) {\r\n        const color = i & 1 ? color1 : color2;\r\n        const r = radius - (radius / circles) * i;\r\n\r\n        for (let j = 0; j < divisions; j++) {\r\n          // first vertex\r\n          let v = (j / divisions) * (Math.PI * 2);\r\n          let x = Math.sin(v) * r;\r\n          let z = Math.cos(v) * r;\r\n          vertices.push(x, 0, z);\r\n          colors.push(color.r, color.g, color.b); // second vertex\r\n\r\n          v = ((j + 1) / divisions) * (Math.PI * 2);\r\n          x = Math.sin(v) * r;\r\n          z = Math.cos(v) * r;\r\n          vertices.push(x, 0, z);\r\n          colors.push(color.r, color.g, color.b);\r\n        }\r\n      }\r\n\r\n      const geometry = new BufferGeometry();\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\r\n      const material = new LineBasicMaterial({\r\n        vertexColors: true,\r\n        toneMapped: false,\r\n      });\r\n      super(geometry, material);\r\n      this.type = 'PolarGridHelper';\r\n    }\r\n  }\r\n\r\n  const _v1 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v2 = /*@__PURE__*/ new Vector3();\r\n\r\n  const _v3 = /*@__PURE__*/ new Vector3();\r\n\r\n  class DirectionalLightHelper extends Object3D {\r\n    constructor(light, size, color) {\r\n      super();\r\n      this.light = light;\r\n      this.light.updateMatrixWorld();\r\n      this.matrix = light.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n      this.color = color;\r\n      if (size === undefined) size = 1;\r\n      let geometry = new BufferGeometry();\r\n      geometry.setAttribute(\r\n        'position',\r\n        new Float32BufferAttribute(\r\n          [-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\r\n          3,\r\n        ),\r\n      );\r\n      const material = new LineBasicMaterial({\r\n        fog: false,\r\n        toneMapped: false,\r\n      });\r\n      this.lightPlane = new Line(geometry, material);\r\n      this.add(this.lightPlane);\r\n      geometry = new BufferGeometry();\r\n      geometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\r\n      this.targetLine = new Line(geometry, material);\r\n      this.add(this.targetLine);\r\n      this.update();\r\n    }\r\n\r\n    dispose() {\r\n      this.lightPlane.geometry.dispose();\r\n      this.lightPlane.material.dispose();\r\n      this.targetLine.geometry.dispose();\r\n      this.targetLine.material.dispose();\r\n    }\r\n\r\n    update() {\r\n      _v1.setFromMatrixPosition(this.light.matrixWorld);\r\n\r\n      _v2.setFromMatrixPosition(this.light.target.matrixWorld);\r\n\r\n      _v3.subVectors(_v2, _v1);\r\n\r\n      this.lightPlane.lookAt(_v2);\r\n\r\n      if (this.color !== undefined) {\r\n        this.lightPlane.material.color.set(this.color);\r\n        this.targetLine.material.color.set(this.color);\r\n      } else {\r\n        this.lightPlane.material.color.copy(this.light.color);\r\n        this.targetLine.material.color.copy(this.light.color);\r\n      }\r\n\r\n      this.targetLine.lookAt(_v2);\r\n      this.targetLine.scale.z = _v3.length();\r\n    }\r\n  }\r\n\r\n  const _vector = /*@__PURE__*/ new Vector3();\r\n\r\n  const _camera = /*@__PURE__*/ new Camera();\r\n  /**\r\n   *\t- shows frustum, line of sight and up of the camera\r\n   *\t- suitable for fast updates\r\n   * \t- based on frustum visualization in lightgl.js shadowmap example\r\n   *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n   */\r\n\r\n  class CameraHelper extends LineSegments {\r\n    constructor(camera) {\r\n      const geometry = new BufferGeometry();\r\n      const material = new LineBasicMaterial({\r\n        color: 0xffffff,\r\n        vertexColors: true,\r\n        toneMapped: false,\r\n      });\r\n      const vertices = [];\r\n      const colors = [];\r\n      const pointMap = {}; // colors\r\n\r\n      const colorFrustum = new Color(0xffaa00);\r\n      const colorCone = new Color(0xff0000);\r\n      const colorUp = new Color(0x00aaff);\r\n      const colorTarget = new Color(0xffffff);\r\n      const colorCross = new Color(0x333333); // near\r\n\r\n      addLine('n1', 'n2', colorFrustum);\r\n      addLine('n2', 'n4', colorFrustum);\r\n      addLine('n4', 'n3', colorFrustum);\r\n      addLine('n3', 'n1', colorFrustum); // far\r\n\r\n      addLine('f1', 'f2', colorFrustum);\r\n      addLine('f2', 'f4', colorFrustum);\r\n      addLine('f4', 'f3', colorFrustum);\r\n      addLine('f3', 'f1', colorFrustum); // sides\r\n\r\n      addLine('n1', 'f1', colorFrustum);\r\n      addLine('n2', 'f2', colorFrustum);\r\n      addLine('n3', 'f3', colorFrustum);\r\n      addLine('n4', 'f4', colorFrustum); // cone\r\n\r\n      addLine('p', 'n1', colorCone);\r\n      addLine('p', 'n2', colorCone);\r\n      addLine('p', 'n3', colorCone);\r\n      addLine('p', 'n4', colorCone); // up\r\n\r\n      addLine('u1', 'u2', colorUp);\r\n      addLine('u2', 'u3', colorUp);\r\n      addLine('u3', 'u1', colorUp); // target\r\n\r\n      addLine('c', 't', colorTarget);\r\n      addLine('p', 'c', colorCross); // cross\r\n\r\n      addLine('cn1', 'cn2', colorCross);\r\n      addLine('cn3', 'cn4', colorCross);\r\n      addLine('cf1', 'cf2', colorCross);\r\n      addLine('cf3', 'cf4', colorCross);\r\n\r\n      function addLine(a, b, color) {\r\n        addPoint(a, color);\r\n        addPoint(b, color);\r\n      }\r\n\r\n      function addPoint(id, color) {\r\n        vertices.push(0, 0, 0);\r\n        colors.push(color.r, color.g, color.b);\r\n\r\n        if (pointMap[id] === undefined) {\r\n          pointMap[id] = [];\r\n        }\r\n\r\n        pointMap[id].push(vertices.length / 3 - 1);\r\n      }\r\n\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\r\n      super(geometry, material);\r\n      this.type = 'CameraHelper';\r\n      this.camera = camera;\r\n      if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\r\n      this.matrix = camera.matrixWorld;\r\n      this.matrixAutoUpdate = false;\r\n      this.pointMap = pointMap;\r\n      this.update();\r\n    }\r\n\r\n    update() {\r\n      const geometry = this.geometry;\r\n      const pointMap = this.pointMap;\r\n      const w = 1,\r\n        h = 1; // we need just camera projection matrix inverse\r\n      // world matrix must be identity\r\n\r\n      _camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\r\n\r\n      setPoint('c', pointMap, geometry, _camera, 0, 0, -1);\r\n      setPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\r\n\r\n      setPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\r\n      setPoint('n2', pointMap, geometry, _camera, w, -h, -1);\r\n      setPoint('n3', pointMap, geometry, _camera, -w, h, -1);\r\n      setPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\r\n\r\n      setPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\r\n      setPoint('f2', pointMap, geometry, _camera, w, -h, 1);\r\n      setPoint('f3', pointMap, geometry, _camera, -w, h, 1);\r\n      setPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\r\n\r\n      setPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\r\n      setPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\r\n      setPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\r\n\r\n      setPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\r\n      setPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\r\n      setPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\r\n      setPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\r\n      setPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\r\n      setPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\r\n      setPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\r\n      setPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\r\n      geometry.getAttribute('position').needsUpdate = true;\r\n    }\r\n\r\n    dispose() {\r\n      this.geometry.dispose();\r\n      this.material.dispose();\r\n    }\r\n  }\r\n\r\n  function setPoint(point, pointMap, geometry, camera, x, y, z) {\r\n    _vector.set(x, y, z).unproject(camera);\r\n\r\n    const points = pointMap[point];\r\n\r\n    if (points !== undefined) {\r\n      const position = geometry.getAttribute('position');\r\n\r\n      for (let i = 0, l = points.length; i < l; i++) {\r\n        position.setXYZ(points[i], _vector.x, _vector.y, _vector.z);\r\n      }\r\n    }\r\n  }\r\n\r\n  const _box = /*@__PURE__*/ new Box3();\r\n\r\n  class BoxHelper extends LineSegments {\r\n    constructor(object, color = 0xffff00) {\r\n      const indices = new Uint16Array([\r\n        0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7,\r\n      ]);\r\n      const positions = new Float32Array(8 * 3);\r\n      const geometry = new BufferGeometry();\r\n      geometry.setIndex(new BufferAttribute(indices, 1));\r\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\r\n      super(\r\n        geometry,\r\n        new LineBasicMaterial({\r\n          color: color,\r\n          toneMapped: false,\r\n        }),\r\n      );\r\n      this.object = object;\r\n      this.type = 'BoxHelper';\r\n      this.matrixAutoUpdate = false;\r\n      this.update();\r\n    }\r\n\r\n    update(object) {\r\n      if (object !== undefined) {\r\n        console.warn('THREE.BoxHelper: .update() has no longer arguments.');\r\n      }\r\n\r\n      if (this.object !== undefined) {\r\n        _box.setFromObject(this.object);\r\n      }\r\n\r\n      if (_box.isEmpty()) return;\r\n      const min = _box.min;\r\n      const max = _box.max;\r\n      /*\r\n\t\t\t\t5____4\r\n\t\t\t1/___0/|\r\n\t\t\t| 6__|_7\r\n\t\t\t2/___3/\r\n\t\t\t\t0: max.x, max.y, max.z\r\n\t\t\t1: min.x, max.y, max.z\r\n\t\t\t2: min.x, min.y, max.z\r\n\t\t\t3: max.x, min.y, max.z\r\n\t\t\t4: max.x, max.y, min.z\r\n\t\t\t5: min.x, max.y, min.z\r\n\t\t\t6: min.x, min.y, min.z\r\n\t\t\t7: max.x, min.y, min.z\r\n\t\t\t*/\r\n\r\n      const position = this.geometry.attributes.position;\r\n      const array = position.array;\r\n      array[0] = max.x;\r\n      array[1] = max.y;\r\n      array[2] = max.z;\r\n      array[3] = min.x;\r\n      array[4] = max.y;\r\n      array[5] = max.z;\r\n      array[6] = min.x;\r\n      array[7] = min.y;\r\n      array[8] = max.z;\r\n      array[9] = max.x;\r\n      array[10] = min.y;\r\n      array[11] = max.z;\r\n      array[12] = max.x;\r\n      array[13] = max.y;\r\n      array[14] = min.z;\r\n      array[15] = min.x;\r\n      array[16] = max.y;\r\n      array[17] = min.z;\r\n      array[18] = min.x;\r\n      array[19] = min.y;\r\n      array[20] = min.z;\r\n      array[21] = max.x;\r\n      array[22] = min.y;\r\n      array[23] = min.z;\r\n      position.needsUpdate = true;\r\n      this.geometry.computeBoundingSphere();\r\n    }\r\n\r\n    setFromObject(object) {\r\n      this.object = object;\r\n      this.update();\r\n      return this;\r\n    }\r\n\r\n    copy(source) {\r\n      LineSegments.prototype.copy.call(this, source);\r\n      this.object = source.object;\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class Box3Helper extends LineSegments {\r\n    constructor(box, color = 0xffff00) {\r\n      const indices = new Uint16Array([\r\n        0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7,\r\n      ]);\r\n      const positions = [\r\n        1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1,\r\n      ];\r\n      const geometry = new BufferGeometry();\r\n      geometry.setIndex(new BufferAttribute(indices, 1));\r\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\r\n      super(\r\n        geometry,\r\n        new LineBasicMaterial({\r\n          color: color,\r\n          toneMapped: false,\r\n        }),\r\n      );\r\n      this.box = box;\r\n      this.type = 'Box3Helper';\r\n      this.geometry.computeBoundingSphere();\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      const box = this.box;\r\n      if (box.isEmpty()) return;\r\n      box.getCenter(this.position);\r\n      box.getSize(this.scale);\r\n      this.scale.multiplyScalar(0.5);\r\n      super.updateMatrixWorld(force);\r\n    }\r\n  }\r\n\r\n  class PlaneHelper extends Line {\r\n    constructor(plane, size = 1, hex = 0xffff00) {\r\n      const color = hex;\r\n      const positions = [\r\n        1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0,\r\n        0, 0,\r\n      ];\r\n      const geometry = new BufferGeometry();\r\n      geometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\r\n      geometry.computeBoundingSphere();\r\n      super(\r\n        geometry,\r\n        new LineBasicMaterial({\r\n          color: color,\r\n          toneMapped: false,\r\n        }),\r\n      );\r\n      this.type = 'PlaneHelper';\r\n      this.plane = plane;\r\n      this.size = size;\r\n      const positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\r\n      const geometry2 = new BufferGeometry();\r\n      geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\r\n      geometry2.computeBoundingSphere();\r\n      this.add(\r\n        new Mesh(\r\n          geometry2,\r\n          new MeshBasicMaterial({\r\n            color: color,\r\n            opacity: 0.2,\r\n            transparent: true,\r\n            depthWrite: false,\r\n            toneMapped: false,\r\n          }),\r\n        ),\r\n      );\r\n    }\r\n\r\n    updateMatrixWorld(force) {\r\n      let scale = -this.plane.constant;\r\n      if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\r\n\r\n      this.scale.set(0.5 * this.size, 0.5 * this.size, scale);\r\n      this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n      this.lookAt(this.plane.normal);\r\n      super.updateMatrixWorld(force);\r\n    }\r\n  }\r\n\r\n  const _axis = /*@__PURE__*/ new Vector3();\r\n\r\n  let _lineGeometry, _coneGeometry;\r\n\r\n  class ArrowHelper extends Object3D {\r\n    // dir is assumed to be normalized\r\n    constructor(\r\n      dir = new Vector3(0, 0, 1),\r\n      origin = new Vector3(0, 0, 0),\r\n      length = 1,\r\n      color = 0xffff00,\r\n      headLength = length * 0.2,\r\n      headWidth = headLength * 0.2,\r\n    ) {\r\n      super();\r\n      this.type = 'ArrowHelper';\r\n\r\n      if (_lineGeometry === undefined) {\r\n        _lineGeometry = new BufferGeometry();\r\n\r\n        _lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\r\n\r\n        _coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\r\n\r\n        _coneGeometry.translate(0, -0.5, 0);\r\n      }\r\n\r\n      this.position.copy(origin);\r\n      this.line = new Line(\r\n        _lineGeometry,\r\n        new LineBasicMaterial({\r\n          color: color,\r\n          toneMapped: false,\r\n        }),\r\n      );\r\n      this.line.matrixAutoUpdate = false;\r\n      this.add(this.line);\r\n      this.cone = new Mesh(\r\n        _coneGeometry,\r\n        new MeshBasicMaterial({\r\n          color: color,\r\n          toneMapped: false,\r\n        }),\r\n      );\r\n      this.cone.matrixAutoUpdate = false;\r\n      this.add(this.cone);\r\n      this.setDirection(dir);\r\n      this.setLength(length, headLength, headWidth);\r\n    }\r\n\r\n    setDirection(dir) {\r\n      // dir is assumed to be normalized\r\n      if (dir.y > 0.99999) {\r\n        this.quaternion.set(0, 0, 0, 1);\r\n      } else if (dir.y < -0.99999) {\r\n        this.quaternion.set(1, 0, 0, 0);\r\n      } else {\r\n        _axis.set(dir.z, 0, -dir.x).normalize();\r\n\r\n        const radians = Math.acos(dir.y);\r\n        this.quaternion.setFromAxisAngle(_axis, radians);\r\n      }\r\n    }\r\n\r\n    setLength(length, headLength = length * 0.2, headWidth = headLength * 0.2) {\r\n      this.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\r\n\r\n      this.line.updateMatrix();\r\n      this.cone.scale.set(headWidth, headLength, headWidth);\r\n      this.cone.position.y = length;\r\n      this.cone.updateMatrix();\r\n    }\r\n\r\n    setColor(color) {\r\n      this.line.material.color.set(color);\r\n      this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source, false);\r\n      this.line.copy(source.line);\r\n      this.cone.copy(source.cone);\r\n      return this;\r\n    }\r\n  }\r\n\r\n  class AxesHelper extends LineSegments {\r\n    constructor(size = 1) {\r\n      const vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\r\n      const colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\r\n      const geometry = new BufferGeometry();\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\r\n      const material = new LineBasicMaterial({\r\n        vertexColors: true,\r\n        toneMapped: false,\r\n      });\r\n      super(geometry, material);\r\n      this.type = 'AxesHelper';\r\n    }\r\n\r\n    dispose() {\r\n      this.geometry.dispose();\r\n      this.material.dispose();\r\n    }\r\n  }\r\n\r\n  const _floatView = new Float32Array(1);\r\n\r\n  const _int32View = new Int32Array(_floatView.buffer);\r\n\r\n  class DataUtils {\r\n    // Converts float32 to float16 (stored as uint16 value).\r\n    static toHalfFloat(val) {\r\n      // Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\r\n\r\n      /* This method is faster than the OpenEXR implementation (very often\r\n       * used, eg. in Ogre), with the additional benefit of rounding, inspired\r\n       * by James Tursa?s half-precision code. */\r\n      _floatView[0] = val;\r\n      const x = _int32View[0];\r\n      let bits = (x >> 16) & 0x8000;\r\n      /* Get the sign */\r\n\r\n      let m = (x >> 12) & 0x07ff;\r\n      /* Keep one extra bit for rounding */\r\n\r\n      const e = (x >> 23) & 0xff;\r\n      /* Using int is faster here */\r\n\r\n      /* If zero, or denormal, or exponent underflows too much for a denormal\r\n       * half, return signed zero. */\r\n\r\n      if (e < 103) return bits;\r\n      /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\r\n\r\n      if (e > 142) {\r\n        bits |= 0x7c00;\r\n        /* If exponent was 0xff and one mantissa bit was set, it means NaN,\r\n         * not Inf, so make sure we set one mantissa bit too. */\r\n\r\n        bits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\r\n        return bits;\r\n      }\r\n      /* If exponent underflows but not too much, return a denormal */\r\n\r\n      if (e < 113) {\r\n        m |= 0x0800;\r\n        /* Extra rounding may overflow and set mantissa to 0 and exponent\r\n         * to 1, which is OK. */\r\n\r\n        bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n        return bits;\r\n      }\r\n\r\n      bits |= ((e - 112) << 10) | (m >> 1);\r\n      /* Extra rounding. An overflow will set mantissa to 0 and increment\r\n       * the exponent, which is OK. */\r\n\r\n      bits += m & 1;\r\n      return bits;\r\n    }\r\n  }\r\n\r\n  const LOD_MIN = 4;\r\n  const LOD_MAX = 8;\r\n  const SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\r\n  // chosen to approximate a Trowbridge-Reitz distribution function times the\r\n  // geometric shadowing function. These sigma values squared must match the\r\n  // variance #defines in cube_uv_reflection_fragment.glsl.js.\r\n\r\n  const EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\r\n  const TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\r\n  // samples and exit early, but not recompile the shader.\r\n\r\n  const MAX_SAMPLES = 20;\r\n  const ENCODINGS = {\r\n    [LinearEncoding]: 0,\r\n    [sRGBEncoding]: 1,\r\n    [RGBEEncoding]: 2,\r\n    [RGBM7Encoding]: 3,\r\n    [RGBM16Encoding]: 4,\r\n    [RGBDEncoding]: 5,\r\n    [GammaEncoding]: 6,\r\n  };\r\n  const backgroundMaterial = new MeshBasicMaterial({\r\n    side: BackSide,\r\n    depthWrite: false,\r\n    depthTest: false,\r\n  });\r\n  const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\r\n\r\n  const _flatCamera = /*@__PURE__*/ new OrthographicCamera();\r\n\r\n  const { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();\r\n\r\n  const _clearColor = /*@__PURE__*/ new Color();\r\n\r\n  let _oldTarget = null; // Golden Ratio\r\n\r\n  const PHI = (1 + Math.sqrt(5)) / 2;\r\n  const INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\r\n  // same axis), used as axis directions evenly spread on a sphere.\r\n\r\n  const _axisDirections = [\r\n    /*@__PURE__*/ new Vector3(1, 1, 1),\r\n    /*@__PURE__*/ new Vector3(-1, 1, 1),\r\n    /*@__PURE__*/ new Vector3(1, 1, -1),\r\n    /*@__PURE__*/ new Vector3(-1, 1, -1),\r\n    /*@__PURE__*/ new Vector3(0, PHI, INV_PHI),\r\n    /*@__PURE__*/ new Vector3(0, PHI, -INV_PHI),\r\n    /*@__PURE__*/ new Vector3(INV_PHI, 0, PHI),\r\n    /*@__PURE__*/ new Vector3(-INV_PHI, 0, PHI),\r\n    /*@__PURE__*/ new Vector3(PHI, INV_PHI, 0),\r\n    /*@__PURE__*/ new Vector3(-PHI, INV_PHI, 0),\r\n  ];\r\n  /**\r\n   * This class generates a Prefiltered, Mipmapped Radiance Environment Map\r\n   * (PMREM) from a cubeMap environment texture. This allows different levels of\r\n   * blur to be quickly accessed based on material roughness. It is packed into a\r\n   * special CubeUV format that allows us to perform custom interpolation so that\r\n   * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\r\n   * chain, it only goes down to the LOD_MIN level (above), and then creates extra\r\n   * even more filtered 'mips' at the same LOD_MIN resolution, associated with\r\n   * higher roughness levels. In this way we maintain resolution to smoothly\r\n   * interpolate diffuse lighting while limiting sampling computation.\r\n   *\r\n   * Paper: Fast, Accurate Image-Based Lighting\r\n   * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\r\n   */\r\n\r\n  function convertLinearToRGBE(color) {\r\n    const maxComponent = Math.max(color.r, color.g, color.b);\r\n    const fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\r\n    color.multiplyScalar(Math.pow(2.0, -fExp));\r\n    const alpha = (fExp + 128.0) / 255.0;\r\n    return alpha;\r\n  }\r\n\r\n  class PMREMGenerator {\r\n    constructor(renderer) {\r\n      this._renderer = renderer;\r\n      this._pingPongRenderTarget = null;\r\n      this._blurMaterial = _getBlurShader(MAX_SAMPLES);\r\n      this._equirectShader = null;\r\n      this._cubemapShader = null;\r\n\r\n      this._compileMaterial(this._blurMaterial);\r\n    }\r\n    /**\r\n     * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n     * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n     * in radians to be applied to the scene before PMREM generation. Optional near\r\n     * and far planes ensure the scene is rendered in its entirety (the cubeCamera\r\n     * is placed at the origin).\r\n     */\r\n\r\n    fromScene(scene, sigma = 0, near = 0.1, far = 100) {\r\n      _oldTarget = this._renderer.getRenderTarget();\r\n\r\n      const cubeUVRenderTarget = this._allocateTargets();\r\n\r\n      this._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\r\n\r\n      if (sigma > 0) {\r\n        this._blur(cubeUVRenderTarget, 0, 0, sigma);\r\n      }\r\n\r\n      this._applyPMREM(cubeUVRenderTarget);\r\n\r\n      this._cleanup(cubeUVRenderTarget);\r\n\r\n      return cubeUVRenderTarget;\r\n    }\r\n    /**\r\n     * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n     * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\r\n     * as this matches best with the 256 x 256 cubemap output.\r\n     */\r\n\r\n    fromEquirectangular(equirectangular) {\r\n      return this._fromTexture(equirectangular);\r\n    }\r\n    /**\r\n     * Generates a PMREM from an cubemap texture, which can be either LDR\r\n     * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\r\n     * as this matches best with the 256 x 256 cubemap output.\r\n     */\r\n\r\n    fromCubemap(cubemap) {\r\n      return this._fromTexture(cubemap);\r\n    }\r\n    /**\r\n     * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\r\n     * your texture's network fetch for increased concurrency.\r\n     */\r\n\r\n    compileCubemapShader() {\r\n      if (this._cubemapShader === null) {\r\n        this._cubemapShader = _getCubemapShader();\r\n\r\n        this._compileMaterial(this._cubemapShader);\r\n      }\r\n    }\r\n    /**\r\n     * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\r\n     * your texture's network fetch for increased concurrency.\r\n     */\r\n\r\n    compileEquirectangularShader() {\r\n      if (this._equirectShader === null) {\r\n        this._equirectShader = _getEquirectShader();\r\n\r\n        this._compileMaterial(this._equirectShader);\r\n      }\r\n    }\r\n    /**\r\n     * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\r\n     * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\r\n     * one of them will cause any others to also become unusable.\r\n     */\r\n\r\n    dispose() {\r\n      this._blurMaterial.dispose();\r\n\r\n      if (this._cubemapShader !== null) this._cubemapShader.dispose();\r\n      if (this._equirectShader !== null) this._equirectShader.dispose();\r\n\r\n      for (let i = 0; i < _lodPlanes.length; i++) {\r\n        _lodPlanes[i].dispose();\r\n      }\r\n    } // private interface\r\n\r\n    _cleanup(outputTarget) {\r\n      this._pingPongRenderTarget.dispose();\r\n\r\n      this._renderer.setRenderTarget(_oldTarget);\r\n\r\n      outputTarget.scissorTest = false;\r\n\r\n      _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\r\n    }\r\n\r\n    _fromTexture(texture) {\r\n      _oldTarget = this._renderer.getRenderTarget();\r\n\r\n      const cubeUVRenderTarget = this._allocateTargets(texture);\r\n\r\n      this._textureToCubeUV(texture, cubeUVRenderTarget);\r\n\r\n      this._applyPMREM(cubeUVRenderTarget);\r\n\r\n      this._cleanup(cubeUVRenderTarget);\r\n\r\n      return cubeUVRenderTarget;\r\n    }\r\n\r\n    _allocateTargets(texture) {\r\n      // warning: null texture is valid\r\n      const params = {\r\n        magFilter: NearestFilter,\r\n        minFilter: NearestFilter,\r\n        generateMipmaps: false,\r\n        type: UnsignedByteType,\r\n        format: RGBEFormat,\r\n        encoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\r\n        depthBuffer: false,\r\n      };\r\n\r\n      const cubeUVRenderTarget = _createRenderTarget(params);\r\n\r\n      cubeUVRenderTarget.depthBuffer = texture ? false : true;\r\n      this._pingPongRenderTarget = _createRenderTarget(params);\r\n      return cubeUVRenderTarget;\r\n    }\r\n\r\n    _compileMaterial(material) {\r\n      const tmpMesh = new Mesh(_lodPlanes[0], material);\r\n\r\n      this._renderer.compile(tmpMesh, _flatCamera);\r\n    }\r\n\r\n    _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\r\n      const fov = 90;\r\n      const aspect = 1;\r\n      const cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\r\n      const upSign = [1, -1, 1, 1, 1, 1];\r\n      const forwardSign = [1, 1, 1, -1, -1, -1];\r\n      const renderer = this._renderer;\r\n      const originalAutoClear = renderer.autoClear;\r\n      const outputEncoding = renderer.outputEncoding;\r\n      const toneMapping = renderer.toneMapping;\r\n      renderer.getClearColor(_clearColor);\r\n      renderer.toneMapping = NoToneMapping;\r\n      renderer.outputEncoding = LinearEncoding;\r\n      renderer.autoClear = false;\r\n      let useSolidColor = false;\r\n      const background = scene.background;\r\n\r\n      if (background) {\r\n        if (background.isColor) {\r\n          backgroundMaterial.color.copy(background).convertSRGBToLinear();\r\n          scene.background = null;\r\n          const alpha = convertLinearToRGBE(backgroundMaterial.color);\r\n          backgroundMaterial.opacity = alpha;\r\n          useSolidColor = true;\r\n        }\r\n      } else {\r\n        backgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\r\n        const alpha = convertLinearToRGBE(backgroundMaterial.color);\r\n        backgroundMaterial.opacity = alpha;\r\n        useSolidColor = true;\r\n      }\r\n\r\n      for (let i = 0; i < 6; i++) {\r\n        const col = i % 3;\r\n\r\n        if (col == 0) {\r\n          cubeCamera.up.set(0, upSign[i], 0);\r\n          cubeCamera.lookAt(forwardSign[i], 0, 0);\r\n        } else if (col == 1) {\r\n          cubeCamera.up.set(0, 0, upSign[i]);\r\n          cubeCamera.lookAt(0, forwardSign[i], 0);\r\n        } else {\r\n          cubeCamera.up.set(0, upSign[i], 0);\r\n          cubeCamera.lookAt(0, 0, forwardSign[i]);\r\n        }\r\n\r\n        _setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\r\n\r\n        renderer.setRenderTarget(cubeUVRenderTarget);\r\n\r\n        if (useSolidColor) {\r\n          renderer.render(backgroundBox, cubeCamera);\r\n        }\r\n\r\n        renderer.render(scene, cubeCamera);\r\n      }\r\n\r\n      renderer.toneMapping = toneMapping;\r\n      renderer.outputEncoding = outputEncoding;\r\n      renderer.autoClear = originalAutoClear;\r\n    }\r\n\r\n    _textureToCubeUV(texture, cubeUVRenderTarget) {\r\n      const renderer = this._renderer;\r\n\r\n      if (texture.isCubeTexture) {\r\n        if (this._cubemapShader == null) {\r\n          this._cubemapShader = _getCubemapShader();\r\n        }\r\n      } else {\r\n        if (this._equirectShader == null) {\r\n          this._equirectShader = _getEquirectShader();\r\n        }\r\n      }\r\n\r\n      const material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\r\n      const mesh = new Mesh(_lodPlanes[0], material);\r\n      const uniforms = material.uniforms;\r\n      uniforms['envMap'].value = texture;\r\n\r\n      if (!texture.isCubeTexture) {\r\n        uniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\r\n      }\r\n\r\n      uniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\r\n      uniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\r\n\r\n      _setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\r\n\r\n      renderer.setRenderTarget(cubeUVRenderTarget);\r\n      renderer.render(mesh, _flatCamera);\r\n    }\r\n\r\n    _applyPMREM(cubeUVRenderTarget) {\r\n      const renderer = this._renderer;\r\n      const autoClear = renderer.autoClear;\r\n      renderer.autoClear = false;\r\n\r\n      for (let i = 1; i < TOTAL_LODS; i++) {\r\n        const sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\r\n        const poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\r\n\r\n        this._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\r\n      }\r\n\r\n      renderer.autoClear = autoClear;\r\n    }\r\n    /**\r\n     * This is a two-pass Gaussian blur for a cubemap. Normally this is done\r\n     * vertically and horizontally, but this breaks down on a cube. Here we apply\r\n     * the blur latitudinally (around the poles), and then longitudinally (towards\r\n     * the poles) to approximate the orthogonally-separable blur. It is least\r\n     * accurate at the poles, but still does a decent job.\r\n     */\r\n\r\n    _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\r\n      const pingPongRenderTarget = this._pingPongRenderTarget;\r\n\r\n      this._halfBlur(\r\n        cubeUVRenderTarget,\r\n        pingPongRenderTarget,\r\n        lodIn,\r\n        lodOut,\r\n        sigma,\r\n        'latitudinal',\r\n        poleAxis,\r\n      );\r\n\r\n      this._halfBlur(\r\n        pingPongRenderTarget,\r\n        cubeUVRenderTarget,\r\n        lodOut,\r\n        lodOut,\r\n        sigma,\r\n        'longitudinal',\r\n        poleAxis,\r\n      );\r\n    }\r\n\r\n    _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\r\n      const renderer = this._renderer;\r\n      const blurMaterial = this._blurMaterial;\r\n\r\n      if (direction !== 'latitudinal' && direction !== 'longitudinal') {\r\n        console.error('blur direction must be either latitudinal or longitudinal!');\r\n      } // Number of standard deviations at which to cut off the discrete approximation.\r\n\r\n      const STANDARD_DEVIATIONS = 3;\r\n      const blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\r\n      const blurUniforms = blurMaterial.uniforms;\r\n      const pixels = _sizeLods[lodIn] - 1;\r\n      const radiansPerPixel = isFinite(sigmaRadians)\r\n        ? Math.PI / (2 * pixels)\r\n        : (2 * Math.PI) / (2 * MAX_SAMPLES - 1);\r\n      const sigmaPixels = sigmaRadians / radiansPerPixel;\r\n      const samples = isFinite(sigmaRadians)\r\n        ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels)\r\n        : MAX_SAMPLES;\r\n\r\n      if (samples > MAX_SAMPLES) {\r\n        console.warn(\r\n          `sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`,\r\n        );\r\n      }\r\n\r\n      const weights = [];\r\n      let sum = 0;\r\n\r\n      for (let i = 0; i < MAX_SAMPLES; ++i) {\r\n        const x = i / sigmaPixels;\r\n        const weight = Math.exp((-x * x) / 2);\r\n        weights.push(weight);\r\n\r\n        if (i == 0) {\r\n          sum += weight;\r\n        } else if (i < samples) {\r\n          sum += 2 * weight;\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < weights.length; i++) {\r\n        weights[i] = weights[i] / sum;\r\n      }\r\n\r\n      blurUniforms['envMap'].value = targetIn.texture;\r\n      blurUniforms['samples'].value = samples;\r\n      blurUniforms['weights'].value = weights;\r\n      blurUniforms['latitudinal'].value = direction === 'latitudinal';\r\n\r\n      if (poleAxis) {\r\n        blurUniforms['poleAxis'].value = poleAxis;\r\n      }\r\n\r\n      blurUniforms['dTheta'].value = radiansPerPixel;\r\n      blurUniforms['mipInt'].value = LOD_MAX - lodIn;\r\n      blurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\r\n      blurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\r\n      const outputSize = _sizeLods[lodOut];\r\n      const x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\r\n      const y =\r\n        (lodOut === 0 ? 0 : 2 * SIZE_MAX) +\r\n        2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\r\n\r\n      _setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\r\n\r\n      renderer.setRenderTarget(targetOut);\r\n      renderer.render(blurMesh, _flatCamera);\r\n    }\r\n  }\r\n\r\n  function _isLDR(texture) {\r\n    if (texture === undefined || texture.type !== UnsignedByteType) return false;\r\n    return (\r\n      texture.encoding === LinearEncoding ||\r\n      texture.encoding === sRGBEncoding ||\r\n      texture.encoding === GammaEncoding\r\n    );\r\n  }\r\n\r\n  function _createPlanes() {\r\n    const _lodPlanes = [];\r\n    const _sizeLods = [];\r\n    const _sigmas = [];\r\n    let lod = LOD_MAX;\r\n\r\n    for (let i = 0; i < TOTAL_LODS; i++) {\r\n      const sizeLod = Math.pow(2, lod);\r\n\r\n      _sizeLods.push(sizeLod);\r\n\r\n      let sigma = 1.0 / sizeLod;\r\n\r\n      if (i > LOD_MAX - LOD_MIN) {\r\n        sigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\r\n      } else if (i == 0) {\r\n        sigma = 0;\r\n      }\r\n\r\n      _sigmas.push(sigma);\r\n\r\n      const texelSize = 1.0 / (sizeLod - 1);\r\n      const min = -texelSize / 2;\r\n      const max = 1 + texelSize / 2;\r\n      const uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\r\n      const cubeFaces = 6;\r\n      const vertices = 6;\r\n      const positionSize = 3;\r\n      const uvSize = 2;\r\n      const faceIndexSize = 1;\r\n      const position = new Float32Array(positionSize * vertices * cubeFaces);\r\n      const uv = new Float32Array(uvSize * vertices * cubeFaces);\r\n      const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\r\n\r\n      for (let face = 0; face < cubeFaces; face++) {\r\n        const x = ((face % 3) * 2) / 3 - 1;\r\n        const y = face > 2 ? 0 : -1;\r\n        const coordinates = [\r\n          x,\r\n          y,\r\n          0,\r\n          x + 2 / 3,\r\n          y,\r\n          0,\r\n          x + 2 / 3,\r\n          y + 1,\r\n          0,\r\n          x,\r\n          y,\r\n          0,\r\n          x + 2 / 3,\r\n          y + 1,\r\n          0,\r\n          x,\r\n          y + 1,\r\n          0,\r\n        ];\r\n        position.set(coordinates, positionSize * vertices * face);\r\n        uv.set(uv1, uvSize * vertices * face);\r\n        const fill = [face, face, face, face, face, face];\r\n        faceIndex.set(fill, faceIndexSize * vertices * face);\r\n      }\r\n\r\n      const planes = new BufferGeometry();\r\n      planes.setAttribute('position', new BufferAttribute(position, positionSize));\r\n      planes.setAttribute('uv', new BufferAttribute(uv, uvSize));\r\n      planes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\r\n\r\n      _lodPlanes.push(planes);\r\n\r\n      if (lod > LOD_MIN) {\r\n        lod--;\r\n      }\r\n    }\r\n\r\n    return {\r\n      _lodPlanes,\r\n      _sizeLods,\r\n      _sigmas,\r\n    };\r\n  }\r\n\r\n  function _createRenderTarget(params) {\r\n    const cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\r\n    cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\r\n    cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\r\n    cubeUVRenderTarget.scissorTest = true;\r\n    return cubeUVRenderTarget;\r\n  }\r\n\r\n  function _setViewport(target, x, y, width, height) {\r\n    target.viewport.set(x, y, width, height);\r\n    target.scissor.set(x, y, width, height);\r\n  }\r\n\r\n  function _getBlurShader(maxSamples) {\r\n    const weights = new Float32Array(maxSamples);\r\n    const poleAxis = new Vector3(0, 1, 0);\r\n    const shaderMaterial = new RawShaderMaterial({\r\n      name: 'SphericalGaussianBlur',\r\n      defines: {\r\n        n: maxSamples,\r\n      },\r\n      uniforms: {\r\n        envMap: {\r\n          value: null,\r\n        },\r\n        samples: {\r\n          value: 1,\r\n        },\r\n        weights: {\r\n          value: weights,\r\n        },\r\n        latitudinal: {\r\n          value: false,\r\n        },\r\n        dTheta: {\r\n          value: 0,\r\n        },\r\n        mipInt: {\r\n          value: 0,\r\n        },\r\n        poleAxis: {\r\n          value: poleAxis,\r\n        },\r\n        inputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n        outputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n      },\r\n      vertexShader: _getCommonVertexShader(),\r\n      fragmentShader:\r\n        /* glsl */\r\n        `\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform sampler2D envMap;\r\n\t\t\tuniform int samples;\r\n\t\t\tuniform float weights[ n ];\r\n\t\t\tuniform bool latitudinal;\r\n\t\t\tuniform float dTheta;\r\n\t\t\tuniform float mipInt;\r\n\t\t\tuniform vec3 poleAxis;\r\n\r\n\t\t\t${_getEncodings()}\r\n\r\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\r\n\t\t\t#include <cube_uv_reflection_fragment>\r\n\r\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\r\n\r\n\t\t\t\tfloat cosTheta = cos( theta );\r\n\t\t\t\t// Rodrigues' axis-angle rotation\r\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\r\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\r\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\r\n\r\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\r\n\r\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\r\n\r\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis = normalize( axis );\r\n\r\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\r\n\r\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\r\n\r\n\t\t\t\t\tif ( i >= samples ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfloat theta = dTheta * float( i );\r\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\r\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n      blending: NoBlending,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n    });\r\n    return shaderMaterial;\r\n  }\r\n\r\n  function _getEquirectShader() {\r\n    const texelSize = new Vector2(1, 1);\r\n    const shaderMaterial = new RawShaderMaterial({\r\n      name: 'EquirectangularToCubeUV',\r\n      uniforms: {\r\n        envMap: {\r\n          value: null,\r\n        },\r\n        texelSize: {\r\n          value: texelSize,\r\n        },\r\n        inputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n        outputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n      },\r\n      vertexShader: _getCommonVertexShader(),\r\n      fragmentShader:\r\n        /* glsl */\r\n        `\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform sampler2D envMap;\r\n\t\t\tuniform vec2 texelSize;\r\n\r\n\t\t\t${_getEncodings()}\r\n\r\n\t\t\t#include <common>\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\r\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\r\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\r\n\r\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\r\n\t\t\t\tuv -= f * texelSize;\r\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\r\n\t\t\t\tuv.x += texelSize.x;\r\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\r\n\t\t\t\tuv.y += texelSize.y;\r\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\r\n\t\t\t\tuv.x -= texelSize.x;\r\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\r\n\r\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\r\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\r\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\r\n\r\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n      blending: NoBlending,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n    });\r\n    return shaderMaterial;\r\n  }\r\n\r\n  function _getCubemapShader() {\r\n    const shaderMaterial = new RawShaderMaterial({\r\n      name: 'CubemapToCubeUV',\r\n      uniforms: {\r\n        envMap: {\r\n          value: null,\r\n        },\r\n        inputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n        outputEncoding: {\r\n          value: ENCODINGS[LinearEncoding],\r\n        },\r\n      },\r\n      vertexShader: _getCommonVertexShader(),\r\n      fragmentShader:\r\n        /* glsl */\r\n        `\r\n\r\n\t\t\tprecision mediump float;\r\n\t\t\tprecision mediump int;\r\n\r\n\t\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t\tuniform samplerCube envMap;\r\n\r\n\t\t\t${_getEncodings()}\r\n\r\n\t\t\tvoid main() {\r\n\r\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\r\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\r\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\r\n\r\n\t\t\t}\r\n\t\t`,\r\n      blending: NoBlending,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n    });\r\n    return shaderMaterial;\r\n  }\r\n\r\n  function _getCommonVertexShader() {\r\n    return (\r\n      /* glsl */\r\n      `\r\n\r\n\t\tprecision mediump float;\r\n\t\tprecision mediump int;\r\n\r\n\t\tattribute vec3 position;\r\n\t\tattribute vec2 uv;\r\n\t\tattribute float faceIndex;\r\n\r\n\t\tvarying vec3 vOutputDirection;\r\n\r\n\t\t// RH coordinate system; PMREM face-indexing convention\r\n\t\tvec3 getDirection( vec2 uv, float face ) {\r\n\r\n\t\t\tuv = 2.0 * uv - 1.0;\r\n\r\n\t\t\tvec3 direction = vec3( uv, 1.0 );\r\n\r\n\t\t\tif ( face == 0.0 ) {\r\n\r\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\r\n\r\n\t\t\t} else if ( face == 1.0 ) {\r\n\r\n\t\t\t\tdirection = direction.xzy;\r\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\r\n\r\n\t\t\t} else if ( face == 2.0 ) {\r\n\r\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\r\n\r\n\t\t\t} else if ( face == 3.0 ) {\r\n\r\n\t\t\t\tdirection = direction.zyx;\r\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\r\n\r\n\t\t\t} else if ( face == 4.0 ) {\r\n\r\n\t\t\t\tdirection = direction.xzy;\r\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\r\n\r\n\t\t\t} else if ( face == 5.0 ) {\r\n\r\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn direction;\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\r\n\t\t\tgl_Position = vec4( position, 1.0 );\r\n\r\n\t\t}\r\n\t`\r\n    );\r\n  }\r\n\r\n  function _getEncodings() {\r\n    return (\r\n      /* glsl */\r\n      `\r\n\r\n\t\tuniform int inputEncoding;\r\n\t\tuniform int outputEncoding;\r\n\r\n\t\t#include <encodings_pars_fragment>\r\n\r\n\t\tvec4 inputTexelToLinear( vec4 value ) {\r\n\r\n\t\t\tif ( inputEncoding == 0 ) {\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else if ( inputEncoding == 1 ) {\r\n\r\n\t\t\t\treturn sRGBToLinear( value );\r\n\r\n\t\t\t} else if ( inputEncoding == 2 ) {\r\n\r\n\t\t\t\treturn RGBEToLinear( value );\r\n\r\n\t\t\t} else if ( inputEncoding == 3 ) {\r\n\r\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\r\n\r\n\t\t\t} else if ( inputEncoding == 4 ) {\r\n\r\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\r\n\r\n\t\t\t} else if ( inputEncoding == 5 ) {\r\n\r\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn GammaToLinear( value, 2.2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvec4 linearToOutputTexel( vec4 value ) {\r\n\r\n\t\t\tif ( outputEncoding == 0 ) {\r\n\r\n\t\t\t\treturn value;\r\n\r\n\t\t\t} else if ( outputEncoding == 1 ) {\r\n\r\n\t\t\t\treturn LinearTosRGB( value );\r\n\r\n\t\t\t} else if ( outputEncoding == 2 ) {\r\n\r\n\t\t\t\treturn LinearToRGBE( value );\r\n\r\n\t\t\t} else if ( outputEncoding == 3 ) {\r\n\r\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\r\n\r\n\t\t\t} else if ( outputEncoding == 4 ) {\r\n\r\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\r\n\r\n\t\t\t} else if ( outputEncoding == 5 ) {\r\n\r\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn LinearToGamma( value, 2.2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\r\n\r\n\t\t\treturn inputTexelToLinear( color );\r\n\r\n\t\t}\r\n\t`\r\n    );\r\n  }\r\n\r\n  const LineStrip = 0;\r\n  const LinePieces = 1;\r\n  const NoColors = 0;\r\n  const FaceColors = 1;\r\n  const VertexColors = 2;\r\n  function MeshFaceMaterial(materials) {\r\n    console.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\r\n    return materials;\r\n  }\r\n  function MultiMaterial(materials = []) {\r\n    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\r\n    materials.isMultiMaterial = true;\r\n    materials.materials = materials;\r\n\r\n    materials.clone = function () {\r\n      return materials.slice();\r\n    };\r\n\r\n    return materials;\r\n  }\r\n  function PointCloud(geometry, material) {\r\n    console.warn('THREE.PointCloud has been renamed to THREE.Points.');\r\n    return new Points(geometry, material);\r\n  }\r\n  function Particle(material) {\r\n    console.warn('THREE.Particle has been renamed to THREE.Sprite.');\r\n    return new Sprite(material);\r\n  }\r\n  function ParticleSystem(geometry, material) {\r\n    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\r\n    return new Points(geometry, material);\r\n  }\r\n  function PointCloudMaterial(parameters) {\r\n    console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\r\n    return new PointsMaterial(parameters);\r\n  }\r\n  function ParticleBasicMaterial(parameters) {\r\n    console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\r\n    return new PointsMaterial(parameters);\r\n  }\r\n  function ParticleSystemMaterial(parameters) {\r\n    console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\r\n    return new PointsMaterial(parameters);\r\n  }\r\n  function Vertex(x, y, z) {\r\n    console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\r\n    return new Vector3(x, y, z);\r\n  } //\r\n\r\n  function DynamicBufferAttribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.',\r\n    );\r\n    return new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\r\n  }\r\n  function Int8Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.',\r\n    );\r\n    return new Int8BufferAttribute(array, itemSize);\r\n  }\r\n  function Uint8Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.',\r\n    );\r\n    return new Uint8BufferAttribute(array, itemSize);\r\n  }\r\n  function Uint8ClampedAttribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.',\r\n    );\r\n    return new Uint8ClampedBufferAttribute(array, itemSize);\r\n  }\r\n  function Int16Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.',\r\n    );\r\n    return new Int16BufferAttribute(array, itemSize);\r\n  }\r\n  function Uint16Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.',\r\n    );\r\n    return new Uint16BufferAttribute(array, itemSize);\r\n  }\r\n  function Int32Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.',\r\n    );\r\n    return new Int32BufferAttribute(array, itemSize);\r\n  }\r\n  function Uint32Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.',\r\n    );\r\n    return new Uint32BufferAttribute(array, itemSize);\r\n  }\r\n  function Float32Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.',\r\n    );\r\n    return new Float32BufferAttribute(array, itemSize);\r\n  }\r\n  function Float64Attribute(array, itemSize) {\r\n    console.warn(\r\n      'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.',\r\n    );\r\n    return new Float64BufferAttribute(array, itemSize);\r\n  } //\r\n\r\n  Curve.create = function (construct, getPoint) {\r\n    console.log('THREE.Curve.create() has been deprecated');\r\n    construct.prototype = Object.create(Curve.prototype);\r\n    construct.prototype.constructor = construct;\r\n    construct.prototype.getPoint = getPoint;\r\n    return construct;\r\n  }; //\r\n\r\n  Path.prototype.fromPoints = function (points) {\r\n    console.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\r\n    return this.setFromPoints(points);\r\n  }; //\r\n\r\n  function AxisHelper(size) {\r\n    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\r\n    return new AxesHelper(size);\r\n  }\r\n  function BoundingBoxHelper(object, color) {\r\n    console.warn(\r\n      'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.',\r\n    );\r\n    return new BoxHelper(object, color);\r\n  }\r\n  function EdgesHelper(object, hex) {\r\n    console.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\r\n    return new LineSegments(\r\n      new EdgesGeometry(object.geometry),\r\n      new LineBasicMaterial({\r\n        color: hex !== undefined ? hex : 0xffffff,\r\n      }),\r\n    );\r\n  }\r\n\r\n  GridHelper.prototype.setColors = function () {\r\n    console.error(\r\n      'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.',\r\n    );\r\n  };\r\n\r\n  SkeletonHelper.prototype.update = function () {\r\n    console.error('THREE.SkeletonHelper: update() no longer needs to be called.');\r\n  };\r\n\r\n  function WireframeHelper(object, hex) {\r\n    console.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\r\n    return new LineSegments(\r\n      new WireframeGeometry(object.geometry),\r\n      new LineBasicMaterial({\r\n        color: hex !== undefined ? hex : 0xffffff,\r\n      }),\r\n    );\r\n  } //\r\n\r\n  Loader.prototype.extractUrlBase = function (url) {\r\n    console.warn(\r\n      'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.',\r\n    );\r\n    return LoaderUtils.extractUrlBase(url);\r\n  };\r\n\r\n  Loader.Handlers = {\r\n    add: function () /* regex, loader */\r\n    {\r\n      console.error(\r\n        'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.',\r\n      );\r\n    },\r\n    get: function () /* file */\r\n    {\r\n      console.error(\r\n        'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.',\r\n      );\r\n    },\r\n  };\r\n  function XHRLoader(manager) {\r\n    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\r\n    return new FileLoader(manager);\r\n  }\r\n  function BinaryTextureLoader(manager) {\r\n    console.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\r\n    return new DataTextureLoader(manager);\r\n  } //\r\n\r\n  Box2.prototype.center = function (optionalTarget) {\r\n    console.warn('THREE.Box2: .center() has been renamed to .getCenter().');\r\n    return this.getCenter(optionalTarget);\r\n  };\r\n\r\n  Box2.prototype.empty = function () {\r\n    console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\r\n    return this.isEmpty();\r\n  };\r\n\r\n  Box2.prototype.isIntersectionBox = function (box) {\r\n    console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\r\n    return this.intersectsBox(box);\r\n  };\r\n\r\n  Box2.prototype.size = function (optionalTarget) {\r\n    console.warn('THREE.Box2: .size() has been renamed to .getSize().');\r\n    return this.getSize(optionalTarget);\r\n  }; //\r\n\r\n  Box3.prototype.center = function (optionalTarget) {\r\n    console.warn('THREE.Box3: .center() has been renamed to .getCenter().');\r\n    return this.getCenter(optionalTarget);\r\n  };\r\n\r\n  Box3.prototype.empty = function () {\r\n    console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\r\n    return this.isEmpty();\r\n  };\r\n\r\n  Box3.prototype.isIntersectionBox = function (box) {\r\n    console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\r\n    return this.intersectsBox(box);\r\n  };\r\n\r\n  Box3.prototype.isIntersectionSphere = function (sphere) {\r\n    console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\r\n    return this.intersectsSphere(sphere);\r\n  };\r\n\r\n  Box3.prototype.size = function (optionalTarget) {\r\n    console.warn('THREE.Box3: .size() has been renamed to .getSize().');\r\n    return this.getSize(optionalTarget);\r\n  }; //\r\n\r\n  Sphere.prototype.empty = function () {\r\n    console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\r\n    return this.isEmpty();\r\n  }; //\r\n\r\n  Frustum.prototype.setFromMatrix = function (m) {\r\n    console.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\r\n    return this.setFromProjectionMatrix(m);\r\n  }; //\r\n\r\n  Line3.prototype.center = function (optionalTarget) {\r\n    console.warn('THREE.Line3: .center() has been renamed to .getCenter().');\r\n    return this.getCenter(optionalTarget);\r\n  }; //\r\n\r\n  Matrix3.prototype.flattenToArrayOffset = function (array, offset) {\r\n    console.warn(\r\n      'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.',\r\n    );\r\n    return this.toArray(array, offset);\r\n  };\r\n\r\n  Matrix3.prototype.multiplyVector3 = function (vector) {\r\n    console.warn(\r\n      'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.',\r\n    );\r\n    return vector.applyMatrix3(this);\r\n  };\r\n\r\n  Matrix3.prototype.multiplyVector3Array = function () /* a */\r\n  {\r\n    console.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\r\n  };\r\n\r\n  Matrix3.prototype.applyToBufferAttribute = function (attribute) {\r\n    console.warn(\r\n      'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.',\r\n    );\r\n    return attribute.applyMatrix3(this);\r\n  };\r\n\r\n  Matrix3.prototype.applyToVector3Array = function () /* array, offset, length */\r\n  {\r\n    console.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\r\n  };\r\n\r\n  Matrix3.prototype.getInverse = function (matrix) {\r\n    console.warn(\r\n      'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.',\r\n    );\r\n    return this.copy(matrix).invert();\r\n  }; //\r\n\r\n  Matrix4.prototype.extractPosition = function (m) {\r\n    console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\r\n    return this.copyPosition(m);\r\n  };\r\n\r\n  Matrix4.prototype.flattenToArrayOffset = function (array, offset) {\r\n    console.warn(\r\n      'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.',\r\n    );\r\n    return this.toArray(array, offset);\r\n  };\r\n\r\n  Matrix4.prototype.getPosition = function () {\r\n    console.warn(\r\n      'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.',\r\n    );\r\n    return new Vector3().setFromMatrixColumn(this, 3);\r\n  };\r\n\r\n  Matrix4.prototype.setRotationFromQuaternion = function (q) {\r\n    console.warn(\r\n      'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().',\r\n    );\r\n    return this.makeRotationFromQuaternion(q);\r\n  };\r\n\r\n  Matrix4.prototype.multiplyToArray = function () {\r\n    console.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.multiplyVector3 = function (vector) {\r\n    console.warn(\r\n      'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.',\r\n    );\r\n    return vector.applyMatrix4(this);\r\n  };\r\n\r\n  Matrix4.prototype.multiplyVector4 = function (vector) {\r\n    console.warn(\r\n      'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.',\r\n    );\r\n    return vector.applyMatrix4(this);\r\n  };\r\n\r\n  Matrix4.prototype.multiplyVector3Array = function () /* a */\r\n  {\r\n    console.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.rotateAxis = function (v) {\r\n    console.warn(\r\n      'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.',\r\n    );\r\n    v.transformDirection(this);\r\n  };\r\n\r\n  Matrix4.prototype.crossVector = function (vector) {\r\n    console.warn(\r\n      'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.',\r\n    );\r\n    return vector.applyMatrix4(this);\r\n  };\r\n\r\n  Matrix4.prototype.translate = function () {\r\n    console.error('THREE.Matrix4: .translate() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.rotateX = function () {\r\n    console.error('THREE.Matrix4: .rotateX() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.rotateY = function () {\r\n    console.error('THREE.Matrix4: .rotateY() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.rotateZ = function () {\r\n    console.error('THREE.Matrix4: .rotateZ() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.rotateByAxis = function () {\r\n    console.error('THREE.Matrix4: .rotateByAxis() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.applyToBufferAttribute = function (attribute) {\r\n    console.warn(\r\n      'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.',\r\n    );\r\n    return attribute.applyMatrix4(this);\r\n  };\r\n\r\n  Matrix4.prototype.applyToVector3Array = function () /* array, offset, length */\r\n  {\r\n    console.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\r\n  };\r\n\r\n  Matrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\r\n    console.warn(\r\n      'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.',\r\n    );\r\n    return this.makePerspective(left, right, top, bottom, near, far);\r\n  };\r\n\r\n  Matrix4.prototype.getInverse = function (matrix) {\r\n    console.warn(\r\n      'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.',\r\n    );\r\n    return this.copy(matrix).invert();\r\n  }; //\r\n\r\n  Plane.prototype.isIntersectionLine = function (line) {\r\n    console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\r\n    return this.intersectsLine(line);\r\n  }; //\r\n\r\n  Quaternion.prototype.multiplyVector3 = function (vector) {\r\n    console.warn(\r\n      'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.',\r\n    );\r\n    return vector.applyQuaternion(this);\r\n  };\r\n\r\n  Quaternion.prototype.inverse = function () {\r\n    console.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\r\n    return this.invert();\r\n  }; //\r\n\r\n  Ray.prototype.isIntersectionBox = function (box) {\r\n    console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\r\n    return this.intersectsBox(box);\r\n  };\r\n\r\n  Ray.prototype.isIntersectionPlane = function (plane) {\r\n    console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\r\n    return this.intersectsPlane(plane);\r\n  };\r\n\r\n  Ray.prototype.isIntersectionSphere = function (sphere) {\r\n    console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\r\n    return this.intersectsSphere(sphere);\r\n  }; //\r\n\r\n  Triangle.prototype.area = function () {\r\n    console.warn('THREE.Triangle: .area() has been renamed to .getArea().');\r\n    return this.getArea();\r\n  };\r\n\r\n  Triangle.prototype.barycoordFromPoint = function (point, target) {\r\n    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\r\n    return this.getBarycoord(point, target);\r\n  };\r\n\r\n  Triangle.prototype.midpoint = function (target) {\r\n    console.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\r\n    return this.getMidpoint(target);\r\n  };\r\n\r\n  Triangle.prototypenormal = function (target) {\r\n    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\r\n    return this.getNormal(target);\r\n  };\r\n\r\n  Triangle.prototype.plane = function (target) {\r\n    console.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\r\n    return this.getPlane(target);\r\n  };\r\n\r\n  Triangle.barycoordFromPoint = function (point, a, b, c, target) {\r\n    console.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\r\n    return Triangle.getBarycoord(point, a, b, c, target);\r\n  };\r\n\r\n  Triangle.normal = function (a, b, c, target) {\r\n    console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\r\n    return Triangle.getNormal(a, b, c, target);\r\n  }; //\r\n\r\n  Shape.prototype.extractAllPoints = function (divisions) {\r\n    console.warn(\r\n      'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.',\r\n    );\r\n    return this.extractPoints(divisions);\r\n  };\r\n\r\n  Shape.prototype.extrude = function (options) {\r\n    console.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\r\n    return new ExtrudeGeometry(this, options);\r\n  };\r\n\r\n  Shape.prototype.makeGeometry = function (options) {\r\n    console.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\r\n    return new ShapeGeometry(this, options);\r\n  }; //\r\n\r\n  Vector2.prototype.fromAttribute = function (attribute, index, offset) {\r\n    console.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\r\n    return this.fromBufferAttribute(attribute, index, offset);\r\n  };\r\n\r\n  Vector2.prototype.distanceToManhattan = function (v) {\r\n    console.warn(\r\n      'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().',\r\n    );\r\n    return this.manhattanDistanceTo(v);\r\n  };\r\n\r\n  Vector2.prototype.lengthManhattan = function () {\r\n    console.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\r\n    return this.manhattanLength();\r\n  }; //\r\n\r\n  Vector3.prototype.setEulerFromRotationMatrix = function () {\r\n    console.error(\r\n      'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.',\r\n    );\r\n  };\r\n\r\n  Vector3.prototype.setEulerFromQuaternion = function () {\r\n    console.error(\r\n      'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.',\r\n    );\r\n  };\r\n\r\n  Vector3.prototype.getPositionFromMatrix = function (m) {\r\n    console.warn(\r\n      'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().',\r\n    );\r\n    return this.setFromMatrixPosition(m);\r\n  };\r\n\r\n  Vector3.prototype.getScaleFromMatrix = function (m) {\r\n    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\r\n    return this.setFromMatrixScale(m);\r\n  };\r\n\r\n  Vector3.prototype.getColumnFromMatrix = function (index, matrix) {\r\n    console.warn(\r\n      'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().',\r\n    );\r\n    return this.setFromMatrixColumn(matrix, index);\r\n  };\r\n\r\n  Vector3.prototype.applyProjection = function (m) {\r\n    console.warn(\r\n      'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.',\r\n    );\r\n    return this.applyMatrix4(m);\r\n  };\r\n\r\n  Vector3.prototype.fromAttribute = function (attribute, index, offset) {\r\n    console.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\r\n    return this.fromBufferAttribute(attribute, index, offset);\r\n  };\r\n\r\n  Vector3.prototype.distanceToManhattan = function (v) {\r\n    console.warn(\r\n      'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().',\r\n    );\r\n    return this.manhattanDistanceTo(v);\r\n  };\r\n\r\n  Vector3.prototype.lengthManhattan = function () {\r\n    console.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\r\n    return this.manhattanLength();\r\n  }; //\r\n\r\n  Vector4.prototype.fromAttribute = function (attribute, index, offset) {\r\n    console.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\r\n    return this.fromBufferAttribute(attribute, index, offset);\r\n  };\r\n\r\n  Vector4.prototype.lengthManhattan = function () {\r\n    console.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\r\n    return this.manhattanLength();\r\n  }; //\r\n\r\n  Object3D.prototype.getChildByName = function (name) {\r\n    console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\r\n    return this.getObjectByName(name);\r\n  };\r\n\r\n  Object3D.prototype.renderDepth = function () {\r\n    console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\r\n  };\r\n\r\n  Object3D.prototype.translate = function (distance, axis) {\r\n    console.warn(\r\n      'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.',\r\n    );\r\n    return this.translateOnAxis(axis, distance);\r\n  };\r\n\r\n  Object3D.prototype.getWorldRotation = function () {\r\n    console.error(\r\n      'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.',\r\n    );\r\n  };\r\n\r\n  Object3D.prototype.applyMatrix = function (matrix) {\r\n    console.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\r\n    return this.applyMatrix4(matrix);\r\n  };\r\n\r\n  Object.defineProperties(Object3D.prototype, {\r\n    eulerOrder: {\r\n      get: function () {\r\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\r\n        return this.rotation.order;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\r\n        this.rotation.order = value;\r\n      },\r\n    },\r\n    useQuaternion: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.',\r\n        );\r\n      },\r\n      set: function () {\r\n        console.warn(\r\n          'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.',\r\n        );\r\n      },\r\n    },\r\n  });\r\n\r\n  Mesh.prototype.setDrawMode = function () {\r\n    console.error(\r\n      'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.',\r\n    );\r\n  };\r\n\r\n  Object.defineProperties(Mesh.prototype, {\r\n    drawMode: {\r\n      get: function () {\r\n        console.error(\r\n          'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.',\r\n        );\r\n        return TrianglesDrawMode;\r\n      },\r\n      set: function () {\r\n        console.error(\r\n          'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.',\r\n        );\r\n      },\r\n    },\r\n  });\r\n\r\n  SkinnedMesh.prototype.initBones = function () {\r\n    console.error('THREE.SkinnedMesh: initBones() has been removed.');\r\n  }; //\r\n\r\n  PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\r\n    console.warn(\r\n      'THREE.PerspectiveCamera.setLens is deprecated. ' +\r\n        'Use .setFocalLength and .filmGauge for a photographic setup.',\r\n    );\r\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\r\n    this.setFocalLength(focalLength);\r\n  }; //\r\n\r\n  Object.defineProperties(Light.prototype, {\r\n    onlyShadow: {\r\n      set: function () {\r\n        console.warn('THREE.Light: .onlyShadow has been removed.');\r\n      },\r\n    },\r\n    shadowCameraFov: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\r\n        this.shadow.camera.fov = value;\r\n      },\r\n    },\r\n    shadowCameraLeft: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\r\n        this.shadow.camera.left = value;\r\n      },\r\n    },\r\n    shadowCameraRight: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\r\n        this.shadow.camera.right = value;\r\n      },\r\n    },\r\n    shadowCameraTop: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\r\n        this.shadow.camera.top = value;\r\n      },\r\n    },\r\n    shadowCameraBottom: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\r\n        this.shadow.camera.bottom = value;\r\n      },\r\n    },\r\n    shadowCameraNear: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\r\n        this.shadow.camera.near = value;\r\n      },\r\n    },\r\n    shadowCameraFar: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\r\n        this.shadow.camera.far = value;\r\n      },\r\n    },\r\n    shadowCameraVisible: {\r\n      set: function () {\r\n        console.warn(\r\n          'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.',\r\n        );\r\n      },\r\n    },\r\n    shadowBias: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowBias is now .shadow.bias.');\r\n        this.shadow.bias = value;\r\n      },\r\n    },\r\n    shadowDarkness: {\r\n      set: function () {\r\n        console.warn('THREE.Light: .shadowDarkness has been removed.');\r\n      },\r\n    },\r\n    shadowMapWidth: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\r\n        this.shadow.mapSize.width = value;\r\n      },\r\n    },\r\n    shadowMapHeight: {\r\n      set: function (value) {\r\n        console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\r\n        this.shadow.mapSize.height = value;\r\n      },\r\n    },\r\n  }); //\r\n\r\n  Object.defineProperties(BufferAttribute.prototype, {\r\n    length: {\r\n      get: function () {\r\n        console.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\r\n        return this.array.length;\r\n      },\r\n    },\r\n    dynamic: {\r\n      get: function () {\r\n        console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\r\n        return this.usage === DynamicDrawUsage;\r\n      },\r\n      set: function () /* value */\r\n      {\r\n        console.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\r\n        this.setUsage(DynamicDrawUsage);\r\n      },\r\n    },\r\n  });\r\n\r\n  BufferAttribute.prototype.setDynamic = function (value) {\r\n    console.warn(\r\n      'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.',\r\n    );\r\n    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\r\n    return this;\r\n  };\r\n\r\n  (BufferAttribute.prototype.copyIndicesArray = function () /* indices */\r\n  {\r\n    console.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\r\n  }),\r\n    (BufferAttribute.prototype.setArray = function () /* array */\r\n    {\r\n      console.error(\r\n        'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers',\r\n      );\r\n    }); //\r\n\r\n  BufferGeometry.prototype.addIndex = function (index) {\r\n    console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\r\n    this.setIndex(index);\r\n  };\r\n\r\n  BufferGeometry.prototype.addAttribute = function (name, attribute) {\r\n    console.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\r\n\r\n    if (\r\n      !(attribute && attribute.isBufferAttribute) &&\r\n      !(attribute && attribute.isInterleavedBufferAttribute)\r\n    ) {\r\n      console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\r\n      return this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\r\n    }\r\n\r\n    if (name === 'index') {\r\n      console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\r\n      this.setIndex(attribute);\r\n      return this;\r\n    }\r\n\r\n    return this.setAttribute(name, attribute);\r\n  };\r\n\r\n  BufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\r\n    if (indexOffset !== undefined) {\r\n      console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\r\n    }\r\n\r\n    console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\r\n    this.addGroup(start, count);\r\n  };\r\n\r\n  BufferGeometry.prototype.clearDrawCalls = function () {\r\n    console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\r\n    this.clearGroups();\r\n  };\r\n\r\n  BufferGeometry.prototype.computeOffsets = function () {\r\n    console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\r\n  };\r\n\r\n  BufferGeometry.prototype.removeAttribute = function (name) {\r\n    console.warn(\r\n      'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().',\r\n    );\r\n    return this.deleteAttribute(name);\r\n  };\r\n\r\n  BufferGeometry.prototype.applyMatrix = function (matrix) {\r\n    console.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\r\n    return this.applyMatrix4(matrix);\r\n  };\r\n\r\n  Object.defineProperties(BufferGeometry.prototype, {\r\n    drawcalls: {\r\n      get: function () {\r\n        console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\r\n        return this.groups;\r\n      },\r\n    },\r\n    offsets: {\r\n      get: function () {\r\n        console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\r\n        return this.groups;\r\n      },\r\n    },\r\n  });\r\n\r\n  InterleavedBuffer.prototype.setDynamic = function (value) {\r\n    console.warn(\r\n      'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.',\r\n    );\r\n    this.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\r\n    return this;\r\n  };\r\n\r\n  InterleavedBuffer.prototype.setArray = function () /* array */\r\n  {\r\n    console.error(\r\n      'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers',\r\n    );\r\n  }; //\r\n\r\n  ExtrudeGeometry.prototype.getArrays = function () {\r\n    console.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\r\n  };\r\n\r\n  ExtrudeGeometry.prototype.addShapeList = function () {\r\n    console.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\r\n  };\r\n\r\n  ExtrudeGeometry.prototype.addShape = function () {\r\n    console.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\r\n  }; //\r\n\r\n  Scene.prototype.dispose = function () {\r\n    console.error('THREE.Scene: .dispose() has been removed.');\r\n  }; //\r\n\r\n  Uniform.prototype.onUpdate = function () {\r\n    console.warn(\r\n      'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.',\r\n    );\r\n    return this;\r\n  }; //\r\n\r\n  Object.defineProperties(Material.prototype, {\r\n    wrapAround: {\r\n      get: function () {\r\n        console.warn('THREE.Material: .wrapAround has been removed.');\r\n      },\r\n      set: function () {\r\n        console.warn('THREE.Material: .wrapAround has been removed.');\r\n      },\r\n    },\r\n    overdraw: {\r\n      get: function () {\r\n        console.warn('THREE.Material: .overdraw has been removed.');\r\n      },\r\n      set: function () {\r\n        console.warn('THREE.Material: .overdraw has been removed.');\r\n      },\r\n    },\r\n    wrapRGB: {\r\n      get: function () {\r\n        console.warn('THREE.Material: .wrapRGB has been removed.');\r\n        return new Color();\r\n      },\r\n    },\r\n    shading: {\r\n      get: function () {\r\n        console.error(\r\n          'THREE.' +\r\n            this.type +\r\n            ': .shading has been removed. Use the boolean .flatShading instead.',\r\n        );\r\n      },\r\n      set: function (value) {\r\n        console.warn(\r\n          'THREE.' +\r\n            this.type +\r\n            ': .shading has been removed. Use the boolean .flatShading instead.',\r\n        );\r\n        this.flatShading = value === FlatShading;\r\n      },\r\n    },\r\n    stencilMask: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.',\r\n        );\r\n        return this.stencilFuncMask;\r\n      },\r\n      set: function (value) {\r\n        console.warn(\r\n          'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.',\r\n        );\r\n        this.stencilFuncMask = value;\r\n      },\r\n    },\r\n  });\r\n  Object.defineProperties(ShaderMaterial.prototype, {\r\n    derivatives: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.',\r\n        );\r\n        return this.extensions.derivatives;\r\n      },\r\n      set: function (value) {\r\n        console.warn(\r\n          'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.',\r\n        );\r\n        this.extensions.derivatives = value;\r\n      },\r\n    },\r\n  }); //\r\n\r\n  WebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\r\n    console.warn(\r\n      'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.',\r\n    );\r\n    this.setRenderTarget(renderTarget);\r\n    this.clear(color, depth, stencil);\r\n  };\r\n\r\n  WebGLRenderer.prototype.animate = function (callback) {\r\n    console.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\r\n    this.setAnimationLoop(callback);\r\n  };\r\n\r\n  WebGLRenderer.prototype.getCurrentRenderTarget = function () {\r\n    console.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\r\n    return this.getRenderTarget();\r\n  };\r\n\r\n  WebGLRenderer.prototype.getMaxAnisotropy = function () {\r\n    console.warn(\r\n      'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().',\r\n    );\r\n    return this.capabilities.getMaxAnisotropy();\r\n  };\r\n\r\n  WebGLRenderer.prototype.getPrecision = function () {\r\n    console.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\r\n    return this.capabilities.precision;\r\n  };\r\n\r\n  WebGLRenderer.prototype.resetGLState = function () {\r\n    console.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\r\n    return this.state.reset();\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsFloatTextures = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\",\r\n    );\r\n    return this.extensions.get('OES_texture_float');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsHalfFloatTextures = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\",\r\n    );\r\n    return this.extensions.get('OES_texture_half_float');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsStandardDerivatives = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\",\r\n    );\r\n    return this.extensions.get('OES_standard_derivatives');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\",\r\n    );\r\n    return this.extensions.get('WEBGL_compressed_texture_s3tc');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\",\r\n    );\r\n    return this.extensions.get('WEBGL_compressed_texture_pvrtc');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsBlendMinMax = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\",\r\n    );\r\n    return this.extensions.get('EXT_blend_minmax');\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsVertexTextures = function () {\r\n    console.warn(\r\n      'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.',\r\n    );\r\n    return this.capabilities.vertexTextures;\r\n  };\r\n\r\n  WebGLRenderer.prototype.supportsInstancedArrays = function () {\r\n    console.warn(\r\n      \"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\",\r\n    );\r\n    return this.extensions.get('ANGLE_instanced_arrays');\r\n  };\r\n\r\n  WebGLRenderer.prototype.enableScissorTest = function (boolean) {\r\n    console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\r\n    this.setScissorTest(boolean);\r\n  };\r\n\r\n  WebGLRenderer.prototype.initMaterial = function () {\r\n    console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.addPrePlugin = function () {\r\n    console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.addPostPlugin = function () {\r\n    console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.updateShadowMap = function () {\r\n    console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.setFaceCulling = function () {\r\n    console.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.allocTextureUnit = function () {\r\n    console.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.setTexture = function () {\r\n    console.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.setTexture2D = function () {\r\n    console.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.setTextureCube = function () {\r\n    console.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\r\n  };\r\n\r\n  WebGLRenderer.prototype.getActiveMipMapLevel = function () {\r\n    console.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\r\n    return this.getActiveMipmapLevel();\r\n  };\r\n\r\n  Object.defineProperties(WebGLRenderer.prototype, {\r\n    shadowMapEnabled: {\r\n      get: function () {\r\n        return this.shadowMap.enabled;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\r\n        this.shadowMap.enabled = value;\r\n      },\r\n    },\r\n    shadowMapType: {\r\n      get: function () {\r\n        return this.shadowMap.type;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\r\n        this.shadowMap.type = value;\r\n      },\r\n    },\r\n    shadowMapCullFace: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.',\r\n        );\r\n        return undefined;\r\n      },\r\n      set: function () /* value */\r\n      {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.',\r\n        );\r\n      },\r\n    },\r\n    context: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\r\n        return this.getContext();\r\n      },\r\n    },\r\n    vr: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\r\n        return this.xr;\r\n      },\r\n    },\r\n    gammaInput: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.',\r\n        );\r\n        return false;\r\n      },\r\n      set: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.',\r\n        );\r\n      },\r\n    },\r\n    gammaOutput: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.',\r\n        );\r\n        return false;\r\n      },\r\n      set: function (value) {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.',\r\n        );\r\n        this.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\r\n      },\r\n    },\r\n    toneMappingWhitePoint: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\r\n        return 1.0;\r\n      },\r\n      set: function () {\r\n        console.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\r\n      },\r\n    },\r\n  });\r\n  Object.defineProperties(WebGLShadowMap.prototype, {\r\n    cullFace: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.',\r\n        );\r\n        return undefined;\r\n      },\r\n      set: function () /* cullFace */\r\n      {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.',\r\n        );\r\n      },\r\n    },\r\n    renderReverseSided: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.',\r\n        );\r\n        return undefined;\r\n      },\r\n      set: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.',\r\n        );\r\n      },\r\n    },\r\n    renderSingleSided: {\r\n      get: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.',\r\n        );\r\n        return undefined;\r\n      },\r\n      set: function () {\r\n        console.warn(\r\n          'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.',\r\n        );\r\n      },\r\n    },\r\n  });\r\n  function WebGLRenderTargetCube(width, height, options) {\r\n    console.warn(\r\n      'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).',\r\n    );\r\n    return new WebGLCubeRenderTarget(width, options);\r\n  } //\r\n\r\n  Object.defineProperties(WebGLRenderTarget.prototype, {\r\n    wrapS: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\r\n        return this.texture.wrapS;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\r\n        this.texture.wrapS = value;\r\n      },\r\n    },\r\n    wrapT: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\r\n        return this.texture.wrapT;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\r\n        this.texture.wrapT = value;\r\n      },\r\n    },\r\n    magFilter: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\r\n        return this.texture.magFilter;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\r\n        this.texture.magFilter = value;\r\n      },\r\n    },\r\n    minFilter: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\r\n        return this.texture.minFilter;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\r\n        this.texture.minFilter = value;\r\n      },\r\n    },\r\n    anisotropy: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\r\n        return this.texture.anisotropy;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\r\n        this.texture.anisotropy = value;\r\n      },\r\n    },\r\n    offset: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\r\n        return this.texture.offset;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\r\n        this.texture.offset = value;\r\n      },\r\n    },\r\n    repeat: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\r\n        return this.texture.repeat;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\r\n        this.texture.repeat = value;\r\n      },\r\n    },\r\n    format: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\r\n        return this.texture.format;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\r\n        this.texture.format = value;\r\n      },\r\n    },\r\n    type: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\r\n        return this.texture.type;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\r\n        this.texture.type = value;\r\n      },\r\n    },\r\n    generateMipmaps: {\r\n      get: function () {\r\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\r\n        return this.texture.generateMipmaps;\r\n      },\r\n      set: function (value) {\r\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\r\n        this.texture.generateMipmaps = value;\r\n      },\r\n    },\r\n  }); //\r\n\r\n  Audio.prototype.load = function (file) {\r\n    console.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\r\n    const scope = this;\r\n    const audioLoader = new AudioLoader();\r\n    audioLoader.load(file, function (buffer) {\r\n      scope.setBuffer(buffer);\r\n    });\r\n    return this;\r\n  };\r\n\r\n  AudioAnalyser.prototype.getData = function () {\r\n    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\r\n    return this.getFrequencyData();\r\n  }; //\r\n\r\n  CubeCamera.prototype.updateCubeMap = function (renderer, scene) {\r\n    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\r\n    return this.update(renderer, scene);\r\n  };\r\n\r\n  CubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\r\n    console.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\r\n    return this.renderTarget.clear(renderer, color, depth, stencil);\r\n  };\r\n\r\n  ImageUtils.crossOrigin = undefined;\r\n\r\n  ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\r\n    console.warn(\r\n      'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.',\r\n    );\r\n    const loader = new TextureLoader();\r\n    loader.setCrossOrigin(this.crossOrigin);\r\n    const texture = loader.load(url, onLoad, undefined, onError);\r\n    if (mapping) texture.mapping = mapping;\r\n    return texture;\r\n  };\r\n\r\n  ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\r\n    console.warn(\r\n      'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.',\r\n    );\r\n    const loader = new CubeTextureLoader();\r\n    loader.setCrossOrigin(this.crossOrigin);\r\n    const texture = loader.load(urls, onLoad, undefined, onError);\r\n    if (mapping) texture.mapping = mapping;\r\n    return texture;\r\n  };\r\n\r\n  ImageUtils.loadCompressedTexture = function () {\r\n    console.error(\r\n      'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.',\r\n    );\r\n  };\r\n\r\n  ImageUtils.loadCompressedTextureCube = function () {\r\n    console.error(\r\n      'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.',\r\n    );\r\n  }; //\r\n\r\n  function CanvasRenderer() {\r\n    console.error('THREE.CanvasRenderer has been removed');\r\n  } //\r\n\r\n  function JSONLoader() {\r\n    console.error('THREE.JSONLoader has been removed.');\r\n  } //\r\n\r\n  const SceneUtils = {\r\n    createMultiMaterialObject: function () /* geometry, materials */\r\n    {\r\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\r\n    },\r\n    detach: function () /* child, parent, scene */\r\n    {\r\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\r\n    },\r\n    attach: function () /* child, scene, parent */\r\n    {\r\n      console.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\r\n    },\r\n  }; //\r\n\r\n  function LensFlare() {\r\n    console.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\r\n  }\r\n\r\n  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\r\n    /* eslint-disable no-undef */\r\n    __THREE_DEVTOOLS__.dispatchEvent(\r\n      new CustomEvent('register', {\r\n        detail: {\r\n          revision: REVISION,\r\n        },\r\n      }),\r\n    );\r\n    /* eslint-enable no-undef */\r\n  }\r\n\r\n  if (typeof window !== 'undefined') {\r\n    if (window.__THREE__) {\r\n      console.warn('WARNING: Multiple instances of Three.js being imported.');\r\n    } else {\r\n      window.__THREE__ = REVISION;\r\n    }\r\n  }\r\n\r\n  exports.ACESFilmicToneMapping = ACESFilmicToneMapping;\r\n  exports.AddEquation = AddEquation;\r\n  exports.AddOperation = AddOperation;\r\n  exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\r\n  exports.AdditiveBlending = AdditiveBlending;\r\n  exports.AlphaFormat = AlphaFormat;\r\n  exports.AlwaysDepth = AlwaysDepth;\r\n  exports.AlwaysStencilFunc = AlwaysStencilFunc;\r\n  exports.AmbientLight = AmbientLight;\r\n  exports.AmbientLightProbe = AmbientLightProbe;\r\n  exports.AnimationClip = AnimationClip;\r\n  exports.AnimationLoader = AnimationLoader;\r\n  exports.AnimationMixer = AnimationMixer;\r\n  exports.AnimationObjectGroup = AnimationObjectGroup;\r\n  exports.AnimationUtils = AnimationUtils;\r\n  exports.ArcCurve = ArcCurve;\r\n  exports.ArrayCamera = ArrayCamera;\r\n  exports.ArrowHelper = ArrowHelper;\r\n  exports.Audio = Audio;\r\n  exports.AudioAnalyser = AudioAnalyser;\r\n  exports.AudioContext = AudioContext;\r\n  exports.AudioListener = AudioListener;\r\n  exports.AudioLoader = AudioLoader;\r\n  exports.AxesHelper = AxesHelper;\r\n  exports.AxisHelper = AxisHelper;\r\n  exports.BackSide = BackSide;\r\n  exports.BasicDepthPacking = BasicDepthPacking;\r\n  exports.BasicShadowMap = BasicShadowMap;\r\n  exports.BinaryTextureLoader = BinaryTextureLoader;\r\n  exports.Bone = Bone;\r\n  exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\r\n  exports.BoundingBoxHelper = BoundingBoxHelper;\r\n  exports.Box2 = Box2;\r\n  exports.Box3 = Box3;\r\n  exports.Box3Helper = Box3Helper;\r\n  exports.BoxBufferGeometry = BoxGeometry;\r\n  exports.BoxGeometry = BoxGeometry;\r\n  exports.BoxHelper = BoxHelper;\r\n  exports.BufferAttribute = BufferAttribute;\r\n  exports.BufferGeometry = BufferGeometry;\r\n  exports.BufferGeometryLoader = BufferGeometryLoader;\r\n  exports.ByteType = ByteType;\r\n  exports.Cache = Cache;\r\n  exports.Camera = Camera;\r\n  exports.CameraHelper = CameraHelper;\r\n  exports.CanvasRenderer = CanvasRenderer;\r\n  exports.CanvasTexture = CanvasTexture;\r\n  exports.CatmullRomCurve3 = CatmullRomCurve3;\r\n  exports.CineonToneMapping = CineonToneMapping;\r\n  exports.CircleBufferGeometry = CircleGeometry;\r\n  exports.CircleGeometry = CircleGeometry;\r\n  exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\r\n  exports.Clock = Clock;\r\n  exports.Color = Color;\r\n  exports.ColorKeyframeTrack = ColorKeyframeTrack;\r\n  exports.CompressedTexture = CompressedTexture;\r\n  exports.CompressedTextureLoader = CompressedTextureLoader;\r\n  exports.ConeBufferGeometry = ConeGeometry;\r\n  exports.ConeGeometry = ConeGeometry;\r\n  exports.CubeCamera = CubeCamera;\r\n  exports.CubeReflectionMapping = CubeReflectionMapping;\r\n  exports.CubeRefractionMapping = CubeRefractionMapping;\r\n  exports.CubeTexture = CubeTexture;\r\n  exports.CubeTextureLoader = CubeTextureLoader;\r\n  exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\r\n  exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\r\n  exports.CubicBezierCurve = CubicBezierCurve;\r\n  exports.CubicBezierCurve3 = CubicBezierCurve3;\r\n  exports.CubicInterpolant = CubicInterpolant;\r\n  exports.CullFaceBack = CullFaceBack;\r\n  exports.CullFaceFront = CullFaceFront;\r\n  exports.CullFaceFrontBack = CullFaceFrontBack;\r\n  exports.CullFaceNone = CullFaceNone;\r\n  exports.Curve = Curve;\r\n  exports.CurvePath = CurvePath;\r\n  exports.CustomBlending = CustomBlending;\r\n  exports.CustomToneMapping = CustomToneMapping;\r\n  exports.CylinderBufferGeometry = CylinderGeometry;\r\n  exports.CylinderGeometry = CylinderGeometry;\r\n  exports.Cylindrical = Cylindrical;\r\n  exports.DataTexture = DataTexture;\r\n  exports.DataTexture2DArray = DataTexture2DArray;\r\n  exports.DataTexture3D = DataTexture3D;\r\n  exports.DataTextureLoader = DataTextureLoader;\r\n  exports.DataUtils = DataUtils;\r\n  exports.DecrementStencilOp = DecrementStencilOp;\r\n  exports.DecrementWrapStencilOp = DecrementWrapStencilOp;\r\n  exports.DefaultLoadingManager = DefaultLoadingManager;\r\n  exports.DepthFormat = DepthFormat;\r\n  exports.DepthStencilFormat = DepthStencilFormat;\r\n  exports.DepthTexture = DepthTexture;\r\n  exports.DirectionalLight = DirectionalLight;\r\n  exports.DirectionalLightHelper = DirectionalLightHelper;\r\n  exports.DiscreteInterpolant = DiscreteInterpolant;\r\n  exports.DodecahedronBufferGeometry = DodecahedronGeometry;\r\n  exports.DodecahedronGeometry = DodecahedronGeometry;\r\n  exports.DoubleSide = DoubleSide;\r\n  exports.DstAlphaFactor = DstAlphaFactor;\r\n  exports.DstColorFactor = DstColorFactor;\r\n  exports.DynamicBufferAttribute = DynamicBufferAttribute;\r\n  exports.DynamicCopyUsage = DynamicCopyUsage;\r\n  exports.DynamicDrawUsage = DynamicDrawUsage;\r\n  exports.DynamicReadUsage = DynamicReadUsage;\r\n  exports.EdgesGeometry = EdgesGeometry;\r\n  exports.EdgesHelper = EdgesHelper;\r\n  exports.EllipseCurve = EllipseCurve;\r\n  exports.EqualDepth = EqualDepth;\r\n  exports.EqualStencilFunc = EqualStencilFunc;\r\n  exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\r\n  exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\r\n  exports.Euler = Euler;\r\n  exports.EventDispatcher = EventDispatcher;\r\n  exports.ExtrudeBufferGeometry = ExtrudeGeometry;\r\n  exports.ExtrudeGeometry = ExtrudeGeometry;\r\n  exports.FaceColors = FaceColors;\r\n  exports.FileLoader = FileLoader;\r\n  exports.FlatShading = FlatShading;\r\n  exports.Float16BufferAttribute = Float16BufferAttribute;\r\n  exports.Float32Attribute = Float32Attribute;\r\n  exports.Float32BufferAttribute = Float32BufferAttribute;\r\n  exports.Float64Attribute = Float64Attribute;\r\n  exports.Float64BufferAttribute = Float64BufferAttribute;\r\n  exports.FloatType = FloatType;\r\n  exports.Fog = Fog;\r\n  exports.FogExp2 = FogExp2;\r\n  exports.Font = Font;\r\n  exports.FontLoader = FontLoader;\r\n  exports.FrontSide = FrontSide;\r\n  exports.Frustum = Frustum;\r\n  exports.GLBufferAttribute = GLBufferAttribute;\r\n  exports.GLSL1 = GLSL1;\r\n  exports.GLSL3 = GLSL3;\r\n  exports.GammaEncoding = GammaEncoding;\r\n  exports.GreaterDepth = GreaterDepth;\r\n  exports.GreaterEqualDepth = GreaterEqualDepth;\r\n  exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\r\n  exports.GreaterStencilFunc = GreaterStencilFunc;\r\n  exports.GridHelper = GridHelper;\r\n  exports.Group = Group;\r\n  exports.HalfFloatType = HalfFloatType;\r\n  exports.HemisphereLight = HemisphereLight;\r\n  exports.HemisphereLightHelper = HemisphereLightHelper;\r\n  exports.HemisphereLightProbe = HemisphereLightProbe;\r\n  exports.IcosahedronBufferGeometry = IcosahedronGeometry;\r\n  exports.IcosahedronGeometry = IcosahedronGeometry;\r\n  exports.ImageBitmapLoader = ImageBitmapLoader;\r\n  exports.ImageLoader = ImageLoader;\r\n  exports.ImageUtils = ImageUtils;\r\n  exports.ImmediateRenderObject = ImmediateRenderObject;\r\n  exports.IncrementStencilOp = IncrementStencilOp;\r\n  exports.IncrementWrapStencilOp = IncrementWrapStencilOp;\r\n  exports.InstancedBufferAttribute = InstancedBufferAttribute;\r\n  exports.InstancedBufferGeometry = InstancedBufferGeometry;\r\n  exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\r\n  exports.InstancedMesh = InstancedMesh;\r\n  exports.Int16Attribute = Int16Attribute;\r\n  exports.Int16BufferAttribute = Int16BufferAttribute;\r\n  exports.Int32Attribute = Int32Attribute;\r\n  exports.Int32BufferAttribute = Int32BufferAttribute;\r\n  exports.Int8Attribute = Int8Attribute;\r\n  exports.Int8BufferAttribute = Int8BufferAttribute;\r\n  exports.IntType = IntType;\r\n  exports.InterleavedBuffer = InterleavedBuffer;\r\n  exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\r\n  exports.Interpolant = Interpolant;\r\n  exports.InterpolateDiscrete = InterpolateDiscrete;\r\n  exports.InterpolateLinear = InterpolateLinear;\r\n  exports.InterpolateSmooth = InterpolateSmooth;\r\n  exports.InvertStencilOp = InvertStencilOp;\r\n  exports.JSONLoader = JSONLoader;\r\n  exports.KeepStencilOp = KeepStencilOp;\r\n  exports.KeyframeTrack = KeyframeTrack;\r\n  exports.LOD = LOD;\r\n  exports.LatheBufferGeometry = LatheGeometry;\r\n  exports.LatheGeometry = LatheGeometry;\r\n  exports.Layers = Layers;\r\n  exports.LensFlare = LensFlare;\r\n  exports.LessDepth = LessDepth;\r\n  exports.LessEqualDepth = LessEqualDepth;\r\n  exports.LessEqualStencilFunc = LessEqualStencilFunc;\r\n  exports.LessStencilFunc = LessStencilFunc;\r\n  exports.Light = Light;\r\n  exports.LightProbe = LightProbe;\r\n  exports.Line = Line;\r\n  exports.Line3 = Line3;\r\n  exports.LineBasicMaterial = LineBasicMaterial;\r\n  exports.LineCurve = LineCurve;\r\n  exports.LineCurve3 = LineCurve3;\r\n  exports.LineDashedMaterial = LineDashedMaterial;\r\n  exports.LineLoop = LineLoop;\r\n  exports.LinePieces = LinePieces;\r\n  exports.LineSegments = LineSegments;\r\n  exports.LineStrip = LineStrip;\r\n  exports.LinearEncoding = LinearEncoding;\r\n  exports.LinearFilter = LinearFilter;\r\n  exports.LinearInterpolant = LinearInterpolant;\r\n  exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\r\n  exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\r\n  exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\r\n  exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\r\n  exports.LinearToneMapping = LinearToneMapping;\r\n  exports.Loader = Loader;\r\n  exports.LoaderUtils = LoaderUtils;\r\n  exports.LoadingManager = LoadingManager;\r\n  exports.LogLuvEncoding = LogLuvEncoding;\r\n  exports.LoopOnce = LoopOnce;\r\n  exports.LoopPingPong = LoopPingPong;\r\n  exports.LoopRepeat = LoopRepeat;\r\n  exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\r\n  exports.LuminanceFormat = LuminanceFormat;\r\n  exports.MOUSE = MOUSE;\r\n  exports.Material = Material;\r\n  exports.MaterialLoader = MaterialLoader;\r\n  exports.Math = MathUtils;\r\n  exports.MathUtils = MathUtils;\r\n  exports.Matrix3 = Matrix3;\r\n  exports.Matrix4 = Matrix4;\r\n  exports.MaxEquation = MaxEquation;\r\n  exports.Mesh = Mesh;\r\n  exports.MeshBasicMaterial = MeshBasicMaterial;\r\n  exports.MeshDepthMaterial = MeshDepthMaterial;\r\n  exports.MeshDistanceMaterial = MeshDistanceMaterial;\r\n  exports.MeshFaceMaterial = MeshFaceMaterial;\r\n  exports.MeshLambertMaterial = MeshLambertMaterial;\r\n  exports.MeshMatcapMaterial = MeshMatcapMaterial;\r\n  exports.MeshNormalMaterial = MeshNormalMaterial;\r\n  exports.MeshPhongMaterial = MeshPhongMaterial;\r\n  exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\r\n  exports.MeshStandardMaterial = MeshStandardMaterial;\r\n  exports.MeshToonMaterial = MeshToonMaterial;\r\n  exports.MinEquation = MinEquation;\r\n  exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\r\n  exports.MixOperation = MixOperation;\r\n  exports.MultiMaterial = MultiMaterial;\r\n  exports.MultiplyBlending = MultiplyBlending;\r\n  exports.MultiplyOperation = MultiplyOperation;\r\n  exports.NearestFilter = NearestFilter;\r\n  exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\r\n  exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\r\n  exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\r\n  exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\r\n  exports.NeverDepth = NeverDepth;\r\n  exports.NeverStencilFunc = NeverStencilFunc;\r\n  exports.NoBlending = NoBlending;\r\n  exports.NoColors = NoColors;\r\n  exports.NoToneMapping = NoToneMapping;\r\n  exports.NormalAnimationBlendMode = NormalAnimationBlendMode;\r\n  exports.NormalBlending = NormalBlending;\r\n  exports.NotEqualDepth = NotEqualDepth;\r\n  exports.NotEqualStencilFunc = NotEqualStencilFunc;\r\n  exports.NumberKeyframeTrack = NumberKeyframeTrack;\r\n  exports.Object3D = Object3D;\r\n  exports.ObjectLoader = ObjectLoader;\r\n  exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\r\n  exports.OctahedronBufferGeometry = OctahedronGeometry;\r\n  exports.OctahedronGeometry = OctahedronGeometry;\r\n  exports.OneFactor = OneFactor;\r\n  exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\r\n  exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\r\n  exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\r\n  exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\r\n  exports.OrthographicCamera = OrthographicCamera;\r\n  exports.PCFShadowMap = PCFShadowMap;\r\n  exports.PCFSoftShadowMap = PCFSoftShadowMap;\r\n  exports.PMREMGenerator = PMREMGenerator;\r\n  exports.ParametricBufferGeometry = ParametricGeometry;\r\n  exports.ParametricGeometry = ParametricGeometry;\r\n  exports.Particle = Particle;\r\n  exports.ParticleBasicMaterial = ParticleBasicMaterial;\r\n  exports.ParticleSystem = ParticleSystem;\r\n  exports.ParticleSystemMaterial = ParticleSystemMaterial;\r\n  exports.Path = Path;\r\n  exports.PerspectiveCamera = PerspectiveCamera;\r\n  exports.Plane = Plane;\r\n  exports.PlaneBufferGeometry = PlaneGeometry;\r\n  exports.PlaneGeometry = PlaneGeometry;\r\n  exports.PlaneHelper = PlaneHelper;\r\n  exports.PointCloud = PointCloud;\r\n  exports.PointCloudMaterial = PointCloudMaterial;\r\n  exports.PointLight = PointLight;\r\n  exports.PointLightHelper = PointLightHelper;\r\n  exports.Points = Points;\r\n  exports.PointsMaterial = PointsMaterial;\r\n  exports.PolarGridHelper = PolarGridHelper;\r\n  exports.PolyhedronBufferGeometry = PolyhedronGeometry;\r\n  exports.PolyhedronGeometry = PolyhedronGeometry;\r\n  exports.PositionalAudio = PositionalAudio;\r\n  exports.PropertyBinding = PropertyBinding;\r\n  exports.PropertyMixer = PropertyMixer;\r\n  exports.QuadraticBezierCurve = QuadraticBezierCurve;\r\n  exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\r\n  exports.Quaternion = Quaternion;\r\n  exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\r\n  exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\r\n  exports.REVISION = REVISION;\r\n  exports.RGBADepthPacking = RGBADepthPacking;\r\n  exports.RGBAFormat = RGBAFormat;\r\n  exports.RGBAIntegerFormat = RGBAIntegerFormat;\r\n  exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\r\n  exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\r\n  exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\r\n  exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\r\n  exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\r\n  exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\r\n  exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\r\n  exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\r\n  exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\r\n  exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\r\n  exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\r\n  exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\r\n  exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\r\n  exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\r\n  exports.RGBA_BPTC_Format = RGBA_BPTC_Format;\r\n  exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\r\n  exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\r\n  exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\r\n  exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\r\n  exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\r\n  exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\r\n  exports.RGBDEncoding = RGBDEncoding;\r\n  exports.RGBEEncoding = RGBEEncoding;\r\n  exports.RGBEFormat = RGBEFormat;\r\n  exports.RGBFormat = RGBFormat;\r\n  exports.RGBIntegerFormat = RGBIntegerFormat;\r\n  exports.RGBM16Encoding = RGBM16Encoding;\r\n  exports.RGBM7Encoding = RGBM7Encoding;\r\n  exports.RGB_ETC1_Format = RGB_ETC1_Format;\r\n  exports.RGB_ETC2_Format = RGB_ETC2_Format;\r\n  exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\r\n  exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\r\n  exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\r\n  exports.RGFormat = RGFormat;\r\n  exports.RGIntegerFormat = RGIntegerFormat;\r\n  exports.RawShaderMaterial = RawShaderMaterial;\r\n  exports.Ray = Ray;\r\n  exports.Raycaster = Raycaster;\r\n  exports.RectAreaLight = RectAreaLight;\r\n  exports.RedFormat = RedFormat;\r\n  exports.RedIntegerFormat = RedIntegerFormat;\r\n  exports.ReinhardToneMapping = ReinhardToneMapping;\r\n  exports.RepeatWrapping = RepeatWrapping;\r\n  exports.ReplaceStencilOp = ReplaceStencilOp;\r\n  exports.ReverseSubtractEquation = ReverseSubtractEquation;\r\n  exports.RingBufferGeometry = RingGeometry;\r\n  exports.RingGeometry = RingGeometry;\r\n  exports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\r\n  exports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\r\n  exports.Scene = Scene;\r\n  exports.SceneUtils = SceneUtils;\r\n  exports.ShaderChunk = ShaderChunk;\r\n  exports.ShaderLib = ShaderLib;\r\n  exports.ShaderMaterial = ShaderMaterial;\r\n  exports.ShadowMaterial = ShadowMaterial;\r\n  exports.Shape = Shape;\r\n  exports.ShapeBufferGeometry = ShapeGeometry;\r\n  exports.ShapeGeometry = ShapeGeometry;\r\n  exports.ShapePath = ShapePath;\r\n  exports.ShapeUtils = ShapeUtils;\r\n  exports.ShortType = ShortType;\r\n  exports.Skeleton = Skeleton;\r\n  exports.SkeletonHelper = SkeletonHelper;\r\n  exports.SkinnedMesh = SkinnedMesh;\r\n  exports.SmoothShading = SmoothShading;\r\n  exports.Sphere = Sphere;\r\n  exports.SphereBufferGeometry = SphereGeometry;\r\n  exports.SphereGeometry = SphereGeometry;\r\n  exports.Spherical = Spherical;\r\n  exports.SphericalHarmonics3 = SphericalHarmonics3;\r\n  exports.SplineCurve = SplineCurve;\r\n  exports.SpotLight = SpotLight;\r\n  exports.SpotLightHelper = SpotLightHelper;\r\n  exports.Sprite = Sprite;\r\n  exports.SpriteMaterial = SpriteMaterial;\r\n  exports.SrcAlphaFactor = SrcAlphaFactor;\r\n  exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\r\n  exports.SrcColorFactor = SrcColorFactor;\r\n  exports.StaticCopyUsage = StaticCopyUsage;\r\n  exports.StaticDrawUsage = StaticDrawUsage;\r\n  exports.StaticReadUsage = StaticReadUsage;\r\n  exports.StereoCamera = StereoCamera;\r\n  exports.StreamCopyUsage = StreamCopyUsage;\r\n  exports.StreamDrawUsage = StreamDrawUsage;\r\n  exports.StreamReadUsage = StreamReadUsage;\r\n  exports.StringKeyframeTrack = StringKeyframeTrack;\r\n  exports.SubtractEquation = SubtractEquation;\r\n  exports.SubtractiveBlending = SubtractiveBlending;\r\n  exports.TOUCH = TOUCH;\r\n  exports.TangentSpaceNormalMap = TangentSpaceNormalMap;\r\n  exports.TetrahedronBufferGeometry = TetrahedronGeometry;\r\n  exports.TetrahedronGeometry = TetrahedronGeometry;\r\n  exports.TextBufferGeometry = TextGeometry;\r\n  exports.TextGeometry = TextGeometry;\r\n  exports.Texture = Texture;\r\n  exports.TextureLoader = TextureLoader;\r\n  exports.TorusBufferGeometry = TorusGeometry;\r\n  exports.TorusGeometry = TorusGeometry;\r\n  exports.TorusKnotBufferGeometry = TorusKnotGeometry;\r\n  exports.TorusKnotGeometry = TorusKnotGeometry;\r\n  exports.Triangle = Triangle;\r\n  exports.TriangleFanDrawMode = TriangleFanDrawMode;\r\n  exports.TriangleStripDrawMode = TriangleStripDrawMode;\r\n  exports.TrianglesDrawMode = TrianglesDrawMode;\r\n  exports.TubeBufferGeometry = TubeGeometry;\r\n  exports.TubeGeometry = TubeGeometry;\r\n  exports.UVMapping = UVMapping;\r\n  exports.Uint16Attribute = Uint16Attribute;\r\n  exports.Uint16BufferAttribute = Uint16BufferAttribute;\r\n  exports.Uint32Attribute = Uint32Attribute;\r\n  exports.Uint32BufferAttribute = Uint32BufferAttribute;\r\n  exports.Uint8Attribute = Uint8Attribute;\r\n  exports.Uint8BufferAttribute = Uint8BufferAttribute;\r\n  exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\r\n  exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\r\n  exports.Uniform = Uniform;\r\n  exports.UniformsLib = UniformsLib;\r\n  exports.UniformsUtils = UniformsUtils;\r\n  exports.UnsignedByteType = UnsignedByteType;\r\n  exports.UnsignedInt248Type = UnsignedInt248Type;\r\n  exports.UnsignedIntType = UnsignedIntType;\r\n  exports.UnsignedShort4444Type = UnsignedShort4444Type;\r\n  exports.UnsignedShort5551Type = UnsignedShort5551Type;\r\n  exports.UnsignedShort565Type = UnsignedShort565Type;\r\n  exports.UnsignedShortType = UnsignedShortType;\r\n  exports.VSMShadowMap = VSMShadowMap;\r\n  exports.Vector2 = Vector2;\r\n  exports.Vector3 = Vector3;\r\n  exports.Vector4 = Vector4;\r\n  exports.VectorKeyframeTrack = VectorKeyframeTrack;\r\n  exports.Vertex = Vertex;\r\n  exports.VertexColors = VertexColors;\r\n  exports.VideoTexture = VideoTexture;\r\n  exports.WebGL1Renderer = WebGL1Renderer;\r\n  exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\r\n  exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;\r\n  exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\r\n  exports.WebGLRenderTarget = WebGLRenderTarget;\r\n  exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\r\n  exports.WebGLRenderer = WebGLRenderer;\r\n  exports.WebGLUtils = WebGLUtils;\r\n  exports.WireframeGeometry = WireframeGeometry;\r\n  exports.WireframeHelper = WireframeHelper;\r\n  exports.WrapAroundEnding = WrapAroundEnding;\r\n  exports.XHRLoader = XHRLoader;\r\n  exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\r\n  exports.ZeroFactor = ZeroFactor;\r\n  exports.ZeroSlopeEnding = ZeroSlopeEnding;\r\n  exports.ZeroStencilOp = ZeroStencilOp;\r\n  exports.sRGBEncoding = sRGBEncoding;\r\n\r\n  Object.defineProperty(exports, '__esModule', { value: true });\r\n});\r\n","import './sass/main.scss';\nimport './js/three/three';\nimport './js/three/options';\n"]}